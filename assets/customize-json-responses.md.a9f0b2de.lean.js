import{_ as s,c as n,o as a,a as t}from"./app.14440598.js";const g='{"title":"Customize JSON Responses","description":"","frontmatter":{"slug":"customize-json-responses","title":"Customize JSON Responses"},"headers":[{"level":2,"title":"Global Default JSON Configuration","slug":"global-default-json-configuration"},{"level":2,"title":"Customize JSON Responses in Service","slug":"customize-json-responses-in-service"},{"level":2,"title":"Customize JSON Responses from Client","slug":"customize-json-responses-from-client"},{"level":3,"title":"Camel Humps Notation","slug":"camel-humps-notation"},{"level":3,"title":"Custom JSON Live Example","slug":"custom-json-live-example"},{"level":3,"title":"Custom JSON Settings","slug":"custom-json-settings"},{"level":3,"title":"DateHandler (dh)","slug":"datehandler-dh"},{"level":3,"title":"TimeSpanHandler (tsh)","slug":"timespanhandler-tsh"},{"level":3,"title":"PropertyConvention (pc)","slug":"propertyconvention-pc"},{"level":3,"title":"Accept arbitrary JavaScript or JSON Objects","slug":"accept-arbitrary-javascript-or-json-objects"}],"relativePath":"customize-json-responses.md","lastUpdated":1634495307614}',e={},o=t(`__VP_STATIC_START__<p>The JSON Responses for all ServiceStack Services can be configured Globally, individually per-Service or customized per-request by the client using the <code>?jsconfig</code> QueryString modifier.</p><h2 id="global-default-json-configuration" tabindex="-1">Global Default JSON Configuration <a class="header-anchor" href="#global-default-json-configuration" aria-hidden="true">#</a></h2><p>ServiceStack uses the <a href="https://github.com/ServiceStack/ServiceStack.Text" target="_blank" rel="noopener noreferrer">ServiceStack.Text Serializers</a> for its built-in JSON/JSV and CSV serialization. The serialization can be customized globally by configuring the <code>JsConfig</code> or type-specific <code>JsConfig&lt;T&gt;</code> static classes with your preferred defaults, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    JsConfig<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceStack<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Config</span> <span class="token punctuation">{</span>
        TextCase <span class="token operator">=</span> TextCase<span class="token punctuation">.</span>SnakeCase<span class="token punctuation">,</span>
        ExcludeDefaultValues <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    JsConfig<span class="token operator">&lt;</span>Guid<span class="token operator">&gt;</span><span class="token punctuation">.</span>SerializeFn <span class="token operator">=</span> guid <span class="token operator">=&gt;</span> guid<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    JsConfig<span class="token operator">&lt;</span>TimeSpan<span class="token operator">&gt;</span><span class="token punctuation">.</span>SerializeFn <span class="token operator">=</span> time <span class="token operator">=&gt;</span> 
        <span class="token punctuation">(</span>time<span class="token punctuation">.</span>Ticks <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">?</span> <span class="token string">&quot;-&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;hh&#39;:&#39;mm&#39;:&#39;ss&#39;.&#39;fffffff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="customize-json-responses-in-service" tabindex="-1">Customize JSON Responses in Service <a class="header-anchor" href="#customize-json-responses-in-service" aria-hidden="true">#</a></h2><p>The Global Defaults can be overridden on a adhoc basis by returning your Response DTO in a custom <code>HttpResult</code> configured with a custom JS Config Scope, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span>responseDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ResultScope <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        JsConfig<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Config</span> <span class="token punctuation">{</span> IncludeNullValues <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ExcludeDefaultValues <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>This has the same behavior for your Service Responses as creating a Custom Config Scope for adhoc Serialization that overrides Global Configuration, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span>JsConfig<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Config</span> <span class="token punctuation">{</span> IncludeNullValues <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ExcludeDefaultValues <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> dto<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="customize-json-responses-from-client" tabindex="-1">Customize JSON Responses from Client <a class="header-anchor" href="#customize-json-responses-from-client" aria-hidden="true">#</a></h2><p>The JSON and JSV Responses for all Services (inc. <a href="/autoquery.html">Auto Query</a> Services) can also be further customized with the new <code>?jsconfig</code> QueryString param which lets your Service consumers customize the returned JSON Response to their preference. This works similar to having wrapped your Service response in a <code>HttpResult</code> with a Custom <code>ResultScope</code> in the Service implementation to enable non-default customization of a Services response, e.g:</p><div class="language-"><pre><code>/service?jsconfig=EmitLowercaseUnderscoreNames,ExcludeDefaultValues
</code></pre></div><p>Works similarly to:</p><div class="language-csharp"><pre><code><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> TheKey <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> Foo<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ResultScope <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        JsConfig<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Config</span> <span class="token punctuation">{</span> TextCase <span class="token operator">=</span> TextCase<span class="token punctuation">.</span>SnakeCase<span class="token punctuation">,</span> ExcludeDefaultValues <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Which results in <strong>lowercase_underscore</strong> key names with any properties with <strong>default values removed</strong>:</p><div class="language-json"><pre><code><span class="token punctuation">{</span><span class="token property">&quot;the_key&quot;</span><span class="token operator">:</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">}</span>
</code></pre></div><p>It also supports cascading server and client ResultScopes, with the client <code>?jsconfig</code> taking precedence.</p><p>Nearly all <code>JsConfig</code> scope options are supported other than delegates and complex type configuration properties.</p><h3 id="camel-humps-notation" tabindex="-1">Camel Humps Notation <a class="header-anchor" href="#camel-humps-notation" aria-hidden="true">#</a></h3><p>JsConfig also supports Camel Humps notation letting you target a configuration by just using the <strong>Uppercase Letters</strong> in the property name which is also case-insensitive so an equivalent shorter version of the above config can be:</p><div class="language-"><pre><code>?jsconfig=ELUN,edv
</code></pre></div><p>Camel Humps also works with Enum Values so both these two configurations are the same:</p><div class="language-"><pre><code>?jsconfig=DateHandler:UnixTime
?jsconfig=dh:ut
</code></pre></div><h3 id="custom-json-live-example" tabindex="-1">Custom JSON Live Example <a class="header-anchor" href="#custom-json-live-example" aria-hidden="true">#</a></h3><p><a href="https://github.com/ServiceStack/Admin" target="_blank" rel="noopener noreferrer">AutoQuery Viewer</a> makes use of this feature in order to return human readable dates using the new <code>ISO8601DateOnly</code> DateHandler Enum Value as well as appending <code>ExcludeDefaultValues</code> when specifying custom fields so that any unpopulated value type properties with default values are excluded from the JSON Response. Here&#39;s a live example of this comparing the default Response with the customized JSON Response:</p><ul><li><a href="http://github.servicestack.net/repos.json?fields=Name,Homepage,Language,Updated_At" target="_blank" rel="noopener noreferrer">github.servicestack.net/repos.json?fields=Name,Homepage,Language,Updated_At</a></li><li><a href="http://github.servicestack.net/repos.json?fields=Name,Homepage,Language,Updated_At&amp;jsconfig=edv,dh:iso8601do" target="_blank" rel="noopener noreferrer">github.servicestack.net/repos.json?fields=Name,Homepage,Language,Updated_At&amp;jsconfig=edv,dh:iso8601do</a></li></ul><h3 id="custom-json-settings" tabindex="-1">Custom JSON Settings <a class="header-anchor" href="#custom-json-settings" aria-hidden="true">#</a></h3><p>The presence of a <strong>bool</strong> configuration property will be set to <code>true</code> unless they have a <code>false</code> or <code>0</code> value in which case they will be set to <code>false</code>, e.g:</p><div class="language-"><pre><code>?jsconfig=ExcludeDefaultValues:false
</code></pre></div><p>For a quick reference the following <strong>bool</strong> customizations are supported:</p><table class="table"><thead><tr><th>Name</th><th>Alias</th></tr></thead><tr><td>EmitCamelCaseNames</td><td>eccn</td></tr><tr><td>EmitLowercaseUnderscoreNames</td><td>elun</td></tr><tr><td>IncludeNullValues</td><td>inv</td></tr><tr><td>IncludeNullValuesInDictionaries</td><td>invid</td></tr><tr><td>IncludeDefaultEnums</td><td>ide</td></tr><tr><td>IncludePublicFields</td><td>ipf</td></tr><tr><td>IncludeTypeInfo</td><td>iti</td></tr><tr><td>ExcludeTypeInfo</td><td>eti</td></tr><tr><td>ConvertObjectTypesIntoStringDictionary</td><td>cotisd</td></tr><tr><td>TreatEnumAsInteger</td><td>teai</td></tr><tr><td>TryToParsePrimitiveTypeValues</td><td>ttpptv</td></tr><tr><td>TryToParseNumericType</td><td>ttpnt</td></tr><tr><td>ThrowOnDeserializationError</td><td>tode</td></tr><tr><td>PreferInterfaces</td><td>pi</td></tr><tr><td>SkipDateTimeConversion</td><td>sdtc</td></tr><tr><td>AlwaysUseUtc</td><td>auu</td></tr><tr><td>AssumeUtc</td><td>au</td></tr><tr><td>AppendUtcOffset</td><td>auo</td></tr><tr><td>EscapeHtmlChars</td><td>ehc</td></tr><tr><td>EscapeUnicode</td><td>eu</td></tr></table><h3 id="datehandler-dh" tabindex="-1">DateHandler (dh) <a class="header-anchor" href="#datehandler-dh" aria-hidden="true">#</a></h3><table class="table"><tr><td>TimestampOffset</td><td>to</td></tr><tr><td>DCJSCompatible</td><td>dcjsc</td></tr><tr><td>ISO8601</td><td>iso8601</td></tr><tr><td>ISO8601DateOnly</td><td>iso8601do</td></tr><tr><td>ISO8601DateTime</td><td>iso8601dt</td></tr><tr><td>RFC1123</td><td>rfc1123</td></tr><tr><td>UnixTime</td><td>ut</td></tr><tr><td>UnixTimeMs</td><td>utm</td></tr></table><h3 id="timespanhandler-tsh" tabindex="-1">TimeSpanHandler (tsh) <a class="header-anchor" href="#timespanhandler-tsh" aria-hidden="true">#</a></h3><table class="table"><tr><td>DurationFormat</td><td>df</td></tr><tr><td>StandardFormat</td><td>sf</td></tr></table><h3 id="propertyconvention-pc" tabindex="-1">PropertyConvention (pc) <a class="header-anchor" href="#propertyconvention-pc" aria-hidden="true">#</a></h3><table class="table"><tr><td>Strict</td><td>s</td></tr><tr><td>Lenient</td><td>l</td></tr></table><h4 id="create-custom-scopes-using-string-config" tabindex="-1">Create Custom Scopes using String config <a class="header-anchor" href="#create-custom-scopes-using-string-config" aria-hidden="true">#</a></h4><p>You can also create a scope from a string manually using <code>JsConfig.CreateScope()</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span>JsConfig<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token string">&quot;EmitLowercaseUnderscoreNames,ExcludeDefaultValues,dh:ut&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> dto<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If you don&#39;t wish for consumers to be able to customize JSON responses this feature can be disabled with <code>Config.AllowJsConfig=false</code>.</p><h3 id="accept-arbitrary-javascript-or-json-objects" tabindex="-1">Accept arbitrary JavaScript or JSON Objects <a class="header-anchor" href="#accept-arbitrary-javascript-or-json-objects" aria-hidden="true">#</a></h3><p>Whilst we recommend creating well-defined, Typed Service Contracts for your Services, there are rare situations where you&#39;d want to be able to accept an arbitrary JSON payload, an example of this is with integration hooks with a 3rd party provider that calls back into your Service with a custom JSON payload, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/callback&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Callback</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>CallbackResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> Payload <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>ServiceStack <code>object</code> properties are now deserialized using <code>#Script</code> <a href="/js-utils.html">JS Utils</a> which can parse any JavaScript or JSON data structure. So if a POST callback was sent to the above service containing:</p><div class="language-"><pre><code>POST /callback

{&quot;payload&quot;: {&quot;id&quot;:1,&quot;name&quot;:&quot;foo&quot;, &quot;List&quot;: [{&quot;id&quot;:2,&quot;name&quot;:&quot;bar&quot;}], &quot;Dictionary&quot;: {&quot;key&quot;:{&quot;id&quot;:3,&quot;name&quot;:&quot;bax&quot;}} }}
</code></pre></div><p>It will parsed into the appropriate .NET Types and generic collections which can be accessed with:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> payload <span class="token operator">=</span> request<span class="token punctuation">.</span>Object <span class="token keyword">as</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                             <span class="token comment">//= 1</span>
    <span class="token class-name"><span class="token keyword">var</span></span> name <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                         <span class="token comment">//= foo</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">&quot;List&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> firstListItem <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> firstListName <span class="token operator">=</span> firstListItem<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">//= bar</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dictionary <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">&quot;Dictionary&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dictionaryValue <span class="token operator">=</span> dictionary<span class="token punctuation">[</span><span class="token string">&quot;Key&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dictionaryValueName <span class="token operator">=</span> dictionaryValue<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//= baz</span>
<span class="token punctuation">}</span>
</code></pre></div><p>As it&#39;s using <a href="/js-utils.html">JS Utils</a> it can also accept JavaScript object literal syntax, e.g: <code>{ payload: { id: 1 } }</code>.</p><h4 id="avoid-unknown-types-in-servicecontracts" tabindex="-1">Avoid unknown Types in ServiceContracts <a class="header-anchor" href="#avoid-unknown-types-in-servicecontracts" aria-hidden="true">#</a></h4><p>Whilst this feature enables some flexibility by effectively poking a hole in your Service Contract as a placeholder for any arbitrary JS data structure, we still recommend only using <code>object</code> properties sparingly when it&#39;s needed as it only works with JSON/JSV Services, is subject to <a href="https://github.com/ServiceStack/ServiceStack.Text#late-bound-object-and-interface-runtime-types" target="_blank" rel="noopener noreferrer">security restrictions</a>, can&#39;t be documented in Metadata Services and isn&#39;t supported in most <a href="/add-servicestack-reference.html">Add ServiceStack Reference</a> languages.</p>__VP_STATIC_END__`,51),p=[o];function c(r,i,l,u,d,k){return a(),n("div",null,p)}var m=s(e,[["render",c]]);export{g as __pageData,m as default};
