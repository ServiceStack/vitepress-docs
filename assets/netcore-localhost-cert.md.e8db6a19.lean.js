import{_ as e,c as s,o as a,a as n}from"./app.14440598.js";const f='{"title":"Configure localhost development dev certificate","description":"","frontmatter":{"slug":"netcore-localhost-cert","title":"Configure localhost development dev certificate"},"headers":[{"level":3,"title":"When localhost is not allowed","slug":"when-localhost-is-not-allowed"},{"level":3,"title":"When developing for Android","slug":"when-developing-for-android"},{"level":3,"title":"When developing for iOS","slug":"when-developing-for-ios"},{"level":3,"title":"Generating self-signed SSL Certificates for Custom Domains","slug":"generating-self-signed-ssl-certificates-for-custom-domains"},{"level":3,"title":"Trust self-signed certificate","slug":"trust-self-signed-certificate"},{"level":3,"title":"Configure in .NET Core","slug":"configure-in-net-core"},{"level":3,"title":"Accessing from Browsers","slug":"accessing-from-browsers"},{"level":3,"title":"Accessing from C# Clients","slug":"accessing-from-c-clients"},{"level":3,"title":"Accessing from Native Applications","slug":"accessing-from-native-applications"},{"level":3,"title":"Flutter Android","slug":"flutter-android"},{"level":3,"title":"Removing Certificate Artifacts","slug":"removing-certificate-artifacts"}],"relativePath":"netcore-localhost-cert.md","lastUpdated":1634495308426}',t={},o=n(`__VP_STATIC_START__<p>Due to the environmental pressures to <a href="https://web.dev/why-https-matters/" target="_blank" rel="noopener noreferrer">use HTTPS everywhere</a> with <a href="https://blog.google/products/chrome/milestone-chrome-security-marking-http-not-secure/" target="_blank" rel="noopener noreferrer">Browsers marking HTTP as not secure</a> and <a href="https://developer.apple.com/documentation/security/preventing_insecure_network_connections" target="_blank" rel="noopener noreferrer">operating systems and mobile platforms</a> requiring all connections to be secure by default, it&#39;s become the defacto standard to both host production sites with HTTPS as well as <a href="https://www.hanselman.com/blog/DevelopingLocallyWithASPNETCoreUnderHTTPSSSLAndSelfSignedCerts.aspx" target="_blank" rel="noopener noreferrer">developing locally under HTTPS with a Self-Signed Certificate</a>.</p><p>In most cases it&#39;s sufficient to run .NET Core Apps on <code>https://localhost:5001</code> for normal browser development and if you receive an invalid certificate error you can run:</p><div class="language-bash"><pre><code>$ dotnet dev-certs https --trust
</code></pre></div><p>To trust the local development certificate and remove the SSL Certificate error in your browser.</p><h3 id="when-localhost-is-not-allowed" tabindex="-1">When localhost is not allowed <a class="header-anchor" href="#when-localhost-is-not-allowed" aria-hidden="true">#</a></h3><p>However for Apps needing to support OAuth providers that don&#39;t allow <code>localhost</code> domains like <strong>Sign In with Apple</strong> you would need to use a different domain. A popular workaround is to use a DNS name that resolves to <code>127.0.0.1</code> in which case you can use:</p><div class="language-"><pre><code>local.servicestack.com
</code></pre></div><p>Which you can use to view your local Web App typically on <code>https://localhost:5001</code> at <code>https://local.servicestack.com:5001</code> which will allow you to register as valid domains &amp; callback URLs in OAuth Apps you want to support. As this is a real DNS A record it will also work in emulators &amp; different environments like WSL.</p><h3 id="when-developing-for-android" tabindex="-1">When developing for Android <a class="header-anchor" href="#when-developing-for-android" aria-hidden="true">#</a></h3><p>But to be able to access your local dev server from an Android Emulator you&#39;d instead need to use the special <code>10.0.2.2</code> loopback IP, which you could support by <a href="https://stackoverflow.com/a/53929946/85785" target="_blank" rel="noopener noreferrer">updating your Android Emulator /system/etc/hosts file</a> mapping to include:</p><div class="language-"><pre><code>10.0.2.2       local.servicestack.com
</code></pre></div><p>Which can be quite cumbersome to change, alternatively an easier solution is to use a DNS record that resolves to <code>10.0.2.2</code>:</p><div class="language-"><pre><code>dev.servicestack.com
</code></pre></div><p>and instead update your OS hosts file (e.g. <code>%SystemRoot%\\System32\\drivers\\etc\\hosts</code> for Windows or <code>/etc/hosts</code> on macOS/Linux) to include:</p><div class="language-"><pre><code>127.0.0.1       dev.servicestack.com
</code></pre></div><p>Which will let you use the same <code>dev.servicestack.com</code> to access your local dev server in both Android Emulators and your Host OS so you can have a single domain &amp; callback URL you can use in your OAuth Apps configuration.</p><h3 id="when-developing-for-ios" tabindex="-1">When developing for iOS <a class="header-anchor" href="#when-developing-for-ios" aria-hidden="true">#</a></h3><p>As iOS is a heavily locked down OS you wont have the same opportunity to modify iOS&#39;s hosts file, instead the easiest way to configure a custom address for a given domain is to configure it on the DNS Server. Fortunately this easy to setup in macOS with a <a href="https://passingcuriosity.com/2013/dnsmasq-dev-osx/" target="_blank" rel="noopener noreferrer">lightweight, easy to configure DNS Server like Dnsmasq</a> which lets you easily add custom DNS rules whilst falling back to use its default DNS resolution for non-configured addresses.</p><p>The easiest way to install Dnsmasq on macOS is to use <a href="https://brew.sh" target="_blank" rel="noopener noreferrer">Homebrew</a>:</p><div class="language-bash"><pre><code>$ brew <span class="token function">install</span> dnsmasq
</code></pre></div><p>Once installed copy over the default configuration files:</p><div class="language-bash"><pre><code>$ <span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span>brew list dnsmasq <span class="token operator">|</span> <span class="token function">grep</span> /dnsmasq.conf.example$<span class="token variable">)</span></span> /usr/local/etc/dnsmasq.conf
$ <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span>brew list dnsmasq <span class="token operator">|</span> <span class="token function">grep</span> /homebrew.mxcl.dnsmasq.plist$<span class="token variable">)</span></span> /Library/LaunchDaemons/
</code></pre></div><p>Then configure Dnsmasq to start automatically by registering it with <strong>launchd</strong>:</p><div class="language-bash"><pre><code>$ <span class="token function">sudo</span> launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
</code></pre></div><p>The easiest to configure the IP Address for a single domain is to still add it to <code>/etc/hosts</code>, e.g. if your local <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> dev server is on a different server to your macOS being used to develop/test iOS Apps, you would use that IP Address instead:</p><div class="language-"><pre><code>192.168.0.2     dev.servicestack.com
</code></pre></div><p>Alternatively you can maintain these rules in Dnsmasq&#39;s config which offers far greater flexibility:</p><div class="language-bash"><pre><code>$ <span class="token function">sudo</span> <span class="token function">vi</span> /usr/local/etc/dnsmasq.conf
</code></pre></div><div class="language-"><pre><code>address=/dev.servicestack.com/192.168.0.2
</code></pre></div><p>In which case you&#39;ll also want to update the OS&#39;s resolver config to <a href="https://www.stevenrombauts.be/2018/01/use-dnsmasq-instead-of-etc-hosts/#2-only-send-test-and-box-queries-to-dnsmasq" target="_blank" rel="noopener noreferrer">query your local DNS Server when resolving these addresses</a>.</p><h4 id="restart-dnsmasq-to-apply-changes" tabindex="-1">Restart Dnsmasq to apply changes <a class="header-anchor" href="#restart-dnsmasq-to-apply-changes" aria-hidden="true">#</a></h4><p>After making changes to your DNS configuration, restart dnsmasq for it to take effect:</p><div class="language-bash"><pre><code>$ <span class="token function">sudo</span> launchctl stop homebrew.mxcl.dnsmasq
$ <span class="token function">sudo</span> launchctl start homebrew.mxcl.dnsmasq
</code></pre></div><h4 id="update-ios-to-use-your-custom-dns-server" tabindex="-1">Update iOS to use your custom DNS Server <a class="header-anchor" href="#update-ios-to-use-your-custom-dns-server" aria-hidden="true">#</a></h4><p>First find out the current IP Address of your macOS instance:</p><div class="language-bash"><pre><code>$ ipconfig getifaddr en0
</code></pre></div><p>Which you can get your iOS development device to use by going into your <strong>Wi-Fi</strong> Network Info in iOS <strong>Settings</strong>:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/dev/ios-network-info.jpeg" alt=""></p><p>Going to <strong>Configure DNS</strong>:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/dev/ios-wifi-info.png" alt=""></p><p>Then switching to use <strong>Manual</strong> DNS servers and adding your macOS IP Address where it will now be used to resolve DNS queries:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/dev/ios-configure-dns.jpeg" alt=""></p><h3 id="generating-self-signed-ssl-certificates-for-custom-domains" tabindex="-1">Generating self-signed SSL Certificates for Custom Domains <a class="header-anchor" href="#generating-self-signed-ssl-certificates-for-custom-domains" aria-hidden="true">#</a></h3><p>Whether you use <code>local.servicestack.com</code> or <code>dev.servicestack.com</code> or your own hostname, you&#39;ll need to create and trust a self-signed certificate to be able to view it in a browser without certificate errors.</p><p>To simplify creation of self-signed certificate for <code>*.servicestack.com</code> you can use the <a href="/mix-tool.html">dotnet mix tool</a> to download the openssl script and running it:</p><div class="language-bash"><pre><code>$ x mix gen-dev-crt.sh
$ <span class="token function">bash</span> gen-dev-crt.sh
</code></pre></div><p>Which will write this script below to your projects HOST project:</p><div class="language-csharp"><pre><code>PASSWORD<span class="token operator">=</span>dev
<span class="token keyword">if</span> <span class="token punctuation">[</span> $# <span class="token operator">-</span>ge <span class="token number">1</span> <span class="token punctuation">]</span>
  <span class="token class-name">then</span>
    PASSWORD<span class="token operator">=</span>$<span class="token number">1</span>
fi

openssl req <span class="token operator">-</span>x509 <span class="token operator">-</span><span class="token keyword">out</span> dev<span class="token punctuation">.</span>crt <span class="token operator">-</span>keyout dev<span class="token punctuation">.</span>key <span class="token operator">-</span>days <span class="token number">825</span> \\
  <span class="token operator">-</span><span class="token class-name">newkey</span> rsa<span class="token punctuation">:</span><span class="token number">2048</span> <span class="token operator">-</span>nodes <span class="token operator">-</span>sha256 \\
  <span class="token operator">-</span>subj &#39;<span class="token operator">/</span>CN<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">.</span>servicestack<span class="token punctuation">.</span>com&#39; <span class="token operator">-</span>extensions EXT <span class="token operator">-</span>config <span class="token operator">&lt;</span><span class="token punctuation">(</span> \\
   printf <span class="token string">&quot;[dn]\\nCN=*.servicestack.com\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:*.servicestack.com\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth&quot;</span><span class="token punctuation">)</span>

openssl pkcs12 <span class="token operator">-</span>export <span class="token operator">-</span><span class="token keyword">out</span> dev<span class="token punctuation">.</span>pfx <span class="token operator">-</span>inkey dev<span class="token punctuation">.</span>key <span class="token operator">-</span><span class="token keyword">in</span> dev<span class="token punctuation">.</span>crt <span class="token operator">-</span><span class="token class-name">password</span> pass<span class="token punctuation">:</span>$PASSWORD
</code></pre></div><p>Which uses OpenSSL to generate a self-signed certificate <code>dev.crt</code>, private key <code>dev.key</code> and a PKCS #12 <code>dev.pfx</code> certificate in macOS, Linux &amp; Windows using WSL.</p><h3 id="trust-self-signed-certificate" tabindex="-1">Trust self-signed certificate <a class="header-anchor" href="#trust-self-signed-certificate" aria-hidden="true">#</a></h3><p>After generating a new self-signed certificate you&#39;ll need to trust it in your OS&#39;s certificate store so it&#39;s recognized &amp; treated as a valid certificate.</p><h4 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-hidden="true">#</a></h4><p>On Windows you can trust certificates by running the powershell command below in <strong>Administrator</strong> mode:</p><div class="language-"><pre><code>Import-Certificate -FilePath dev.crt -CertStoreLocation Cert:\\CurrentUser\\Root
</code></pre></div><p>Where it will import the Certificate into the <a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/system-store-locations#cert_system_store_current_user" target="_blank" rel="noopener noreferrer">Current User Certificate Store</a> which you can view/remove in <strong>regedit.msc</strong> at:</p><div class="language-"><pre><code>Computer\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\
</code></pre></div><h4 id="macos" tabindex="-1">macOS <a class="header-anchor" href="#macos" aria-hidden="true">#</a></h4><p>In macOS you can <a href="https://derflounder.wordpress.com/2011/03/13/adding-new-trusted-root-certificates-to-system-keychain/" target="_blank" rel="noopener noreferrer">add a trusted root certificate to your System.keychain</a> with:</p><div class="language-bash"><pre><code>$ <span class="token function">sudo</span> security add-trusted-cert -d -r trustRoot -k <span class="token string">&quot;/Library/Keychains/System.keychain&quot;</span> dev.crt
</code></pre></div><h4 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-hidden="true">#</a></h4><p>Unfortunately it&#39;s not as cohesive in Linux where different Distro&#39;s &amp; Apps handle it differently, however this existing answer covers <a href="https://unix.stackexchange.com/a/90607/698" target="_blank" rel="noopener noreferrer">installation in Debian/Ubuntu distributions</a>.</p><h3 id="configure-in-net-core" tabindex="-1">Configure in .NET Core <a class="header-anchor" href="#configure-in-net-core" aria-hidden="true">#</a></h3><p>You can configure the .NET Core to use this self-signed certificate during development by specifying the path to <code>dev.pfx</code> and the password used in your <code>appsettings.Development.json</code>:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
  <span class="token property">&quot;Kestrel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;Endpoints&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;Http&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://*:5001&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Protocols&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Http1&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Certificate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;Path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dev.pfx&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;Password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dev&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="accessing-from-browsers" tabindex="-1">Accessing from Browsers <a class="header-anchor" href="#accessing-from-browsers" aria-hidden="true">#</a></h3><p>Now after restarting your browser to reset its SSL caches you&#39;ll be able to use either <code>*.servicestack.com</code> domains to view your local development without SSL Errors:</p><p><img src="https://docs.servicestack.net/images/security/dev-certs.png" alt=""></p><h3 id="accessing-from-c-clients" tabindex="-1">Accessing from C# Clients <a class="header-anchor" href="#accessing-from-c-clients" aria-hidden="true">#</a></h3><p>As .NET has access your OS&#39;s trusted certificates you&#39;ll be able to access the custom domains without additional configuration:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://dev.servicestack.com:5001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//.NET HttpWebRequest</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hello</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://dev.servicestack.com:5001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//.NET HttpClient</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hello</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="accessing-from-native-applications" tabindex="-1">Accessing from Native Applications <a class="header-anchor" href="#accessing-from-native-applications" aria-hidden="true">#</a></h3><p>Something you want to avoid is including your <a href="https://letsencrypt.org/docs/certificates-for-localhost/#for-native-apps-talking-to-web-apps" target="_blank" rel="noopener noreferrer">certificate &amp; private key with your Native application</a> which is considered a compromise of your private key that attackers can use to implement a successful <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack" target="_blank" rel="noopener noreferrer">MitM attack</a>.</p><h3 id="flutter-android" tabindex="-1">Flutter Android <a class="header-anchor" href="#flutter-android" aria-hidden="true">#</a></h3><p>Instead you&#39;ll want to either <a href="https://blog.netspi.com/four-ways-bypass-android-ssl-verification-certificate-pinning/" target="_blank" rel="noopener noreferrer">install the self-signed certificate</a> on your local device/emulator where it wont be trusted by anyone else.</p><p>Otherwise a far easier solution is to ignore SSL certificates when accessing your local dev server which you can do with Dart/Flutter using the <code>HttpClient</code><a href="https://api.flutter.dev/flutter/dart-io/HttpClient/badCertificateCallback.html" target="_blank" rel="noopener noreferrer">badCertificateCallback</a> property:</p><div class="language-dart"><pre><code><span class="token keyword">var</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>badCertificateCallback <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">X509Certificate</span> cert<span class="token punctuation">,</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span> int port<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> host <span class="token operator">==</span> <span class="token string">&#39;dev.servicestack.com&#39;</span> <span class="token operator">&amp;&amp;</span> port <span class="token operator">==</span> <span class="token number">5001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Although ideally you&#39;d use a constant value like <a href="https://api.flutter.dev/flutter/foundation/kDebugMode-constant.html" target="_blank" rel="noopener noreferrer">kDebugMode</a> so that the <code>badCertificateCallback</code> pass-through doesn&#39;t make it into production builds. Here&#39;s an example configuring a <a href="/dart-add-servicestack-reference.html">ServiceStack Dart Service Client</a> to use development or production APIs:</p><div class="language-dart"><pre><code><span class="token keyword">var</span> client <span class="token operator">=</span> kDebugMode
    <span class="token operator">?</span> <span class="token class-name">ClientFactory</span><span class="token punctuation">.</span><span class="token function">createWith</span><span class="token punctuation">(</span><span class="token class-name">ClientOptions</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">:</span><span class="token string">&#39;https://dev.servicestack.com:5001&#39;</span><span class="token punctuation">,</span> ignoreCert<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">:</span> <span class="token class-name">ClientFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;https://prod.app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="removing-certificate-artifacts" tabindex="-1">Removing Certificate Artifacts <a class="header-anchor" href="#removing-certificate-artifacts" aria-hidden="true">#</a></h3><p>If you&#39;re only using Windows you&#39;ll typically only end up using the PKCS #12 <code>dev.pfx</code> certificate combining both certificate &amp; private key which can be safely removed to clear unnecessary generated artifacts &amp; clear-text copy of the private key:</p><div class="language-bash"><pre><code>$ del dev.key
$ del dev.crt
</code></pre></div><p>Where as other OS&#39;s predominantly use Certificates &amp; Private Keys, which if needed can be later extracted from the <code>dev.pfx</code>:</p><h4 id="extract-certificate" tabindex="-1">Extract Certificate <a class="header-anchor" href="#extract-certificate" aria-hidden="true">#</a></h4><div class="language-bash"><pre><code>$ openssl pkcs12 -in dev.pfx -clcerts -nokeys -out dev.crt
</code></pre></div><h4 id="extract-private-key" tabindex="-1">Extract Private Key <a class="header-anchor" href="#extract-private-key" aria-hidden="true">#</a></h4><div class="language-bash"><pre><code>$ openssl pkcs12 -in dev.pfx -nocerts -nodes <span class="token operator">|</span> openssl rsa -out dev.key
</code></pre></div>__VP_STATIC_END__`,86),r=[o];function c(p,i,l,d,u,h){return a(),s("div",null,r)}var g=e(t,[["render",c]]);export{f as __pageData,g as default};
