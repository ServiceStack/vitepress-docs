import{_ as n,c as s,o as a,a as e}from"./app.14440598.js";const g='{"title":"v4.5.10 Release Notes","description":"","frontmatter":{"title":"v4.5.10 Release Notes","slug":"v4-5-10"},"headers":[{"level":2,"title":"Ultimate Angular4, React, Aurelia and Vue.js Templates for ASP.NET!","slug":"ultimate-angular4-react-aurelia-and-vue-js-templates-for-asp-net"},{"level":2,"title":"Webpack-powered Single Page App Templates","slug":"webpack-powered-single-page-app-templates"},{"level":2,"title":"Vue.js Template!","slug":"vue-js-template"},{"level":2,"title":"Quick tour of Webpack","slug":"quick-tour-of-webpack"},{"level":3,"title":"Entry points","slug":"entry-points"},{"level":3,"title":"Output","slug":"output"},{"level":3,"title":"Loaders","slug":"loaders"},{"level":3,"title":"Plugins","slug":"plugins"},{"level":3,"title":"Loading Dependencies","slug":"loading-dependencies"},{"level":3,"title":"Webpack builds","slug":"webpack-builds"},{"level":2,"title":"Development workflow","slug":"development-workflow"},{"level":3,"title":"Webpack watch","slug":"webpack-watch"},{"level":3,"title":"Live reload with Webpack Dev Server","slug":"live-reload-with-webpack-dev-server"},{"level":2,"title":"Single Page App Features","slug":"single-page-app-features"},{"level":3,"title":"Integrated UI framework and Vector Icons","slug":"integrated-ui-framework-and-vector-icons"},{"level":3,"title":"TypeScript and Sass","slug":"typescript-and-sass"},{"level":3,"title":"End-to-end Typed APIs","slug":"end-to-end-typed-apis"},{"level":3,"title":"Routing Enabled, Multi-page Layout","slug":"routing-enabled-multi-page-layout"},{"level":3,"title":"Deep linkable Pretty URLs","slug":"deep-linkable-pretty-urls"},{"level":3,"title":"JavaScript Unit Testing","slug":"javascript-unit-testing"},{"level":3,"title":"Track progress whilst templates are being created","slug":"track-progress-whilst-templates-are-being-created"},{"level":3,"title":"Keep Desktop node and VS.NET in sync","slug":"keep-desktop-node-and-vs-net-in-sync"},{"level":2,"title":"Gistlyn updated","slug":"gistlyn-updated"},{"level":2,"title":"Full support for VS 2017","slug":"full-support-for-vs-2017"},{"level":3,"title":"Breaking Change","slug":"breaking-change"},{"level":2,"title":"Simple command-line utilities for ServiceStack","slug":"simple-command-line-utilities-for-servicestack"},{"level":2,"title":"Installation","slug":"installation"},{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Adding a ServiceStack Reference","slug":"adding-a-servicestack-reference"},{"level":3,"title":"Updating a ServiceStack Reference","slug":"updating-a-servicestack-reference"},{"level":3,"title":"Installing Generic Service Client","slug":"installing-generic-service-client"},{"level":2,"title":"ServiceStack.Text","slug":"servicestack-text"},{"level":3,"title":"Major Memory and Performance Improvements","slug":"major-memory-and-performance-improvements"},{"level":3,"title":"Vulnerability with object Properties","slug":"vulnerability-with-object-properties"},{"level":3,"title":"Fast Reflection APIs","slug":"fast-reflection-apis"},{"level":2,"title":"OrmLite","slug":"ormlite"},{"level":3,"title":"Support for C# 7 Value Tuples","slug":"support-for-c-7-value-tuples"},{"level":3,"title":"Expanded Typed SqlExpresion Surface Area","slug":"expanded-typed-sqlexpresion-surface-area"},{"level":3,"title":"Expanded Join Conditions","slug":"expanded-join-conditions"},{"level":3,"title":"Fail fast","slug":"fail-fast"},{"level":2,"title":"Proxy Feature","slug":"proxy-feature"},{"level":2,"title":"Open API","slug":"open-api"},{"level":2,"title":"Server Events","slug":"server-events"},{"level":3,"title":"EventSubscription","slug":"eventsubscription"},{"level":3,"title":"Autowired Typed Request Filters","slug":"autowired-typed-request-filters"},{"level":2,"title":"HTTP Caching","slug":"http-caching"},{"level":2,"title":"Authentication","slug":"authentication"},{"level":3,"title":"Re-Authentication","slug":"re-authentication"},{"level":3,"title":"API Key Auth Provider","slug":"api-key-auth-provider"},{"level":3,"title":"JWT Tokens","slug":"jwt-tokens"},{"level":2,"title":"Minor Changes","slug":"minor-changes"},{"level":3,"title":"DebugMode","slug":"debugmode"},{"level":2,"title":"WebServiceException","slug":"webserviceexception"},{"level":3,"title":"BasicAppHost","slug":"basicapphost"},{"level":3,"title":"Other Changes","slug":"other-changes"}],"relativePath":"releases/v4.5.10.md","lastUpdated":1634495308438}',t={},p=e(`__VP_STATIC_START__<p>We&#39;re super excited to announce our new Angular4, React, Aurelia and Vue.js Single Page App <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> templates for <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> which have been re-imagined to incorporate the latest gold standard in modern Single Page App development and integrated to provide the ideal development experience within <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>, optimal bundling and packaging for production including one-click Web App deployments using MS Web Deploy.</p><h2 id="ultimate-angular4-react-aurelia-and-vue-js-templates-for-asp-net" tabindex="-1">Ultimate Angular4, React, Aurelia and Vue.js Templates for <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a>! <a class="header-anchor" href="#ultimate-angular4-react-aurelia-and-vue-js-templates-for-asp-net" aria-hidden="true">#</a></h2><p><a href="https://github.com/ServiceStack/ServiceStackVS#install-servicestackvs" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/spa-templates-overview.png" alt=""></a></p><p>All ServiceStack Templates are available from the <a href="https://marketplace.visualstudio.com/items?itemName=Mythz.ServiceStackVS" target="_blank" rel="noopener noreferrer">ServiceStackVS VS.NET Extension</a>:</p><p><a href="https://github.com/ServiceStack/ServiceStackVS#install-servicestackvs" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/ServiceStackVS/master/Images/search_download.png" alt=""></a></p><h2 id="webpack-powered-single-page-app-templates" tabindex="-1">Webpack-powered Single Page App Templates <a class="header-anchor" href="#webpack-powered-single-page-app-templates" aria-hidden="true">#</a></h2><p>Our existing Angular, Aurelia, React and React Desktop Single Page App templates have been rewritten to completely embrace <a href="https://webpack.js.org" target="_blank" rel="noopener noreferrer">Webpack</a> - the most advanced module bundler for JavaScript Apps. Webpack is used to power the development, testing and production builds of your Web App.</p><p><a href="https://webpack.js.org" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/webpack-overview.png" alt=""></a></p><p>Webpack replaces JSPM and now takes care of all packaging and bundling requirements which prior templates used Gulp tasks and JSPM to accomplish. Gulp is still used, primarily to provide a GUI to run the <a href="https://github.com/ServiceStack/Templates/blob/9e5bd421decffda43fcc46f4cf112b3999888e53/src/SinglePageApps/ReactApp/ReactApp/package.json#L5-L13" target="_blank" rel="noopener noreferrer">templates npm scripts</a> in <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>&#39;s Task Runner Explorer so all templates features can be accessed without leaving <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>, or if preferred each npm script can also be run on the command-line with:</p><pre><code>$ npm run {script name}
</code></pre><p>Unlike our earlier use of JSPM which was its own package manager that just handled JavaScript dependencies and builds, Webpack works natively with npm packages and is used to handle <strong>all client assets</strong> which can leverage its <a href="https://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="noopener noreferrer">vast ecosystem</a> of <a href="https://webpack.js.org/concepts/loaders/" target="_blank" rel="noopener noreferrer">loaders</a> and <a href="https://webpack.js.org/concepts/plugins/" target="_blank" rel="noopener noreferrer">plugins</a> to handle every kind of web asset, performing the necessary transformations to transpile it into the native formats browsers understand, loading it in browsers and generating source maps so their original source files can be debugged. The Webpack configuration is customized per build type where the optimal configuration is used in development for faster builds and easier debuggability whilst production builds are optimized for performance, size and cacheability.</p><h2 id="vue-js-template" tabindex="-1">Vue.js Template! <a class="header-anchor" href="#vue-js-template" aria-hidden="true">#</a></h2><p>In addition to converting all existing Single Page App templates to Webpack, we&#39;re excited to include support for the simple and elegant and <a href="https://vuejs.org/" target="_blank" rel="noopener noreferrer">Vue.js</a> framework which is designed from the ground up to be incrementally adoptable where it scales nicely from being able to enhance a page with a splash of JavaScript to developing full-scale Single Page Apps.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/vue/vue-screenshot-splash.png" alt=""></p><p>If you&#39;re not familiar with <a href="https://vuejs.org/" target="_blank" rel="noopener noreferrer">Vue.js</a> yet we highly recommend checking it out as we&#39;ve found it shares a similar integrated and simplicity-focus ethos as ServiceStack, delivers a refreshing progressive approach to App development that&#39;s built on a few simple, but powerful integrated primitives enabling the creation of sophisticated Apps with minimal conceptual and cognitive overhead. <a href="https://vuejs.org/v2/guide/" target="_blank" rel="noopener noreferrer">Vue&#39;s docs</a> are also beautifully written and very approachable where it&#39;s initially aimed at beginners and ramps up in storybook form to more advanced concepts where you&#39;ll become productive in no time.</p><h2 id="quick-tour-of-webpack" tabindex="-1">Quick tour of Webpack <a class="header-anchor" href="#quick-tour-of-webpack" aria-hidden="true">#</a></h2><p>Webpack has been pre-configured in all Single Page App templates to enable a flexible and feature-rich development model whose defaults in <strong>webpack.config.js</strong> will be able to support a large number of Web Apps without modification, leaving you free to focus on developing your App.</p><p>Although as Webpack is the central hub powering each template you&#39;ll still want to become familiar with its <a href="https://webpack.js.org/concepts/" target="_blank" rel="noopener noreferrer">four high-level concepts</a> to understand how it&#39;s new approach to Single Page App development works and how it can handle all your App&#39;s dependencies and resources.</p><p>We&#39;ll quickly touch on each of Webpack&#39;s concepts by seeing how the React App&#39;s <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp/ReactApp/webpack.config.js" target="_blank" rel="noopener noreferrer">webpack.config.js</a> is configured to handle its TypeScript sources, sass/css files and their references.</p><h3 id="entry-points" tabindex="-1"><a href="https://webpack.js.org/concepts/entry-points/" target="_blank" rel="noopener noreferrer">Entry points</a> <a class="header-anchor" href="#entry-points" aria-hidden="true">#</a></h3><p>Webpack builds a graph of your App&#39;s dependencies which it traverses starting from its entry points, this is the input into Webpack where its given the App&#39;s entry point, we also tell Webpack we want to create a separate <strong>vendor</strong> entry point referencing our App&#39;s 3rd party dependencies so their outputs can be configured independently:</p><div class="language-js"><pre><code>entry<span class="token operator">:</span> <span class="token punctuation">{</span>
    app<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;./src/app.tsx&#39;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    vendor<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;es6-shim&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;classnames&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;react-router-dom&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;@servicestack/client&#39;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div><h3 id="output" tabindex="-1"><a href="https://webpack.js.org/concepts/output/" target="_blank" rel="noopener noreferrer">Output</a> <a class="header-anchor" href="#output" aria-hidden="true">#</a></h3><p>On the opposite end of Webpack&#39;s build are its outputs where we tell it where to bundle our App:</p><div class="language-js"><pre><code>output<span class="token operator">:</span> <span class="token punctuation">{</span>
    path<span class="token operator">:</span> isProd <span class="token operator">?</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token string">&#39;wwwroot/dist&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    publicPath<span class="token operator">:</span> <span class="token string">&#39;/dist/&#39;</span><span class="token punctuation">,</span>
    filename<span class="token operator">:</span> isProd <span class="token operator">?</span> <span class="token string">&#39;[name].[chunkhash].bundle.js&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;[name].bundle.js&#39;</span><span class="token punctuation">,</span>
    chunkFilename<span class="token operator">:</span> isProd <span class="token operator">?</span> <span class="token string">&#39;[name].[chunkhash].js&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div><p>Here we can see that our Webpack config supports multiple <a href="https://github.com/ServiceStack/Templates/blob/9e5bd421decffda43fcc46f4cf112b3999888e53/src/SinglePageApps/ReactApp/ReactApp/webpack.config.js#L22-L23" target="_blank" rel="noopener noreferrer">isProd and isDev</a> configurations, <code>isDev</code> is used for development builds where Webpack bundles our website in the <code>/dist</code> folder whilst <code>isProd</code> is used for production builds which is instead bundled in the <code>/wwwroot/dist</code> folder with each <code>.js</code> bundle including a <strong>[chunkhash]</strong> cache-breaker in its filename.</p><blockquote><p>The <code>root()</code> and <code>when()</code> functions used are basic <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp/ReactApp/webpack.config.js#L159-L174" target="_blank" rel="noopener noreferrer">helpers used to simplify webpack configuration</a></p></blockquote><h3 id="loaders" tabindex="-1"><a href="https://webpack.js.org/concepts/loaders/" target="_blank" rel="noopener noreferrer">Loaders</a> <a class="header-anchor" href="#loaders" aria-hidden="true">#</a></h3><p>Loaders are the flexible engine that sets Webpack apart where it&#39;s able to leverage its <a href="https://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="noopener noreferrer">vast ecosystem</a> where there&#39;s a loader for every kind of web asset typically used when developing Web Apps.</p><p>Loaders are configured in the <code>rules</code> section and invoked using node&#39;s <code>require()</code> statement or ES6/TypeScript&#39;s <code>import</code> statement. Rules use the <code>test</code> regex to specify which files they should apply to whilst the <code>loader</code> property tells Webpack which loader to load them with. Each loader is self-contained in a separate npm package that needs to be made available to your project by adding them to your <a href="https://github.com/ServiceStack/Templates/blob/9e5bd421decffda43fcc46f4cf112b3999888e53/src/SinglePageApps/ReactApp/ReactApp/package.json#L43" target="_blank" rel="noopener noreferrer">package.json devDependencies</a>.</p><p>Lets checkout React&#39;s loader configuration for a typical example:</p><div class="language-js"><pre><code><span class="token keyword">var</span> postcssLoader <span class="token operator">=</span> <span class="token punctuation">{</span>
    loader<span class="token operator">:</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
    options<span class="token operator">:</span> <span class="token punctuation">{</span> plugins<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;precss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;autoprefixer&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
rules<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        loader<span class="token operator">:</span> <span class="token string">&#39;awesome-typescript-loader&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        loader<span class="token operator">:</span> <span class="token string">&#39;html-loader&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        enforce<span class="token operator">:</span> <span class="token string">&quot;pre&quot;</span><span class="token punctuation">,</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> 
        loader<span class="token operator">:</span> <span class="token string">&quot;source-map-loader&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpe?g|gif|png|ico|svg|wav|mp3)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        loader<span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isProd 
            <span class="token operator">?</span> <span class="token string">&#39;?hash=sha512&amp;digest=hex&amp;name=img/[name].[hash].[ext]&#39;</span> 
            <span class="token operator">:</span> <span class="token string">&#39;?name=img/[name].[ext]&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(eot|ttf|woff|woff2)(\\?v=\\d+\\.\\d+\\.\\d+)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        loader<span class="token operator">:</span> isProd 
            <span class="token operator">?</span> <span class="token string">&#39;url-loader?limit=10000&amp;name=img/[name].[hash].[ext]&#39;</span> 
            <span class="token operator">:</span> <span class="token string">&#39;file-loader?name=img/[name].[ext]&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">when</span><span class="token punctuation">(</span>isDev<span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            use<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> postcssLoader <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(sass|scss)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            use<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> postcssLoader<span class="token punctuation">,</span> <span class="token string">&#39;sass-loader&#39;</span> <span class="token punctuation">]</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span>            
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">when</span><span class="token punctuation">(</span>isProd<span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            loader<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                fallback<span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
                use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;css-loader?minimize&#39;</span><span class="token punctuation">,</span> postcssLoader<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(sass|scss)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            loader<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                fallback<span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
                use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;css-loader?minimize&#39;</span><span class="token punctuation">,</span> postcssLoader<span class="token punctuation">,</span> <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre></div><p>This configuration instructs Webpack to load any <code>.ts</code> or <code>.tsx</code> files using the <a href="https://github.com/s-panferov/awesome-typescript-loader" target="_blank" rel="noopener noreferrer">awesome-typescript-loader</a> which is then responsible for compiling the source files with TypeScript&#39;s compiler.</p><p>Loaders are also chainable as seen in the <code>.css</code> and <code>.scss</code> rules which starts from right-to-left where the output of the rightmost loader is passed into the next loader on its left and so on.</p><div class="language-js"><pre><code><span class="token punctuation">{</span>
    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    use<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> postcssLoader <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div><p>For React App the <code>.css</code> contents are first processed with <a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener noreferrer">postcssLoader</a> which uses <a href="https://github.com/jonathantneal/precss" target="_blank" rel="noopener noreferrer">precss</a> to let you use basic sass-like features in vanilla <code>.css</code> files and <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener noreferrer">autoprefixer</a> which lets you write clean standard css rules like:</p><div class="language-css"><pre><code><span class="token selector">a</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which autoprefixer will expand to include vendor prefixes, maximizing support for older browser versions:</p><div class="language-css"><pre><code><span class="token selector">a</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> -ms-flexbox<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex
<span class="token punctuation">}</span>
</code></pre></div><p>The output of <code>postcssLoader</code> then gets passed into <a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="noopener noreferrer">css-loader</a> which processes any css <code>@import()</code> and <code>@url()</code> rules and loads them with Webpack&#39;s <code>require()</code> to ensure its references are also processed by Webpack.</p><p>The output of <code>css-loader</code> then gets passed into <a href="https://github.com/webpack-contrib/style-loader" target="_blank" rel="noopener noreferrer">style-loader</a> who injects the resulting css fragments within <code>&lt;style&gt;&lt;/style&gt;</code> tags in the browser&#39;s DOM which is how Web App styles in development builds are still visible despite their being no <code>.css</code> files written. <a href="http://sass-lang.com/" target="_blank" rel="noopener noreferrer">Sass</a> <code>.scss</code> files are handled similarly to <code>.css</code> files except they&#39;re initially loaded with <a href="https://github.com/webpack-contrib/sass-loader" target="_blank" rel="noopener noreferrer">sass-loader</a> which converts them into <code>.css</code>. Both these rules together let you use your preferred choice of <code>.scss</code> or <code>.css</code> files to style your Web App.</p><p>There&#39;s a separate configuration needed for Production builds which is configured to minify the css and write their contents out into separate <code>.css</code> bundles as defined in the plugins section below:</p><h3 id="plugins" tabindex="-1"><a href="https://webpack.js.org/concepts/plugins/" target="_blank" rel="noopener noreferrer">Plugins</a> <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h3><p>Loaders only loads and transforms files on a <strong>per-file</strong> basis, anything more advanced requires using plugins. In this template plugins are used to:</p><ol><li>Set type of Webpack build so other loaders/plugins can optimize accordingly</li><li>Deletes the output folder</li><li>Exports common dependencies into a <strong>vendor</strong> <code>bundle.js</code></li><li>Generate the WebApps <code>index.html</code>, based on <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp/ReactApp/index.template.ejs" target="_blank" rel="noopener noreferrer">index.template.ejs</a> and compiled with <a href="https://lodash.com/docs/4.17.4#template" target="_blank" rel="noopener noreferrer">lodash template</a>, which also takes care of injecting any <code>.css</code> and <code>.js</code> output bundle references</li></ol><div class="language-js"><pre><code>plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string">&#39;process.<wbr>env&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;NODE_ENV&#39;</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>isProd <span class="token operator">?</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Clean</span><span class="token punctuation">(</span><span class="token punctuation">[</span>isProd <span class="token operator">?</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token string">&#39;wwwroot/*&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;vendor&#39;</span><span class="token punctuation">,</span>
        filename<span class="token operator">:</span> isProd <span class="token operator">?</span> <span class="token string">&#39;vendor.[chunkhash].bundle.js&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;vendor.bundle.js&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">&#39;index.template.ejs&#39;</span><span class="token punctuation">,</span>
        filename<span class="token operator">:</span> <span class="token string">&#39;../index.html&#39;</span><span class="token punctuation">,</span>
        inject<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">when</span><span class="token punctuation">(</span>isProd<span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filename<span class="token operator">:</span> <span class="token string">&#39;[name].[chunkhash].css&#39;</span><span class="token punctuation">,</span> allChunks<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            
        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sourceMap<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token constant">COPY_FILES</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>In production builds, <code>.css</code> files are written using <a href="https://github.com/webpack-contrib/extract-text-webpack-plugin" target="_blank" rel="noopener noreferrer">ExtractTextPlugin</a> and the resulting <code>.js</code> files minified with UglifyJS. The <a href="https://github.com/kevlened/copy-webpack-plugin" target="_blank" rel="noopener noreferrer">CopyWebpackPlugin</a> is then used to copy the <a href="https://github.com/ServiceStack/Templates/blob/9e5bd421decffda43fcc46f4cf112b3999888e53/src/SinglePageApps/ReactApp/ReactApp/webpack.config.js#L3-L14" target="_blank" rel="noopener noreferrer">.NET Web Apps Server assets and binaries</a>, completing the full production build of the WebApp in <code>/wwwroot</code> that&#39;s all ready to be deployed to any <a href="https://www.iis.net/downloads/microsoft/web-deploy" target="_blank" rel="noopener noreferrer">MS WebDeploy</a> enabled Server using the <code>03-deploy-app</code> Gulp task.</p><h3 id="loading-dependencies" tabindex="-1">Loading Dependencies <a class="header-anchor" href="#loading-dependencies" aria-hidden="true">#</a></h3><p>Now that we&#39;ve covered how Webpack is configured, the next step is showing how to make use of it, by loading your App&#39;s resources using node&#39;s <code>require()</code> or TypeScript&#39;s <code>import</code> statement.</p><p>This can be seen in the App&#39;s <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp/ReactApp/src/app.tsx" target="_blank" rel="noopener noreferrer">app.tsx</a> starting point where it imports <strong>bootstrap.css</strong> and <strong>font-awesome.css</strong> directly from the installed <strong>bootstrap</strong> and <strong>font-awesome</strong> npm packages as well as a local <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp/ReactApp/src/app.scss" target="_blank" rel="noopener noreferrer">./app.scss</a> SASS file which lives side-by-side next to TypeScript source files:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;bootstrap/dist/css/bootstrap.css&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;font-awesome/css/font-awesome.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./app.scss&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">import</span> <span class="token string">&quot;es6-shim&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;./home/Home&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> View1 <span class="token keyword">from</span> <span class="token string">&#39;./view1/View&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> View2 <span class="token keyword">from</span> <span class="token string">&#39;./view2/View&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>Importing <strong>bootstrap</strong> and <strong>font-awesome</strong> also imports their references, including any images, fonts, svg and other .css files. These are all transparently added to the webpack build and bundled with the rest of your app.</p><p>In production builds the <code>file-loader</code> copies their references to the output folder, embedding its <code>sha512</code> hash in each file name. <code>url-loader</code> works similarly but also has the option of embedding file contents below the configured <strong>10000</strong> byte limit inline inside a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank" rel="noopener noreferrer">Data URI</a> to reduce network requests in production builds.</p><div class="language-js"><pre><code><span class="token punctuation">{</span>
    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpe?g|gif|png|ico|svg|wav|mp3)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
    loader<span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isProd 
        <span class="token operator">?</span> <span class="token string">&#39;?hash=sha512&amp;digest=hex&amp;name=img/[name].[hash].[ext]&#39;</span> 
        <span class="token operator">:</span> <span class="token string">&#39;?name=img/[name].[ext]&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(eot|ttf|woff|woff2)(\\?v=\\d+\\.\\d+\\.\\d+)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    loader<span class="token operator">:</span> isProd 
        <span class="token operator">?</span> <span class="token string">&#39;url-loader?limit=10000&amp;name=img/[name].[hash].[ext]&#39;</span> 
        <span class="token operator">:</span> <span class="token string">&#39;file-loader?name=img/[name].[ext]&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div><p><code>require()</code> can also be used to load resources in other files which is how images can be imported in the <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/Angular4App/Angular4App/index.template.ejs" target="_blank" rel="noopener noreferrer">index.template.ejs</a> home page template:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shortcut icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;%=require(<span class="token punctuation">&#39;</span>./src/assets/img/favicon.png<span class="token punctuation">&#39;</span>)%&gt;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Or inside <a href="https://github.com/ServiceStack/Templates/blob/9e5bd421decffda43fcc46f4cf112b3999888e53/src/SinglePageApps/Angular4App/Angular4App/src/app.component.ts#L32" target="_blank" rel="noopener noreferrer">App components</a>, both of which returns the image url after it has been processed by Webpack&#39;s loaders, e.g:</p><div class="language-csharp"><pre><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>logoUrl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./assets/img/logo.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In production builds this returns a relative url to the output image, e.g: <code>img/logo.36166adfacf0c8cc11d493f2161164fd.png</code>.</p><h3 id="webpack-builds" tabindex="-1">Webpack builds <a class="header-anchor" href="#webpack-builds" aria-hidden="true">#</a></h3><p>By importing all your WebApp resources into Webpack it&#39;s able to maintain a knowledgeable graph of all your Web Apps dependencies where it lets you define how they&#39;re handled at a macro level making it easy to incorporate design-time features like TypeScript and Sass whilst also taking care of generating optimal builds for development, testing and production.</p><h4 id="development-builds" tabindex="-1">Development builds <a class="header-anchor" href="#development-builds" aria-hidden="true">#</a></h4><p>You&#39;ll use development builds when developing your app locally which you can run with either the <code>webpack-build</code> Gulp task in <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>&#39;s Task Runner Explorer GUI or by running the <code>build</code> npm script on the command-line:</p><pre><code>$ npm run build
</code></pre><p>This will generate your App in the <a href="https://github.com/ServiceStack/Templates/tree/master/src/SinglePageApps/ReactApp/ReactApp/dist" target="_blank" rel="noopener noreferrer">/dist</a> folder similar to:</p><pre><code>/dist
    /img
        logo.png
        fontawesome-webfont.ttf
        ...
    app.bundle.js
    vendor.bundle.js
index.html
</code></pre><p>The lack of <code>.css</code> files or source-maps are due to being embedded in the <code>.js</code> bundles and injected in the browser&#39;s DOM within <code>&lt;style&gt;&lt;/style&gt;</code> tags.</p><p>After the Webpack development build has completed you can just run or refresh your <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web App to view the latest changes.</p><h4 id="production-builds" tabindex="-1">Production builds <a class="header-anchor" href="#production-builds" aria-hidden="true">#</a></h4><p>When your App is ready to deploy you can run a production build using the <code>webpack-build-prod</code> Gulp task or the <code>build-prod</code> npm script:</p><pre><code>$ npm run build-prod
</code></pre><p>This will bundle and generate your WebApp in the <strong>/wwwroot/dist</strong> folder with css and source maps extracted and written into separate files, css and js minified and all assets emitted with cache-breaking hashes, similar to:</p><pre><code>/wwwroot
    /dist
        /img
            logo.36166adfacf0c8cc11d493f2161164fd.png
            fontawesome-webfont.b06871f281fee6b241d60582ae9369b9.ttf
            ...
        app.0f14847405ac6f9ebc18.bundle.js
        app.0f14847405ac6f9ebc18.bundle.js.map
        app.0f14847405ac6f9ebc18.css
        app.0f14847405ac6f9ebc18.css.map
        vendor.dca56d88046f8443277c.bundle.js
        vendor.dca56d88046f8443277c.bundle.js.map
    index.html
</code></pre><h2 id="development-workflow" tabindex="-1">Development workflow <a class="header-anchor" href="#development-workflow" aria-hidden="true">#</a></h2><p>Executing a development build of Webpack is all that&#39;s required to be able to see our changes but it can take a while to run a full dev build which negatively impacts our fast iterative dev workflow. It&#39;s instead recommended to leave webpack running in the background and have it watch for changes so it only needs to rebuild assets that have changed, which it&#39;s able to do very quickly.</p><p>The <code>00-webpack-dev</code> and <code>00-webpack-watch</code> gulp tasks facilitate the 2 popular development modes for running webpack during development:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/gulp-tasks.png" alt=""></p><h3 id="webpack-watch" tabindex="-1">Webpack watch <a class="header-anchor" href="#webpack-watch" aria-hidden="true">#</a></h3><p>Our recommendation is to run the <code>00-webpack-watch</code> Gulp task and leave it running in the background, or if preferred, run the <strong>watch</strong> npm script on the command-line with:</p><pre><code>$ npm run watch
</code></pre><p>Webpack <strong>watch</strong> works as you&#39;d expect where it initially generates a full development build of your Web App then stays running in the background to process files as they&#39;re changed. This enables the normal dev workflow of running your <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web App from <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>, saving changes locally then hitting <strong>F5</strong> to refresh the page and view them.</p><p>Each change updates the output dev resources so even if you stop the <strong>watch</strong> task your Web App remains in a working state that&#39;s viewable when running the <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web App.</p><h3 id="live-reload-with-webpack-dev-server" tabindex="-1">Live reload with Webpack Dev Server <a class="header-anchor" href="#live-reload-with-webpack-dev-server" aria-hidden="true">#</a></h3><p>The alternative dev workflow is to run the <code>00-webpack-dev</code> Gulp task to run the <a href="https://webpack.js.org/configuration/dev-server/#devserver" target="_blank" rel="noopener noreferrer">Webpack dev server</a>, or you can run it from the command-line with:</p><pre><code>$ npm run dev
</code></pre><p>This launches the Webpack dev server listening at <code>http://localhost:3000/</code> and configured to proxy all non-Webpack HTTP requests to the <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web App where it handles all Server API requests. The benefit of viewing your App through the Webpack dev server is its built-in Live Reload feature where it will automatically reload the page as resources are updated. We&#39;ve found the Webpack dev server ideal when developing UI&#39;s where your Web App is running side-by-side <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>, where every change saved triggers the dev server to reload the current page so changes are visible immediately.</p><p>The disadvantage of the dev server is that all transformations are kept in memory so when the dev server is stopped, the Web Apps resources are lost, so it requires a <code>webpack-build</code> in order to generate a current build. There&#39;s also a slight lag in API requests resulting from each server request being handled by both Webpack&#39;s Dev Server and <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a>&#39;s IIS Express.</p><h2 id="single-page-app-features" tabindex="-1">Single Page App Features <a class="header-anchor" href="#single-page-app-features" aria-hidden="true">#</a></h2><p>Our goals with the Single Page Templates is to provide a highly productive base that&#39;s ideal for developing small to medium-sized JavaScript Web Apps including just the core essentials that pack the most productive punch whilst adding minimal complexity and required configuration, whilst still remaining open-ended to easily plug-in other tools into your Webpack configuration you believe will improve your development workflow.</p><p>With these goals in mind we&#39;ve hand-picked and integrated a number of simple best-of-breed technologies so you&#39;ll be immediately productive:</p><h3 id="integrated-ui-framework-and-vector-icons" tabindex="-1">Integrated UI framework and Vector Icons <a class="header-anchor" href="#integrated-ui-framework-and-vector-icons" aria-hidden="true">#</a></h3><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/bootstrap-fontawesome-material.png" alt=""></p><p>React, Vue and Aurelia are pre-configured with <a href="https://v4-alpha.getbootstrap.com/" target="_blank" rel="noopener noreferrer">Bootstrap v4</a> and <a href="http://fontawesome.io/icons/" target="_blank" rel="noopener noreferrer">font-awesome vector font icons</a> whilst Angular 4 is preconfigured to use <a href="https://getmdl.io/" target="_blank" rel="noopener noreferrer">Material Design Lite</a> and <a href="https://material.io/icons/" target="_blank" rel="noopener noreferrer">Material Design Icons</a> which are the more natural choice for Angular Apps where they&#39;re all developed and maintained by Google.</p><h3 id="typescript-and-sass" tabindex="-1">TypeScript and Sass <a class="header-anchor" href="#typescript-and-sass" aria-hidden="true">#</a></h3><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/sass-ts.png" alt=""></p><p>All templates are configured with TypeScript which we believe provides the greatest value in enabling a highly-productive and maintainable code-base. TypeScript lets you utilize the latest ES6/7 features including terse ES6 modules and async/await support whilst being able to target down-level browsers. Other benefits include better documented typed APIs, instant compiler feedback, rich intellisense and refactoring support in a graceful superset of JavaScript that scales well to be able develop prototypes quickly then easily go back to harden existing code-bases with optional Type information, catching common errors at compile-time whilst annotating modules with valuable documentation other developers can benefit from.</p><p>Whilst CSS is a powerful language for styling Web Apps it lacks many of the DRY and reuse features we take for granted in a general purpose programming language. <a href="http://sass-lang.com/" target="_blank" rel="noopener noreferrer">SASS</a> is designed to close that gap with a number of useful extensions to CSS aimed at enabling a highly-maintainable, modular and configurable css code-base. If you prefer to avoid learning SASS you can continue using vanilla css which has been enhanced with <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener noreferrer">autoprefixer</a> and <a href="https://github.com/jonathantneal/precss" target="_blank" rel="noopener noreferrer">precss</a> support.</p><h3 id="end-to-end-typed-apis" tabindex="-1">End-to-end Typed APIs <a class="header-anchor" href="#end-to-end-typed-apis" aria-hidden="true">#</a></h3><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/servicestack-ts.png" alt=""></p><p>ServiceStack is seamlessly <a href="/typescript-add-servicestack-reference.html">integrated with TypeScript</a> where all templates are pre-configured to use the Server&#39;s TypeScript DTOs and <a href="https://github.com/ServiceStack/servicestack-client" target="_blank" rel="noopener noreferrer">@servicestack/client</a> generic <code>JsonServiceClient</code> to make the <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp/ReactApp/src/home/Hello.tsx" target="_blank" rel="noopener noreferrer">Typed API request below</a> which displays a Welcome message on each key-press:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../shared&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../dtos&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">async</span> <span class="token function">nameChanged</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> result<span class="token operator">:</span> r<span class="token punctuation">.</span>result <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> result<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The imported <code>client</code> is an instance of <code>JsonServiceClient</code> declared in <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp/ReactApp/src/shared.tsx" target="_blank" rel="noopener noreferrer">shared.ts</a> module, configured with the BaseUrl at <code>/</code>:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>BaseUrl <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>global.BaseUrl</code> is defined in <a href="https://github.com/ServiceStack/Templates/blob/9e5bd421decffda43fcc46f4cf112b3999888e53/src/SinglePageApps/ReactApp/ReactApp/package.json#L17" target="_blank" rel="noopener noreferrer">package.json</a> and injected by <a href="https://facebook.github.io/jest/" target="_blank" rel="noopener noreferrer">Jest</a> in order to be able to run end-to-end Integration tests.</p><h4 id="updating-server-typescript-dtos" tabindex="-1">Updating Server TypeScript DTOs <a class="header-anchor" href="#updating-server-typescript-dtos" aria-hidden="true">#</a></h4><p>To get the latest Server DTOs, build the <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web App then either right-click on <code>dtos.ts</code> and select <strong>Update ServiceStack Reference</strong> from the Context Menu:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/servicestack-reference/typescript-update-reference.png" alt=""></p><p>Or alternatively you can run the <code>update-dtos</code> Gulp task in Task Runner Explorer GUI, or if preferred, run the script on the command-line with:</p><pre><code>$ npm run typescript-ref
</code></pre><h3 id="routing-enabled-multi-page-layout" tabindex="-1">Routing Enabled, Multi-page Layout <a class="header-anchor" href="#routing-enabled-multi-page-layout" aria-hidden="true">#</a></h3><p>All templates have multiple views with Routing enabled so they&#39;re all setup to develop multi-page navigable Single Page Apps out-of-the-gate. All templates are designed to be functionally equivalent utilizing a 3 page tabbed layout but implemented using their own idiomatic style so you&#39;ll be able to easily inspect and compare the structure and ergonomics of each JavaScript framework to evaluate the one you like best.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/routing-overview.png" alt=""></p><h3 id="deep-linkable-pretty-urls" tabindex="-1">Deep linkable Pretty URLs <a class="header-anchor" href="#deep-linkable-pretty-urls" aria-hidden="true">#</a></h3><p>All Single Page Apps are configured to use Pretty URLs (i.e. without <code>#!</code>) and are deep-linkable so they behave similarly to server-generated websites in that they support the back button and full-page reloads to refresh the current page. This works behind the scenes using a <code>[FallbackRoute]</code> to have all unknown routes return the home page so the route can be handled on the client to load the appropriate view.</p><h3 id="javascript-unit-testing" tabindex="-1">JavaScript Unit Testing <a class="header-anchor" href="#javascript-unit-testing" aria-hidden="true">#</a></h3><p>Aurelia, React and React Desktop Apps are configured to use <a href="https://facebook.github.io/jest/" target="_blank" rel="noopener noreferrer">Facebook&#39;s Jest Testing Framework</a> with the React Templates configured to use <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener noreferrer">AirBnb&#39;s enzyme virtual React DOM</a> to enable fast, browser-less tests and includes a few different examples of client/server integration tests.</p><p>Angular4 and Vue are configured to use the <a href="https://karma-runner.github.io/1.0/index.html" target="_blank" rel="noopener noreferrer">Karma test runner</a> with the headless phantomjs WebKit browser so the behavior of Components are tested in a real browser.</p><p>Tests can be run with the <code>tests-run</code> gulp task, or on the command-line using any of npm&#39;s testing conventions:</p><pre><code>$ npm test
$ npm t
</code></pre><h4 id="live-testing" tabindex="-1">Live Testing <a class="header-anchor" href="#live-testing" aria-hidden="true">#</a></h4><p>Each template also includes support for Live Testing which can be run in the background by clicking the <code>tests-watch</code> Gulp task or on the command-line with:</p><pre><code>$ npm run test-watch
</code></pre><p>Live testing automatically re-runs JavaScript tests after each change to provide instant feedback to detect when changes causes existing tests to fail.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/gulp-tests-watch.png" alt=""></p><h4 id="test-coverage" tabindex="-1">Test Coverage <a class="header-anchor" href="#test-coverage" aria-hidden="true">#</a></h4><p>Angular4, Aurelia and React are also pre-configured to be able to show test coverage, viewable by running the <code>tests-coverage</code> Gulp task or on the command-line with:</p><pre><code>$ npm run test-coverage
</code></pre><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/gulp-tests-coverage.png" alt=""></p><h4 id="single-click-deployments" tabindex="-1">Single Click Deployments <a class="header-anchor" href="#single-click-deployments" aria-hidden="true">#</a></h4><p>All templates continue to include our one-click deploy functionality by running the <code>package-and-deploy</code> Gulp task which will perform a full <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> server release build and Webpack client production build then runs MS WebDeploy to package and deploy the bundled App to the remote server configured in <code>wwwroot_build/publish/config.json</code>. If you already have a production build you wish to deploy you can run <code>03-deploy-app</code> Gulp task instead to just perform the MS WebDeploy step.</p><blockquote><p>publish/config.json</p></blockquote><div class="language-json"><pre><code><span class="token punctuation">{</span>
    <span class="token property">&quot;iisApp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SiteName&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;serverAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;remote.server.org&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;userName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{WebDeployUserName}&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;{WebDeployPassword}&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="multi-project-solution-layout" tabindex="-1">Multi-Project Solution Layout <a class="header-anchor" href="#multi-project-solution-layout" aria-hidden="true">#</a></h4><p>All templates follow our <a href="/physical-project-structure.html">Recommended Physical Project Structure</a> ensuring ServiceStack projects starts off from an optimal logical project layout, laying the foundation for growing into a more maintainable, cohesive and reusable code-base.</p><h3 id="track-progress-whilst-templates-are-being-created" tabindex="-1">Track progress whilst templates are being created <a class="header-anchor" href="#track-progress-whilst-templates-are-being-created" aria-hidden="true">#</a></h3><p>The Single Page App templates sources their client dependencies from npm which can take up to few minutes to finish downloading and installing. You&#39;ll be able to see its progress by looking at the <strong>Bower/npm</strong> Output Window in <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/npm-progress.png" alt=""></p><p>You&#39;ll be able to detect when it&#39;s finished by waiting for the original contents of <strong>index.html</strong>:</p><div class="language-html"><pre><code><span class="token comment">&lt;!-- auto-generated by webpack --&gt;</span>
</code></pre></div><p>to be replaced with a <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp/ReactApp/index.html" target="_blank" rel="noopener noreferrer">Webpack generated html template</a>.</p><h3 id="keep-desktop-node-and-vs-net-in-sync" tabindex="-1">Keep Desktop node and <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> in sync <a class="header-anchor" href="#keep-desktop-node-and-vs-net-in-sync" aria-hidden="true">#</a></h3><p>Unfortunately <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> 2017 ships with an outdated version of <strong>node.exe</strong> which can be problematic when trying to run scripts from the command-line with a locally installed version of node as native module packages like <strong>node-sass</strong> are coupled to the specific node version and platform they were installed with. This can easily be resolved by configuring <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> to use your Desktop version of node instead by adding its the <strong>C:\\Program Files\\nodejs</strong> folder as the first path in:</p><blockquote><p>Tools &gt; Options &gt; Projects and Solutions &gt; External Web Tools</p></blockquote><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/node-external-tools.png" alt=""></p><h2 id="gistlyn-updated" tabindex="-1">Gistlyn updated <a class="header-anchor" href="#gistlyn-updated" aria-hidden="true">#</a></h2><p>We&#39;ve upgraded Gistlyn to use the new Webpack-powered React Desktop Apps template which was fairly easy to migrate as it just needed copying the new template assets across and removing the JSPM and typings dependencies. The only TypeScript source code that needed updating was importing Gistlyn&#39;s css assets in <a href="https://github.com/ServiceStack/Gistlyn/blob/e4aed15c91ea8224733709daf53df796b1ee6f07/src/Gistlyn/src/main.tsx#L1-L9" target="_blank" rel="noopener noreferrer">main.tsx</a> and change its <a href="https://github.com/ServiceStack/Gistlyn/blob/e4aed15c91ea8224733709daf53df796b1ee6f07/src/Gistlyn/src/app.tsx#L626-L654" target="_blank" rel="noopener noreferrer">JSX views</a> to reference images using Webpack&#39;s <code>require()</code>.</p><p>A nice benefit from migrating to the new templates is that our source folders remain clean and are no longer populated with generated <code>.js</code> and source maps that were previously generated next to their original <code>.ts</code>, the interim individual files are no longer necessary as they&#39;re instead just bundled in Webpack&#39;s output folder.</p><p><a href="https://github.com/ServiceStack/Gistlyn" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/gistlyn/home-screenshot.png" alt=""></a></p><blockquote><p>The React Desktop Templates aren&#39;t configured to use cache-breaker hashes in their production output file names so the Embedded Resources project used by the different Desktop App projects retain predictable names for each asset.</p></blockquote><h2 id="full-support-for-vs-2017" tabindex="-1">Full support for VS 2017 <a class="header-anchor" href="#full-support-for-vs-2017" aria-hidden="true">#</a></h2><p>We&#39;ve added complete support for <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> 2017 with the <a href="https://github.com/ServiceStack/ServiceStackVS" target="_blank" rel="noopener noreferrer">ServiceStackVS</a> <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> Extension and have migrated all ServiceStack code-bases for all of <a href="https://www.nuget.org/profiles/servicestack" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s NuGet packages</a> to VS2017&#39;s new MSBuild format which is now being used to generate the different .NET 4.5 and .NET Standard platform builds used in all .NET Core packages including our multi-target Test projects.</p><h3 id="breaking-change" tabindex="-1">Breaking Change <a class="header-anchor" href="#breaking-change" aria-hidden="true">#</a></h3><p>The only package we couldn&#39;t bring across into VS2017&#39;s new MSBuild format was <a href="https://www.nuget.org/packages/ServiceStack.OrmLite.Sqlite.Mono" target="_blank" rel="noopener noreferrer">ServiceStack.OrmLite.Sqlite.Mono</a> which referenced the native <code>sqlite3.dll</code> directly. This has been replaced with the new <a href="https://www.nuget.org/packages/ServiceStack.OrmLite.Sqlite" target="_blank" rel="noopener noreferrer">ServiceStack.OrmLite.Sqlite</a> NuGet package which replaces both <strong>Sqlite.Mono</strong> and <strong>Sqlite.Windows</strong> packages and can be installed with:</p><pre><code>PM&gt; Install-Package ServiceStack.OrmLite.Sqlite
</code></pre><p>Or if using .NET Core / .NET Standard:</p><pre><code>PM&gt; Install-Package ServiceStack.OrmLite.Sqlite.Core
</code></pre><h2 id="simple-command-line-utilities-for-servicestack" tabindex="-1">Simple command-line utilities for ServiceStack <a class="header-anchor" href="#simple-command-line-utilities-for-servicestack" aria-hidden="true">#</a></h2><p>The new <a href="https://github.com/ServiceStack/servicestack-cli" target="_blank" rel="noopener noreferrer">servicestack-cli</a> npm package replaces our existing <code>ss-util.exe</code> and OSX <code>swiftref</code> command-line programs to provide simple command-line utilities to easily Add and Update ServiceStack References for all of ServiceStack&#39;s 7 supported languages.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h2><p>Prerequisites: Node.js (&gt;=4.x, 6.x preferred), npm version 3+.</p><pre><code>$ npm install -g servicestack-cli
</code></pre><p>This will make the following utilities available from your command-line which will let you download the Server DTO classes for a remote ServiceStack endpoint in your chosen language which you can use with ServiceStack&#39;s generic Service clients to facilitate end-to-end API requests.</p><table><thead><tr><th>Script</th><th>Alias</th><th>Language</th></tr></thead><tbody><tr><td>csharp-ref</td><td>cs-ref</td><td>C#</td></tr><tr><td>typescript-ref</td><td>ts-ref</td><td>TypeScript</td></tr><tr><td>typescriptd-ref</td><td>tsd-ref</td><td>TypeScript Declarations</td></tr><tr><td>swift-ref</td><td></td><td>Swift</td></tr><tr><td>java-ref</td><td></td><td>Java</td></tr><tr><td>kotlin-ref</td><td>kt-ref</td><td>Kotlin</td></tr><tr><td>vbnet-ref</td><td>vb-ref</td><td><a href="http://VB.NET" target="_blank" rel="noopener noreferrer">VB.NET</a></td></tr><tr><td>fsharp-ref</td><td>fs-ref</td><td>F#</td></tr></tbody></table><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>Once installed you can easily download a Server&#39;s Typed DTOs by using the script for the language you want with the <strong>BaseUrl</strong> of the remote ServiceStack Instance, e.g. These commands below downloads <a href="http://techstacks.io" target="_blank" rel="noopener noreferrer">TechStacks</a> Typed Server DTOs in each available language:</p><pre><code>$ csharp-ref http://techstacks.io
$ typescript-ref http://techstacks.io
$ tsd-ref http://techstacks.io
$ swift-ref http://techstacks.io
$ java-ref http://techstacks.io
$ kotlin-ref http://techstacks.io
$ vbnet-ref http://techstacks.io
$ fsharp-ref http://techstacks.io
</code></pre><p>We&#39;ll continue using TypeScript below to inspect the other cli features:</p><h3 id="adding-a-servicestack-reference" tabindex="-1">Adding a ServiceStack Reference <a class="header-anchor" href="#adding-a-servicestack-reference" aria-hidden="true">#</a></h3><p>To Add a TypeScript ServiceStack Reference just call <code>typescript-ref</code> with the URL of a remote ServiceStack instance:</p><pre><code>$ typescript-ref http://techstacks.io
</code></pre><p>Result:</p><pre><code>Saved to: techstacks.dtos.ts
</code></pre><p>Calling <code>typescript-ref</code> with just a URL will save the DTOs using the Hostname, you can override this by specifying a FileName as the 2nd argument:</p><pre><code>$ typescript-ref http://techstacks.io Tech
</code></pre><p>Result:</p><pre><code>Saved to: Tech.dtos.ts
</code></pre><h3 id="updating-a-servicestack-reference" tabindex="-1">Updating a ServiceStack Reference <a class="header-anchor" href="#updating-a-servicestack-reference" aria-hidden="true">#</a></h3><p>To Update an existing ServiceStack Reference, call <code>typescript-ref</code> with the Filename:</p><pre><code>$ typescript-ref techstacks.dtos.ts
</code></pre><p>Result:</p><pre><code>Updated: techstacks.dtos.ts
</code></pre><p>Which will update the File with the latest TypeScript Server DTOs from <a href="https://techstacks.io" target="_blank" rel="noopener noreferrer">techstacks.io</a>. You can also customize how DTOs are generated by uncommenting the <a href="/typescript-add-servicestack-reference.html#dto-customization-options">TypeScript DTO Customization Options</a> and updating them again.</p><h4 id="updating-all-typescript-dtos" tabindex="-1">Updating all TypeScript DTOs <a class="header-anchor" href="#updating-all-typescript-dtos" aria-hidden="true">#</a></h4><p>Calling <code>typescript-ref</code> without any arguments will update all TypeScript DTOs in the current directory:</p><pre><code>$ typescript-ref
</code></pre><p>Result:</p><pre><code>Updated: Tech.dtos.ts
Updated: techstacks.dtos.ts
</code></pre><p>To make it more wrist-friendly you can also use the shorter <code>ts-ref</code> alias instead of <code>typescript-ref</code>.</p><h3 id="installing-generic-service-client" tabindex="-1">Installing Generic Service Client <a class="header-anchor" href="#installing-generic-service-client" aria-hidden="true">#</a></h3><p>Now we have our TechStacks Server DTOs we can use them with the generic <code>JsonServiceClient</code> in the <a href="https://www.npmjs.com/package/@servicestack/client" target="_blank" rel="noopener noreferrer">@servicestack/client</a> npm package to make Typed API Calls.</p><h4 id="install-servicestack-client" tabindex="-1">Install @servicestack/client <a class="header-anchor" href="#install-servicestack-client" aria-hidden="true">#</a></h4><pre><code>$ npm install @servicestack/client
</code></pre><h4 id="techstacks-example" tabindex="-1">TechStacks Example <a class="header-anchor" href="#techstacks-example" aria-hidden="true">#</a></h4><p>Once installed create a <code>demo.ts</code> file with the example below using both the <code>JsonServiceClient</code> from the <strong>@servicestack/client</strong> npm package and the Server DTOs we want to use from our local <code>techstacks.dtos.ts</code> above:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> JsonServiceClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@servicestack/client&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GetTechnology<span class="token punctuation">,</span> GetTechnologyResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./techstacks.dtos&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://techstacks.io&quot;</span><span class="token punctuation">)</span>
 
<span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetTechnology</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
request<span class="token punctuation">.</span>Slug <span class="token operator">=</span> <span class="token string">&quot;ServiceStack&quot;</span>
 
client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Technology<span class="token punctuation">.</span>VendorUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>The <code>JsonServiceClient</code> is populated with the <strong>BaseUrl</strong> of the remote ServiceStack instance we wish to call. Once initialized we can send populated Request DTOs and handle the Typed Response DTOs in Promise callbacks.</p><p>To run our TypeScript example we just need to compile it with TypeScript:</p><pre><code>$ tsc demo.ts
</code></pre><p>Which will generate the compiled <code>demo.js</code> (and <code>typescript.dtos.js</code>) which we can then run with node:</p><pre><code>$ node demo.js
</code></pre><p>Result:</p><pre><code>https://servicestack.net
</code></pre><h4 id="enabling-typescript-async-await" tabindex="-1">Enabling TypeScript async/await <a class="header-anchor" href="#enabling-typescript-async-await" aria-hidden="true">#</a></h4><p>To make API requests using TypeScript&#39;s async/await feature we&#39;ll need to create a TypeScript <code>tsconfig.json</code> config file that imports ES6 promises and W3C fetch definitions with:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dom&quot;</span> <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Now we can create a new <code>await-demo.ts</code> file and start using TypeScript&#39;s async/await feature which as it can only be called within an <code>async</code> function, we&#39;ll need to wrap in an async function:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> JsonServiceClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@servicestack/client&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GetTechnology<span class="token punctuation">,</span> GetTechnologyResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./techstacks.dtos&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://techstacks.io&quot;</span><span class="token punctuation">)</span>
 
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetTechnology</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    request<span class="token punctuation">.</span>Slug <span class="token operator">=</span> <span class="token string">&quot;ServiceStack&quot;</span>
 
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Technology<span class="token punctuation">.</span>VendorUrl<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Now that we have a <code>tsconfig.json</code> we can just call <code>tsc</code> to compile all our TypeScript source files in our folder:</p><pre><code>$ tsc
</code></pre><p>And then run the compiled <code>await-demo.js</code> with node:</p><pre><code>$ node await-demo.js
</code></pre><p>Result:</p><pre><code>https://servicestack.net
</code></pre><h2 id="servicestack-text" tabindex="-1">ServiceStack.Text <a class="header-anchor" href="#servicestack-text" aria-hidden="true">#</a></h2><h3 id="major-memory-and-performance-improvements" tabindex="-1">Major Memory and Performance Improvements <a class="header-anchor" href="#major-memory-and-performance-improvements" aria-hidden="true">#</a></h3><p>We&#39;ve replaced our internal string parsing in ServiceStack.Text&#39;s serializers to use .NET Core&#39;s new <code>StringSegment</code> class (polyfilled in .NET 4.5) which dramatically reduces the memory allocations needed and execution time for deserialization. These improvements are best seen in large complex types with nested arrays like MiniProfiler&#39;s DTO where memory allocations were reduced by <strong>5.3x</strong> and performance improved by <strong>33%</strong>:</p><blockquote><p>v4.5.8</p></blockquote><table><thead><tr><th>Method</th><th>Mean</th><th>StdErr</th><th>StdDev</th><th>Gen 0</th><th>Allocated</th></tr></thead><tbody><tr><td>Deserialize: Complex MiniProfiler</td><td>19,134,639.0083 ns</td><td>190,778.9031 ns</td><td>1,176,040.1418 ns</td><td>1062.5</td><td>9.09 MB</td></tr></tbody></table><blockquote><p>v4.5.10</p></blockquote><table><thead><tr><th>Method</th><th>Mean</th><th>StdErr</th><th>StdDev</th><th>Gen 0</th><th>Allocated</th></tr></thead><tbody><tr><td>Deserialize: Complex MiniProfiler</td><td>12,754,285.9029 ns</td><td>60,934.7823 ns</td><td>235,999.3970 ns</td><td>22.9167</td><td>1.7 MB</td></tr></tbody></table><p>The parsing implementations of primitive .NET Types like integers, decimal and Guid types were replaced with custom implementations utilizing <code>StringSegment</code> which sees their performance improved by <strong>2.5-4x</strong>. We&#39;ve added several tests to ensure consistent behavior, but if needed they can revert to using .NET BCL parsing methods by setting: <code>JsConfig.UseSystemParseMethods = true</code>. If this is needed for whatever reason please let us know at <a href="https://github.com/ServiceStack/Issues" target="_blank" rel="noopener noreferrer">https://github.com/ServiceStack/Issues</a></p><h3 id="vulnerability-with-object-properties" tabindex="-1">Vulnerability with object Properties <a class="header-anchor" href="#vulnerability-with-object-properties" aria-hidden="true">#</a></h3><p><a href="https://www.linkedin.com/in/jonathan-birch-ab27681" target="_blank" rel="noopener noreferrer">Jonathan Birch</a> from Microsoft Vulnerability Research Team (MSVR) notified us of a potential vulnerability when using <code>object</code> properties on DTOs as it allows crafting a JSON payload that can create instances of arbitrary Types and setting their public properties and there exists Types in the .NET Base Class library where this feature can have unwanted consequences.</p><p>We&#39;ve <a href="https://stackoverflow.com/a/10759250/85785" target="_blank" rel="noopener noreferrer">strongly recommended against usage of object and interface properties</a> on DTOS which is contra to the goals of designing self-describing APIs where they expose an unknown hole in Service contracts that&#39;s a potential source of runtime serialization issues, requires proprietary extensions to serialization formats, embeds brittle .NET namespaces in DTOs and adds coupling to serializer-specific implementations that will fail to deserialize in many standards based serializers which as a result <a href="/swift-add-servicestack-reference.html#swift-native-types-limitations">won&#39;t work in some alternative languages</a>.</p><p>Despite its shortcomings it&#39;s still a used feature that we still need to support but in order to close this vulnerability we had to switch to use a whitelist to limit which Types are allowed to deserialize in late-bound <code>object</code> properties.</p><p>To minimize the runtime Exceptions resulting from adopting a whitelist we&#39;ve pre-populated it with a safe-list of popular Data Types, DTOs and Request DTOs with the default configuration below:</p><div class="language-csharp"><pre><code><span class="token comment">// Allow deserializing types with [DataContract] or [RuntimeSerializable] attributes</span>
JsConfig<span class="token punctuation">.</span>AllowRuntimeTypeWithAttributesNamed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">nameof</span><span class="token punctuation">(</span>DataContractAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">nameof</span><span class="token punctuation">(</span>RuntimeSerializableAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// new in ServiceStack.Text</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token comment">// Allow deserializing types implementing any of the interfaces below</span>
JsConfig<span class="token punctuation">.</span>AllowRuntimeTypeWithInterfacesNamed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;IConvertible&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;ISerializable&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;IRuntimeSerializable&quot;</span><span class="token punctuation">,</span> <span class="token comment">// new in ServiceStack.Text</span>
    <span class="token string">&quot;IMeta&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;IReturn\`1&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;IReturnVoid&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token comment">// Allow object property in ServiceStack.Messaging MQ classes</span>
JsConfig<span class="token punctuation">.</span>AllowRuntimeTypeInTypesWithNamespaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;ServiceStack.Messaging&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>The above rules can be extended to allow your own conventions. If you just need to allow a specific Type you can instead just implement:</p><div class="language-csharp"><pre><code>JsConfig<span class="token punctuation">.</span>AllowRuntimeType <span class="token operator">=</span> type <span class="token operator">=&gt;</span> type <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you&#39;re in a trusted intranet environment this can also be used to disable the whitelist completely by allowing all Types to be deserialized into <code>object</code> properties with:</p><div class="language-csharp"><pre><code>JsConfig<span class="token punctuation">.</span>AllowRuntimeType <span class="token operator">=</span> _ <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><p>Note: This vulnerability also applies if you&#39;ve manually implemented a similar feature that uses a <code>string</code> or <code>Type</code> property to specify which instance to create, in which case you&#39;ll want to implement a similar solution. Although the recommendation to avoid this vulnerability would be to not use late-bound <code>object</code> properties and to revert to using Typed properties instead.</p><h3 id="fast-reflection-apis" tabindex="-1">Fast Reflection APIs <a class="header-anchor" href="#fast-reflection-apis" aria-hidden="true">#</a></h3><p>Most of ServiceStack&#39;s libraries relies on the high-performance reusable utilities in ServiceStack.Text to power many of its features. Previously many of our compiled delegates were maintained across multiple different classes, often with duplicated functionality. In this release we&#39;ve consolidated this functionality behind a formal API which includes multiple cascading implementations so it&#39;s able to use the fastest implementation available in <a href="https://github.com/ServiceStackApps/HelloMobile#portable-class-library-support" target="_blank" rel="noopener noreferrer">each supported platform</a>, i.e. for most .NET platforms we use the Reflection.Emit implementations when possible, when not available it falls back to using Compiled Expression trees, then finally falling back to using a Reflection-based implementation.</p><p>This functionality is available using the <code>CreateGetter()</code> and <code>CreateSetter()</code> extension methods on both <code>PropertyInfo</code> or <code>FieldInfo</code> which you may find useful if you&#39;d like to get better performance when populating runtime types dynamically.</p><p>The API examples below showcases the different APIs available:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> runtimeType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">object</span></span> instance <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PropertyInfo</span> pi <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idSetter <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token function">CreateSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idGetter <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token function">CreateGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token function">idSetter</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idValue <span class="token operator">=</span> <span class="token function">idGetter</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>To squeeze out a bit more performance you can create a generic delegate to avoid some boxing/casting with:</p><div class="language-csharp"><pre><code><span class="token class-name">MyType</span> instance <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idSetter <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateSetter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idGetter <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateGetter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>All APIs also have field equivalents:</p><div class="language-csharp"><pre><code><span class="token class-name">FieldInfo</span> fi <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idSetter <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">CreateSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idGetter <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">CreateGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>Create*</code> APIs above creates the compiled delegates which need to be cached to avoid the compilation penalty on subsequent usages. The <code>TypeProperties&lt;T&gt;</code> and <code>TypeFields&lt;T&gt;</code> classes offers fast cached access to these setters/getters which compiles all the <strong>public</strong> properties or fields on a per Type basis.</p><p>Some examples of using these classes:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> runtimeType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> instance <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> typeProps <span class="token operator">=</span> TypeProperties<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>runtimeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Equivalent to:</span>
<span class="token comment">//  typeProps = TypeProperties&lt;MyType&gt;.Instance;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> idAccessor <span class="token operator">=</span> typeProps<span class="token punctuation">.</span><span class="token function">GetAccessor</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
propAccessor<span class="token punctuation">.</span><span class="token function">PublicSetter</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idValue <span class="token operator">=</span> propAccessor<span class="token punctuation">.</span><span class="token function">PublicGetter</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Alternatively you can access property getters / setters individually:</p><div class="language-csharp"><pre><code>typeProps<span class="token punctuation">.</span><span class="token function">GetPublicSetter</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idValue <span class="token operator">=</span> typeProps<span class="token punctuation">.</span><span class="token function">GetPublicGetter</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Whilst <code>TypeFields&lt;T&gt;</code> does the same for a Types <strong>public fields</strong> which is also able to work around the copy semantics of ValueTypes (typically lost when boxing) by utilizing the <code>ref</code> APIs below where we can use this to populate C# 7&#39;s new Value Tuples with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> typeFields <span class="token operator">=</span> TypeFields<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token punctuation">(</span><span class="token keyword">string</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> oTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> item1Accessor <span class="token operator">=</span> typeFields<span class="token punctuation">.</span><span class="token function">GetAccessor</span><span class="token punctuation">(</span><span class="token string">&quot;Item1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> item2Accessor <span class="token operator">=</span> typeFields<span class="token punctuation">.</span><span class="token function">GetAccessor</span><span class="token punctuation">(</span><span class="token string">&quot;Item2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
item1Accessor<span class="token punctuation">.</span><span class="token function">PublicSetterRef</span><span class="token punctuation">(</span><span class="token keyword">ref</span> oTuple<span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item2Accessor<span class="token punctuation">.</span><span class="token function">PublicSetterRef</span><span class="token punctuation">(</span><span class="token keyword">ref</span> oTuple<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>oTuple<span class="token punctuation">;</span>
tuple<span class="token punctuation">.</span>s <span class="token comment">//= bar</span>
tuple<span class="token punctuation">.</span>i <span class="token comment">//= 2</span>
</code></pre></div><h2 id="ormlite" tabindex="-1">OrmLite <a class="header-anchor" href="#ormlite" aria-hidden="true">#</a></h2><h3 id="support-for-c-7-value-tuples" tabindex="-1">Support for C# 7 Value Tuples <a class="header-anchor" href="#support-for-c-7-value-tuples" aria-hidden="true">#</a></h3><p>The <code>ref</code> API above was used to implement the new fast C# 7 Value Tuple support in OrmLite which enables an alternative terse, clean and typed API for accessing the <a href="https://github.com/ServiceStack/ServiceStack.OrmLite#dynamic-result-sets" target="_blank" rel="noopener noreferrer">Dynamic Result Sets</a> returned when using a custom Select expression:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Employee<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Department<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Employee<span class="token punctuation">,</span> Department<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>e<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> d<span class="token punctuation">.</span>Name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">string</span> lastName<span class="token punctuation">,</span> <span class="token keyword">string</span> deptName<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> row <span class="token operator">=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token interpolation-string"><span class="token string">$&quot;row: $</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">row<span class="token punctuation">.</span>id</span><span class="token punctuation">}</span></span><span class="token string">, $</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">row<span class="token punctuation">.</span>lastName</span><span class="token punctuation">}</span></span><span class="token string">, $</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">row<span class="token punctuation">.</span>deptName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Full Custom SQL Example:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">string</span> min<span class="token punctuation">,</span> <span class="token keyword">string</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token string">&quot;SELECT COUNT(*), MIN(Word), MAX(Word), Sum(Total) FROM Table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Partial Custom SQL Select Example:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;COUNT(*), MIN(Word), MAX(Word), Sum(Total)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">string</span> min<span class="token punctuation">,</span> <span class="token keyword">string</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Same as above, but using Typed APIs:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">string</span> min<span class="token punctuation">,</span> <span class="token keyword">string</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>
            Count <span class="token operator">=</span> Sql<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Min <span class="token operator">=</span> Sql<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Word<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Max <span class="token operator">=</span> Sql<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Word<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Sum <span class="token operator">=</span> Sql<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Total<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="expanded-typed-sqlexpresion-surface-area" tabindex="-1">Expanded Typed SqlExpresion Surface Area <a class="header-anchor" href="#expanded-typed-sqlexpresion-surface-area" aria-hidden="true">#</a></h3><p>Due to SqlExpression being used to construct more and more complex queries we&#39;ve been requested to expand the Surface Area of OrmLite&#39;s Typed <code>SqlExpression</code> to handle up to <strong>15 tables</strong> in its <code>Where</code>, <code>And</code> and <code>Or</code> APIs, e.g:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t1<span class="token punctuation">.</span>Id <span class="token operator">==</span> t2<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table3<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t3<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t1<span class="token punctuation">.</span>Id <span class="token operator">==</span> t3<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table4<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t4<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t1<span class="token punctuation">.</span>Id <span class="token operator">==</span> t4<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">,</span>Table2<span class="token punctuation">,</span>Table3<span class="token punctuation">,</span>Table4<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">,</span>t4<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> <span class="token comment">//..., Table15</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">And</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">,</span>Table2<span class="token punctuation">,</span>Table3<span class="token punctuation">,</span>Table4<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">,</span>t4<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>   <span class="token comment">//..., Table15</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Or</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">,</span>Table2<span class="token punctuation">,</span>Table3<span class="token punctuation">,</span>Table4<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">,</span>t4<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>    <span class="token comment">//..., Table15</span>
</code></pre></div><p>Which now supports up to <strong>15 tables</strong> in a single SQL Condition.</p><p>The benefits for using OrmLite&#39;s Typed API for executing large, complex SQL queries are its typing benefits whilst being able to generate cross-platform SQL that can be executed on multiple RDBMS&#39;s, however if you don&#39;t have these requirements it can often be easier to execute <a href="https://github.com/ServiceStack/ServiceStack.OrmLite#typed-sqlexpressions-with-custom-sql-apis" target="_blank" rel="noopener noreferrer">Custom SQL Statements</a> using <code>db.SqlList&lt;T&gt;()</code> instead - especially useful when needing to utilize RDBMS-specific features.</p><h3 id="expanded-join-conditions" tabindex="-1">Expanded Join Conditions <a class="header-anchor" href="#expanded-join-conditions" aria-hidden="true">#</a></h3><p>In a similar way <code>Join</code> and <code>LeftJoin</code> statements can now have up to <strong>4 tables</strong> with the <strong>first 2 tables</strong> used for the table join and the remaining tables can be used to add additional filters to the JOIN expression, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t1<span class="token punctuation">.</span>Id <span class="token operator">==</span> t2<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">,</span> Table3<span class="token punctuation">,</span> Table2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t3<span class="token punctuation">,</span> t2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        t1<span class="token punctuation">.</span>Id <span class="token operator">==</span> t3<span class="token punctuation">.</span>Id <span class="token operator">&amp;&amp;</span> t3<span class="token punctuation">.</span>Id <span class="token operator">==</span> t2<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LeftJoin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">,</span> Table4<span class="token punctuation">,</span> Table2<span class="token punctuation">,</span> Table3<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t4<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        t1<span class="token punctuation">.</span>Id <span class="token operator">==</span> t4<span class="token punctuation">.</span>Id <span class="token operator">&amp;&amp;</span> t4<span class="token punctuation">.</span>Id <span class="token operator">==</span> t2<span class="token punctuation">.</span>Id <span class="token operator">&amp;&amp;</span> t4<span class="token punctuation">.</span>Id <span class="token operator">==</span> t3<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="fail-fast" tabindex="-1">Fail fast <a class="header-anchor" href="#fail-fast" aria-hidden="true">#</a></h3><p>OrmLite is designed to populate as much matching data as it&#39;s able to, if you&#39;d instead prefer to fail fast you can tell OrmLite to throw instead of suppressing common mapping exceptions with:</p><div class="language-csharp"><pre><code>OrmLiteConfig<span class="token punctuation">.</span>ThrowOnError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="proxy-feature" tabindex="-1">Proxy Feature <a class="header-anchor" href="#proxy-feature" aria-hidden="true">#</a></h2><p>The new <code>ProxyFeature</code> plugin is an application-level proxy that can be used to transparently proxy HTTP Requests through to downstream servers whose behavior can be customized with custom C# hooks to control how requests are proxied.</p><p><code>ProxyFeature</code> registers an async/non-blocking <code>RawHttpHandler</code> which bypasses ServiceStack&#39;s Request Pipeline that in <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> is executed as an <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> <code>IHttpAsyncHandler</code> so it should be flexible and performant enough to handle many demanding workloads.</p><p>The example configuration below registers multiple proxies which proxies all requests to <code>/techstacks</code>, <code>/marketing</code> or <code>/finance</code> endpoints to their configured downstream servers:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProxyFeature</span><span class="token punctuation">(</span>
    <span class="token named-parameter punctuation">matchingRequests</span><span class="token punctuation">:</span> req <span class="token operator">=&gt;</span> req<span class="token punctuation">.</span>PathInfo<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/techstacks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">resolveUrl</span><span class="token punctuation">:</span>req <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;http://$</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">resolve</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">.techstacks.io&quot;</span></span> <span class="token operator">+</span> req<span class="token punctuation">.</span>RawUrl<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;/techstacks&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProxyFeature</span><span class="token punctuation">(</span>
    <span class="token named-parameter punctuation">matchingRequests</span><span class="token punctuation">:</span> req <span class="token operator">=&gt;</span> req<span class="token punctuation">.</span>PathInfo<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/marketing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">resolveUrl</span><span class="token punctuation">:</span>req <span class="token operator">=&gt;</span> <span class="token string">&quot;http://marketing.domain.com&quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>RawUrl<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;/marketing&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProxyFeature</span><span class="token punctuation">(</span>
    <span class="token named-parameter punctuation">matchingRequests</span><span class="token punctuation">:</span> req <span class="token operator">=&gt;</span> req<span class="token punctuation">.</span>PathInfo<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/finance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">resolveUrl</span><span class="token punctuation">:</span>req <span class="token operator">=&gt;</span> <span class="token string">&quot;http://finance.domain.com&quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>RawUrl<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;/finance&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>Just like a normal HTTP Proxy, <code>ProxyFeature</code> forwards all the HTTP Request Headers and returns all the HTTP Response Headers and body of the downstream server inc. HTTP Error Responses. This works especially well with ServiceStack&#39;s message-based design as the proxied endpoint e.g <code>/techstacks</code> can be treated as if it were the <strong>BaseUrl</strong> for the downstream server which allows external clients to treat it like they&#39;re communicating with the downstream server directly despite every request being transparently proxied behind a central external ServiceStack instance.</p><p>One potential use-case is to enable smart load balancing which lets you use C# to dynamically control which external downstream server requests are proxied to.</p><p>Thanks to ServiceStack&#39;s clean Service Gateway design you can use the clean POCO DTOs from any server instance, which you can get using the new <a href="https://github.com/ServiceStack/servicestack-cli" target="_blank" rel="noopener noreferrer">servicestack-cli</a> utils from either the public url or proxy endpoint url, e.g:</p><pre><code>$ csharp-ref https://techstacks.io
$ csharp-ref https://external.domain.com/techstacks
</code></pre><p>The resulting DTOs can be used with any <a href="/csharp-client.html#built-in-clients">.NET Service Client</a>, configured with the proxy endpoint as the <strong>BaseUrl</strong>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://external.domain.com/techstacks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTechnology</span> <span class="token punctuation">{</span> Slug <span class="token operator">=</span> <span class="token string">&quot;ServiceStack&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Another potential use-case is to have the proxy act like a facade to access multiple internal microservices that can be made available behind a single external URL, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> authRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Authenticate</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> marketingClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://external.domain.com/marketing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> authResponse <span class="token operator">=</span> marketingClient<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> financeClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://external.domain.com/finance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> authResponse <span class="token operator">=</span> <span class="token keyword">await</span> financeClient<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When needed, there&#39;s a number of customization options available which enables complete control in how the request is proxied and ultimately what response is returned to clients:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">ProxyFeature</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Required filters to specify which requests to proxy and which url to use</span>
    <span class="token function">ProxyFeature</span><span class="token punctuation">(</span>
        <span class="token class-name">Func<span class="token punctuation">&lt;</span>IHttpRequest<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> matchingRequests<span class="token punctuation">,</span> <span class="token comment">// Which requests should be proxied</span>
        <span class="token class-name">Func<span class="token punctuation">&lt;</span>IHttpRequest<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> resolveUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Which downstream url to use </span>
 
    <span class="token comment">// Customize the HTTP Request Headers that are sent to downstream server</span>
    Action<span class="token operator">&lt;</span>IHttpRequest<span class="token punctuation">,</span> HttpWebRequest<span class="token operator">&gt;</span> ProxyRequestFilter
 
    <span class="token comment">// Customize the downstream HTTP Response Headers that are returned to client</span>
    Action<span class="token operator">&lt;</span>IHttpResponse<span class="token punctuation">,</span> HttpWebResponse<span class="token operator">&gt;</span> ProxyResponseFilter
 
    <span class="token comment">// Inspect or Transform the HTTP Request Body that&#39;s sent downstream</span>
    Func<span class="token operator">&lt;</span>IHttpRequest<span class="token punctuation">,</span> Stream<span class="token punctuation">,</span> Task<span class="token operator">&lt;</span>Stream<span class="token operator">&gt;&gt;</span> TransformRequest
 
    <span class="token comment">// Inspect or Transform the downstream HTTP Response Body that&#39;s returned</span>
    Func<span class="token operator">&lt;</span>IHttpResponse<span class="token punctuation">,</span> Stream<span class="token punctuation">,</span> Task<span class="token operator">&lt;</span>Stream<span class="token operator">&gt;&gt;</span> TransformResponse
<span class="token punctuation">}</span>
</code></pre></div><p>So you could use the <code>TransformResponse</code> delegate for instance to rewrite any internal urls to use external urls with something like:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProxyFeature</span><span class="token punctuation">(</span>
    <span class="token named-parameter punctuation">matchingRequests</span><span class="token punctuation">:</span> req <span class="token operator">=&gt;</span> req<span class="token punctuation">.</span>PathInfo<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/techstacks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">resolveUrl</span><span class="token punctuation">:</span> req <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;http://$</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">resolve</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">.techstacks.io&quot;</span></span> <span class="token operator">+</span> req<span class="token punctuation">.</span>RawUrl<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;/techstacks&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        TransformResponse <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>res<span class="token punctuation">,</span> responseStream<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>responseStream<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> responseBody <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> replacedBody <span class="token operator">=</span> responseBody<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;https://techstacks.io&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;https://external.domain.com/techstacks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> MemoryStreamFactory<span class="token punctuation">.</span><span class="token function">GetStream</span><span class="token punctuation">(</span>replacedBody<span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="open-api" tabindex="-1">Open API <a class="header-anchor" href="#open-api" aria-hidden="true">#</a></h2><p>We&#39;ve had a lot of interest and usage with our recent support for <a href="/openapi.html">Open API</a> added in the last release and have continued to add refinements based on Customer feedback:</p><p>The new <code>[Tag]</code> attribute can be used to visually group operations by Tag in Swagger UI:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Tag</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Greet&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>HelloResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Arrays annotated with the <code>[ApiAllowableValues]</code> will show the list of values when clicking <code>Try Out</code> button in Swagger UI:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/movie/{Id}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetMovie</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>MovieResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiMember</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsRequired <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">&quot;Required ID of Movie.&quot;</span><span class="token punctuation">,</span> DataType <span class="token operator">=</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">,</span> ParameterType <span class="token operator">=</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiMember</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsRequired <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">&quot;List of additional objects to include in the movie response.&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiAllowableValues</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Includes&quot;</span><span class="token punctuation">,</span> Values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;Genres&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Releases&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Contributors&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Includes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Support for <code>application\\x-www-form-urlencoded</code> ContentType params in <code>POST</code> and <code>PUT</code> requests can be enabled in Swagger UI by disabling DTO bodies with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiFeature</span> <span class="token punctuation">{</span> 
    DisableAutoDtoInBodyParam <span class="token operator">=</span> <span class="token boolean">true</span>     
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="server-events" tabindex="-1">Server Events <a class="header-anchor" href="#server-events" aria-hidden="true">#</a></h2><h3 id="eventsubscription" tabindex="-1">EventSubscription <a class="header-anchor" href="#eventsubscription" aria-hidden="true">#</a></h3><p>The new <code>ServerArgs</code> string Dictionary on <code>IEventSubscription</code> and <code>SubscriptionInfo</code> is for storing metadata on a SSE subscription that you only want visible on the Server (e.g. Service implementations). The existing <code>ConnectArgs</code> Dictionary is for info you want the subscribed client to have access to from its <code>OnConnect</code> event whilst the <code>Meta</code> dictionary is for public info you&#39;d like other channel subscribers to have access to from their <code>OnJoin</code>, <code>OnLeave</code> and <code>OnUpdate</code> on subscriber events.</p><p>Here&#39;s an example of using the server <code>OnCreated</code> callback to populate all 3 collections:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerEventsFeature</span> <span class="token punctuation">{</span>
    OnCreated <span class="token operator">=</span> <span class="token punctuation">(</span>sub<span class="token punctuation">,</span>req<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">GetSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>session<span class="token punctuation">.</span>IsAuthenticated<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        sub<span class="token punctuation">.</span>Meta<span class="token punctuation">[</span><span class="token string">&quot;Nickname&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span>Nickname<span class="token punctuation">;</span>           <span class="token comment">// channel subscribers</span>
        sub<span class="token punctuation">.</span>ConnectArgs<span class="token punctuation">[</span><span class="token string">&quot;Email&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span>Email<span class="token punctuation">;</span>          <span class="token comment">// client subscriber </span>
        sub<span class="token punctuation">.</span>ServerArgs<span class="token punctuation">[</span><span class="token string">&quot;PostalCode&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span>PostalCode<span class="token punctuation">;</span> <span class="token comment">// server</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Other additions include:</p><ul><li>The new <code>IServerEvents.GetAllSubscriptionInfos()</code> API lets you access all active subscriptions</li><li><code>CreatedAt</code> now available in client channel subscriber events</li><li>The <code>LastMessageId</code>, <code>Request</code>, <code>Response</code> properties now accessible on <code>EventSubscription</code></li></ul><h3 id="autowired-typed-request-filters" tabindex="-1">Autowired Typed Request Filters <a class="header-anchor" href="#autowired-typed-request-filters" aria-hidden="true">#</a></h3><p><a href="https://github.com/englerj" target="_blank" rel="noopener noreferrer">Josh Engler</a> contributed support for Autowired Request and Response Filters which lets you handle Request DTOs in a Typed Filter similar to how Autowired Services handles Typed Request DTOs with access to IOC injected dependencies.</p><p>Autowired Typed Filters just needs to implement <code>ITypedFilter&lt;TRequest&gt;</code> and can be registered in the IOC like a regular dependency, e.g:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAutoWiredAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Dependency<span class="token punctuation">,</span> IDependency<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAutoWired</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TypedRequestFilter<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then can be registered using the new <code>RegisterTypedRequestFilter</code> overload:</p><div class="language-csharp"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">RegisterTypedRequestFilter</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TypedRequestFilter<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which invokes the Typed Request Filter on each <code>MyRequest</code> where it&#39;s able to access any IOC injected dependencies, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">TypedRequestFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITypedFilter<span class="token punctuation">&lt;</span>MyRequest<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IDependency</span> Dependency <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// injected by IOC</span>
 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name">MyRequest</span> dto<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// Handle MyRequest using a Request Filter</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Dependency<span class="token punctuation">.</span><span class="token function">GrantAccess</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>Forbidden<span class="token punctuation">;</span>
            res<span class="token punctuation">.</span>StatusDescription <span class="token operator">=</span> <span class="token string">&quot;Thou shall not pass&quot;</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">EndRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="http-caching" tabindex="-1">HTTP Caching <a class="header-anchor" href="#http-caching" aria-hidden="true">#</a></h2><p>Returning a static <a href="/virtual-file-system.html">Virtual File</a> or <code>FileInfo</code> in a <code>HttpResult</code> now sets the <strong>Last-Modified</strong> HTTP Response Header whose behavior instructs the pre-configured <a href="/http-caching.html">HttpCacheFeature</a> to generate the necessary HTTP Headers so HTTP Clients are able to validate subsequent requests using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since" target="_blank" rel="noopener noreferrer">If-Modified-Since</a> HTTP Request Header, allowing them to skip redownloading files they&#39;ve already cached locally.</p><p>This feature is leveraged in all Single Page App templates in its <code>[FallbackRoute]</code> implementation that&#39;s used to enable full page reloads by returning the Home <strong>index.html</strong> page for any unknown Requests, allowing routing to be handled on the client:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FallbackRoute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/{PathInfo*}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FallbackForClientRoutes</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PathInfo <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//Return default.html for unmatched requests so routing is handled on client</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">FallbackForClientRoutes</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span>VirtualFileSources<span class="token punctuation">.</span><span class="token function">GetFile</span><span class="token punctuation">(</span><span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-hidden="true">#</a></h2><h3 id="re-authentication" tabindex="-1">Re-Authentication <a class="header-anchor" href="#re-authentication" aria-hidden="true">#</a></h3><p>We routinely preemptively seek out optimizations and try to avoid executing unnecessary logic when possible. One such optimization was skipping Authentication if the User was already Authenticated. However in this case we picked the wrong default as skipping Re-Authentication wasn&#39;t completely harmless, e.g. you weren&#39;t able to tell if your Password was still valid, it didn&#39;t reset the UserSession expiry and more recently it prevented accessing new <a href="/jwt-authprovider.html#refresh-tokens">JWT Refresh Tokens</a> which are only issued upon Authentication.</p><p>So we&#39;ve removed this optimization and are allowing Re-Authentication by default which is more in-line with the expected behavior. If needed, the previous behavior can be reverted with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SkipAuthenticationIfAlreadyAuthenticated <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>However we&#39;re deprecating and will eventully remove this option as we can&#39;t think of a valid use-case where it&#39;s preferred, so if you&#39;re somehow relying on the previous behavior we recommend changing it to work with current behavior when possible.</p><h3 id="api-key-auth-provider" tabindex="-1">API Key Auth Provider <a class="header-anchor" href="#api-key-auth-provider" aria-hidden="true">#</a></h3><p>You can opt-in to allow API Keys to be passed on the <strong>QueryString</strong> (e.g. <code>?apikey={APIKEY}</code>) or HTTP POST <strong>Form Data</strong> with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiKeyAuthProvider</span> <span class="token punctuation">{</span>
    AllowInHttpParams <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="jwt-tokens" tabindex="-1">JWT Tokens <a class="header-anchor" href="#jwt-tokens" aria-hidden="true">#</a></h3><p>You can retrieve the JWT Token string from the current <code>IRequest</code> with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">string</span></span> jwt <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">GetJwtToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>There&#39;s also a new API to simplify converting JWT Tokens into User Sessions:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> userSession <span class="token operator">=</span> JwtAuthProviderReader<span class="token punctuation">.</span><span class="token function">CreateSessionFromJwt</span><span class="token punctuation">(</span><span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which is essentially a shorthand for:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> jwtProvider <span class="token operator">=</span> <span class="token punctuation">(</span>JwtAuthProviderReader<span class="token punctuation">)</span>AuthenticateService<span class="token punctuation">.</span><span class="token function">GetAuthProvider</span><span class="token punctuation">(</span><span class="token string">&quot;jwt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> userSession <span class="token operator">=</span> jwtProvider<span class="token punctuation">.</span><span class="token function">ConvertJwtToSession</span><span class="token punctuation">(</span><span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">GetJwtToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="minor-changes" tabindex="-1">Minor Changes <a class="header-anchor" href="#minor-changes" aria-hidden="true">#</a></h2><h3 id="debugmode" tabindex="-1">DebugMode <a class="header-anchor" href="#debugmode" aria-hidden="true">#</a></h3><p>The home page and directories are no longer cached in <a href="/debugging.html#debugmode">DebugMode</a> to better be able to reflect changes during development.</p><h2 id="webserviceexception" tabindex="-1">WebServiceException <a class="header-anchor" href="#webserviceexception" aria-hidden="true">#</a></h2><p>The <code>WebServiceException</code> Message returns the the more appropriate <code>ResponseStatus.ErrorMessage</code> if available. The previous StatusDescription text can be retrieved from the <code>WebServiceException.StatusDescription</code> property.</p><h3 id="basicapphost" tabindex="-1">BasicAppHost <a class="header-anchor" href="#basicapphost" aria-hidden="true">#</a></h3><p>The <code>BasicAppHost</code> is no longer pre-registered with default plugins, so any tests or external code that uses ServiceStack APIs outside of ServiceStack will need to import any plugins they make use of, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> appHost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicAppHost</span> <span class="token punctuation">{</span>
        Plugins <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MarkdownFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">//..</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="other-changes" tabindex="-1">Other Changes <a class="header-anchor" href="#other-changes" aria-hidden="true">#</a></h3><ul><li>The <code>RemoveHeader()</code> API has been added to <code>IResponse</code> and all implementations</li><li>The HTTP Request/Response Preview in Metadata pages uses the Verb, URL and Request Body of the preferred HTTP Method for each Service</li><li>The Basic Auth Credentials are auto-sent in <code>JsonHttpClient</code> 401 Challenged Responses</li><li>Empty Collections are now ignored AutoQuery Filters</li></ul><h1 id="v4-5-8-release-notes" tabindex="-1"><a href="/releases/v4.5.8.html">v4.5.8 Release Notes</a> <a class="header-anchor" href="#v4-5-8-release-notes" aria-hidden="true">#</a></h1>__VP_STATIC_END__`,340),o=[p];function c(r,i,l,u,k,d){return a(),s("div",null,o)}var m=n(t,[["render",c]]);export{g as __pageData,m as default};
