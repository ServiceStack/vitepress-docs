import{_ as s,c as t,o,a as e,b as a,e as n}from"./app.14440598.js";const S='{"title":"Create your first WebService","description":"","frontmatter":{"slug":"create-your-first-webservice","title":"Create your first WebService"},"headers":[{"level":2,"title":"Step 1: Install the x dotnet tool","slug":"step-1-install-the-x-dotnet-tool"},{"level":2,"title":"Step 2: Selecting a template","slug":"step-2-selecting-a-template"},{"level":2,"title":"Step 3: Run your project","slug":"step-3-run-your-project"},{"level":3,"title":"How does it work?","slug":"how-does-it-work"},{"level":2,"title":"Step 4: Exploring the ServiceStack Solution","slug":"step-4-exploring-the-servicestack-solution"},{"level":3,"title":"Host Project","slug":"host-project"},{"level":3,"title":"ServiceInterface Project","slug":"serviceinterface-project"},{"level":3,"title":"ServiceModel Project","slug":"servicemodel-project"},{"level":3,"title":"Test Project","slug":"test-project"},{"level":3,"title":"ServiceStack Integration","slug":"servicestack-integration"},{"level":3,"title":"jQuery","slug":"jquery"},{"level":3,"title":"Dependency-free JsonServiceClient & Typed DTOs in Web Pages","slug":"dependency-free-jsonserviceclient-typed-dtos-in-web-pages"},{"level":3,"title":"Rich intelli-sense support","slug":"rich-intelli-sense-support"},{"level":3,"title":"Using mix to quickly create empty .NET Core Apps","slug":"using-mix-to-quickly-create-empty-net-core-apps"},{"level":3,"title":"TypeScript or JavaScript SPA Apps","slug":"typescript-or-javascript-spa-apps"},{"level":3,"title":"Full .NET Project Templates","slug":"full-net-project-templates"},{"level":3,"title":"Integrated in Major IDEs and popular Mobile & Desktop platforms","slug":"integrated-in-major-ides-and-popular-mobile-desktop-platforms"},{"level":2,"title":"Instant Client Apps","slug":"instant-client-apps"},{"level":2,"title":"Fundamentals - AppHost and Configuration","slug":"fundamentals-apphost-and-configuration"},{"level":2,"title":"Explore ServiceStack","slug":"explore-servicestack"},{"level":2,"title":"Community Resources","slug":"community-resources"}],"relativePath":"create-your-first-webservice.md","lastUpdated":1634495307614}',p={},r=e(`__VP_STATIC_START__<p>This is a quick walkthrough of getting your first web service up and running whilst having a look at the how some of the different components work.</p><h2 id="step-1-install-the-x-dotnet-tool" tabindex="-1">Step 1: Install the x dotnet tool <a class="header-anchor" href="#step-1-install-the-x-dotnet-tool" aria-hidden="true">#</a></h2><p>First we want to install the <a href="/dotnet-tool.html">x dotnet tool</a>:</p><div class="language-bash"><pre><code>$ dotnet tool <span class="token function">install</span> --global x 
</code></pre></div><p>The <a href="/dotnet-tool.html">dotnet tools</a> are ServiceStack&#39;s versatile companion giving you quick access to a lot of its high-level features including generating mobile, web &amp; desktop DTOs with <a href="/add-servicestack-reference.html">Add ServiceStack Reference</a> generating <a href="/grpc.html">gRPC Clients and proto messages</a>, quickly <a href="/mix-tool.html">apply gists</a> to your project enabled by ServiceStack&#39;s effortless <a href="/modular-startup.html">no-touch Modular features</a>, it even includes a <a href="https://sharpscript.net/lisp/" target="_blank" rel="noopener noreferrer">lisp REPL</a> should you need to explore your <a href="https://sharpscript.net/lisp/#techstacks-tcp-lisp-repl-demo" target="_blank" rel="noopener noreferrer">remote .NET Core App in real-time</a>.</p><h2 id="step-2-selecting-a-template" tabindex="-1">Step 2: Selecting a template <a class="header-anchor" href="#step-2-selecting-a-template" aria-hidden="true">#</a></h2><p>Importantly, the dotnet tools lets you create <a href="/dotnet-new.html">.NET Core, .NET Framework</a> and <a href="/templates-corefx.html">ASP.NET Core on .NET Framework</a> projects. Unless you&#39;re restricted to working with .NET Framework you&#39;ll want to start with a <a href="/dotnet-new.html#usage">.NET Core project template</a>, for this example we&#39;ll start with the Empty <a href="https://github.com/NetCoreTemplates/web" target="_blank" rel="noopener noreferrer">web</a> template which implicitly uses the folder name for the Project Name:</p><div class="language-bash"><pre><code>$ x new web WebApp
</code></pre></div><h2 id="step-3-run-your-project" tabindex="-1">Step 3: Run your project <a class="header-anchor" href="#step-3-run-your-project" aria-hidden="true">#</a></h2><p>Press <code>Ctrl+F5</code> to run your project!</p><p><a href="https://raw.githubusercontent.com/ServiceStack/ServiceStackVS/master/Images/empty_project_run.png" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/ServiceStackVS/master/Images/empty_project_run.png" alt=""></a></p><h4 id="watched-builds" tabindex="-1">Watched builds <a class="header-anchor" href="#watched-builds" aria-hidden="true">#</a></h4><p>An alternative to running your project in your IDE is to run a watched build using the <code>dotnet</code> tool on the command-line:</p><div class="language-bash"><pre><code>$ dotnet <span class="token function">watch</span> run
</code></pre></div><p>Where it will automatically rebuild &amp; restart your App when it detects any changes to your App&#39;s source files.</p><h3 id="how-does-it-work" tabindex="-1">How does it work? <a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a></h3><p>Now that your new project is running, let&#39;s have a look at what we have. The template comes with a single web service route which comes from the request DTO (Data Transfer Object) which is located in the <a href="https://github.com/NetCoreTemplates/web/blob/master/MyApp.ServiceModel/Hello.cs" target="_blank" rel="noopener noreferrer">Hello.cs</a> file:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/hello/{Name}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>HelloResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloResponse</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Result <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <code>Route</code> attribute is specifying what path <code>/hello/{Name}</code> where <code>{Name}</code> binds its value to the public string property of <strong>Name</strong>.</p><p>Let&#39;s access the route to see what comes back. Go to the following URL in your address bar, where &lt;root_path&gt; is your server address.</p><pre><code>http://{BaseUrl}/hello/world
</code></pre><p>You will see a snapshot of the Result in a HTML response format. To change the return format to Json, simply add <code>?format=json</code> to the end of the URL. You&#39;ll learn more about formats, endpoints (URLs, etc) when you continue reading the documentation.</p><p>If we go back to the solution and find the WebApplication1.ServiceInterface and open the <code>MyServices.cs</code> file, we can have a look at the code that is responding to the browser, giving us the <code>Result</code> back.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">Hello</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HelloResponse</span> <span class="token punctuation">{</span> Result <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If we look at the code above, there are a few things to note. The name of the method <code>Any</code> means the server will run this method for any of the valid HTTP Verbs. Service methods are where you control what returns from your service.</p><h2 id="step-4-exploring-the-servicestack-solution" tabindex="-1">Step 4: Exploring the ServiceStack Solution <a class="header-anchor" href="#step-4-exploring-the-servicestack-solution" aria-hidden="true">#</a></h2><p>The Recommended structure below is built into all ServiceStackVS <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> Templates where creating any new ServiceStack project will create a solution with a minimum of 4 projects below ensuring ServiceStack solutions starts off from an optimal logical project layout, laying the foundation for growing into a more maintainable, cohesive and reusable code-base:</p><img align="right" src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/solution-layout.png"><h3 id="host-project" tabindex="-1">Host Project <a class="header-anchor" href="#host-project" aria-hidden="true">#</a></h3><p>The Host project contains your AppHost which references and registers all your App&#39;s concrete dependencies in its IOC and is the central location where all App configuration and global behavior is maintained. It also references all Web Assets like Razor Views, JS, CSS, Images, Fonts, etc. that&#39;s needed to be deployed with the App. The AppHost is the top-level project which references all dependencies used by your App whose role is akin to an orchestrator and conduit where it decides what functionality is made available and which concrete implementations are used. By design it references all other (non-test) projects whilst nothing references it and as a goal should be kept free of any App or Business logic.</p><h3 id="serviceinterface-project" tabindex="-1">ServiceInterface Project <a class="header-anchor" href="#serviceinterface-project" aria-hidden="true">#</a></h3><p>The ServiceInterface project is the implementation project where all Business Logic and Services live which typically references every other project except the Host projects. Small and Medium projects can maintain all their implementation here where logic can be grouped under feature folders. Large solutions can split this project into more manageable cohesive and modular projects which we also recommend encapsulates any dependencies they might use.</p><h3 id="servicemodel-project" tabindex="-1">ServiceModel Project <a class="header-anchor" href="#servicemodel-project" aria-hidden="true">#</a></h3><p>The ServiceModel Project contains all your Application&#39;s DTOs which is what defines your Services contract, keeping them isolated from any Server implementation is how your Service is able to encapsulate its capabilities and make them available behind a remote facade. There should be only one ServiceModel project per solution which contains all your DTOs and should be implementation, dependency and logic-free which should only reference the impl/dep-free <strong>ServiceStack.Interfaces.dll</strong> contract assembly to ensure Service contracts are decoupled from its implementation, enforces interoperability ensuring that your Services don&#39;t mandate specific client implementations and will ensure this is the only project clients need to be able to call any of your Services by either referencing the <strong>ServiceModel.dll</strong> directly or downloading the DTOs from a remote ServiceStack instance using <a href="/add-servicestack-reference.html">Add ServiceStack Reference</a>:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/dtos-role.png" alt=""></p><h3 id="test-project" tabindex="-1">Test Project <a class="header-anchor" href="#test-project" aria-hidden="true">#</a></h3><p>The Unit Test project contains all your Unit and Integration tests. It&#39;s also a Host project that typically references all other non-Host projects in the solution and contains a combination of concrete and mock dependencies depending on what&#39;s being tested. See the <a href="/testing.html">Testing Docs</a> for more information on testing ServiceStack projects.</p><h3 id="servicestack-integration" tabindex="-1">ServiceStack Integration <a class="header-anchor" href="#servicestack-integration" aria-hidden="true">#</a></h3><h3 id="jquery" tabindex="-1">jQuery <a class="header-anchor" href="#jquery" aria-hidden="true">#</a></h3><p>ServiceStack&#39;s clean Web Services design makes it simple and intuitive to be able to call ServiceStack Services from any ajax client, e.g. from a <a href="https://github.com/ServiceStack/Templates/blob/master/src/ServiceStackVS/BootstrapWebApp/BootstrapWebApp/default.cshtml" target="_blank" rel="noopener noreferrer">simple Bootstrap Website using jQuery</a>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Type your name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#Name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyup</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">&#39;/hello/&#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="dependency-free-jsonserviceclient-typed-dtos-in-web-pages" tabindex="-1">Dependency-free JsonServiceClient &amp; Typed DTOs in Web Pages <a class="header-anchor" href="#dependency-free-jsonserviceclient-typed-dtos-in-web-pages" aria-hidden="true">#</a></h3><p>A <strong>dep-free alternative</strong> to jQuery that works in all modern browsers is to use the <a href="https://github.com/ServiceStack/servicestack-client" target="_blank" rel="noopener noreferrer">UMD @servicestack/client</a> built into <code>ServiceStack.dll</code> along with the transpiled <a href="/typescript-add-servicestack-reference.html">TypeScript Generated DTOs</a> to enable an optimal typed modern async API:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/json/metadata?op=Hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> API<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txtName<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onkeyup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">callHello</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span> __esModule<span class="token operator">:</span><span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> module <span class="token operator">=</span> <span class="token punctuation">{</span> exports<span class="token operator">:</span>exports <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> exports<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> window<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/servicestack-client.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/dtos.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> exports<span class="token punctuation">)</span> <span class="token comment">//import</span>

<span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">callHello</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> val <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> r<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Where you can update your App&#39;s server DTOs by transpiling them to JavaScript &amp; moving to <code>/wwwroot</code>:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> run dtos
</code></pre></div><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/mix/init.png" alt=""></p><h3 id="rich-intelli-sense-support" tabindex="-1">Rich intelli-sense support <a class="header-anchor" href="#rich-intelli-sense-support" aria-hidden="true">#</a></h3><p>Even pure HTML/JS Apps that don&#39;t use TypeScript or any external dependencies will still benefit from the Server generated <code>dtos.ts</code> and <code>servicestack-client.d.ts</code> definitions as Smart IDEs like <a href="https://www.jetbrains.com/rider/" target="_blank" rel="noopener noreferrer">Rider</a> can make use of them to provide a rich productive development UX on both the built-in <code>/js/servicestack-client.js</code> library:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/mix/init-rider-ts-client.png" alt=""></p><p>As well as your App&#39;s server generated DTOs:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/mix/init-rider-ts-dto.png" alt=""></p><p>Including their typed partial constructors:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/mix/init-rider-ts-dto-props.png" alt=""></p><p>So even simple Apps without complex bundling solutions or external dependencies can still benefit from a rich typed authoring experience without any additional build time or tooling complexity.</p><h3 id="using-mix-to-quickly-create-empty-net-core-apps" tabindex="-1">Using mix to quickly create empty .NET Core Apps <a class="header-anchor" href="#using-mix-to-quickly-create-empty-net-core-apps" aria-hidden="true">#</a></h3><p>As this requires no external deps or prescribed JS frameworks, it&#39;s used in the <a href="/mix-tool.html#mix-usage">init and init-lts</a> mix scripts which you can quickly add &amp; run using the <a href="/dotnet-tool.html">x dotnet tool</a>:</p><div class="language-bash"><pre><code>$ dotnet tool <span class="token function">install</span> --global x 
</code></pre></div><p>Which can be used to quickly create &amp; run a new .NET Core App in an empty directory:</p><div class="language-"><pre><code>$ mkdir ProjectName &amp;&amp; cd ProjectName
$ x mix init
$ dotnet run
</code></pre></div><p>Which will install the <a href="https://gist.github.com/gistlyn/58030e271595520d87873c5df5e4c2eb" target="_blank" rel="noopener noreferrer">init Gist</a> to your local directory using the <code>ProjectName</code> directory name for the new Project name.</p><h4 id="empty-vb-net-net-core-app" tabindex="-1">Empty <a href="http://VB.NET" target="_blank" rel="noopener noreferrer">VB.NET</a> .NET Core App <a class="header-anchor" href="#empty-vb-net-net-core-app" aria-hidden="true">#</a></h4><p>Use <code>init-vb</code> to create a VB .NET Core App:</p><div class="language-"><pre><code>$ mkdir ProjectName &amp;&amp; cd ProjectName
$ x mix init-vb
$ dotnet run
</code></pre></div><p>Which will install the <a href="https://gist.github.com/gistlyn/88f2792fc4820de7dc4e68c0c5d76126" target="_blank" rel="noopener noreferrer">init-vb Gist</a>.</p><h4 id="empty-f-net-core-app" tabindex="-1">Empty F# .NET Core App <a class="header-anchor" href="#empty-f-net-core-app" aria-hidden="true">#</a></h4><p>Use <code>init-fsharp</code> to create a F# .NET Core App:</p><div class="language-"><pre><code>$ mkdir ProjectName &amp;&amp; cd ProjectName
$ x mix init-fsharp
$ dotnet run
</code></pre></div><p>Which will install the <a href="https://gist.github.com/gistlyn/4802ba22b665e68c7257aef9f57c1934" target="_blank" rel="noopener noreferrer">init-fsharp Gist</a>.</p><h3 id="typescript-or-javascript-spa-apps" tabindex="-1">TypeScript or JavaScript SPA Apps <a class="header-anchor" href="#typescript-or-javascript-spa-apps" aria-hidden="true">#</a></h3><p>The same <a href="/typescript-add-servicestack-reference.html#typescript-serviceclient">TypeScript JsonServiceClient</a> is also used in more sophisticated JavaScript Apps like <a href="/typescript-add-servicestack-reference.html#react-native-jsonserviceclient">React Native</a> to <a href="https://github.com/ServiceStackApps/typescript-server-events" target="_blank" rel="noopener noreferrer">node.js Server Apps</a> as well as all TypeScript SPA Project Templates, such as this <a href="https://github.com/ServiceStack/Templates/blob/master/src/SinglePageApps/ReactApp1/ReactApp1/src/home/Hello.tsx" target="_blank" rel="noopener noreferrer">example using React</a>:</p><div class="language-tsx"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;./hello.css&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@servicestack/react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../shared&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../shared/dtos&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">HelloApiProps</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> HelloApi<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token operator">:</span>HelloApiProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>result<span class="token punctuation">,</span> setResult<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">setResult</span><span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fires when name changes</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-group<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setName<span class="token punctuation">}</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Your name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result pt-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> result <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Compare and contrast with other major SPA JavaScript Frameworks:</p><ul><li><a href="https://github.com/NetCoreTemplates/vue-spa/blob/master/MyApp/src/components/Home/HelloApi.vue" target="_blank" rel="noopener noreferrer">Vue.js HelloApi.vue</a></li><li><a href="https://github.com/NetCoreTemplates/react-spa/blob/master/MyApp/src/components/Home/HelloApi.tsx" target="_blank" rel="noopener noreferrer">React HelloApi.tsx</a></li><li><a href="https://github.com/NetCoreTemplates/angular-spa/blob/master/MyApp/src/app/home/HelloApi.ts" target="_blank" rel="noopener noreferrer">Angular HelloApi.ts</a></li><li><a href="https://github.com/NetCoreTemplates/svelte-spa/blob/master/MyApp/src/components/Home.svelte" target="_blank" rel="noopener noreferrer">Svelte Home.svelte</a></li><li><a href="https://github.com/NetCoreTemplates/aurelia-spa/blob/master/MyApp/src/resources/elements/hello.ts" target="_blank" rel="noopener noreferrer">Aurelia hello.ts</a></li><li><a href="https://github.com/NetCoreTemplates/angular-lite-spa/blob/master/MyApp/src/modules/app/home/hello.ts" target="_blank" rel="noopener noreferrer">Angular v4 hello.ts</a></li><li><a href="https://github.com/ServiceStack/Templates/blob/master/src/ServiceStackVS/AngularJSApp/AngularJSApp/js/hello/controllers.js" target="_blank" rel="noopener noreferrer">Angular.js v1.5 using $http</a></li></ul><h3 id="full-net-project-templates" tabindex="-1">Full .NET Project Templates <a class="header-anchor" href="#full-net-project-templates" aria-hidden="true">#</a></h3><p>The above <code>init</code> projects allow you to create a minimal web app, to create a more complete ServiceStack App with the recommended project structure, start with one of our C# project templates instead:</p><h4 id="c-project-templates" tabindex="-1"><a href="/dotnet-new.html">C# Project Templates</a> <a class="header-anchor" href="#c-project-templates" aria-hidden="true">#</a></h4><h3 id="integrated-in-major-ides-and-popular-mobile-desktop-platforms" tabindex="-1">Integrated in Major IDEs and popular Mobile &amp; Desktop platforms <a class="header-anchor" href="#integrated-in-major-ides-and-popular-mobile-desktop-platforms" aria-hidden="true">#</a></h3><p>ServiceStack Services are also <a href="/why-servicestack.html#generate-instant-typed-apis-from-within-all-major-ides">easily consumable from all major Mobile and Desktop platforms</a> including native iPhone and iPad Apps on iOS with Swift, Mobile and Tablet Apps on Android with Java or Kotlin, OSX Desktop Applications as well as targeting the most popular .NET Mobile and Desktop platforms including Xamarin.iOS, Xamarin.Android, Windows Store, WPF and WinForms.</p><h2 id="instant-client-apps" tabindex="-1">Instant Client Apps <a class="header-anchor" href="#instant-client-apps" aria-hidden="true">#</a></h2><p>Generate working native client apps for your live ServiceStack services, in a variety of languages, instantly with our free managed service.</p><p>This tool enables your developers, and even your customers, to open a working example native application straight from the web to their favorite IDE.</p>__VP_STATIC_END__`,82),c=a("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/GTnuMhvUayg",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""},null,-1),l=a("h2",{id:"fundamentals-apphost-and-configuration",tabindex:"-1"},[n("Fundamentals - AppHost and Configuration "),a("a",{class:"header-anchor",href:"#fundamentals-apphost-and-configuration","aria-hidden":"true"},"#")],-1),i=a("p",null,[n("Walk through configuring your ServiceStack Application's "),a("code",null,"AppHost"),n(":")],-1),u=a("iframe",{width:"896",height:"525",src:"https://www.youtube.com/embed/mOpx5mUGoqI",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""},null,-1),k=e('',4),h=[r,c,l,i,u,k];function d(g,m,f,v,b,y){return o(),t("div",null,h)}var j=s(p,[["render",d]]);export{S as __pageData,j as default};
