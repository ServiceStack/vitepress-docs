import{w as e}from"./web-new-netcore.16b57ba8.js";import{o as a,c as s,d as t,u as o,a as n}from"./app.14440598.js";const p=n(`<p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/release-notes/netcore-banner.png?t" alt=""></p><p>Most of ServiceStack&#39;s features are also available on .NET Core, where it&#39;s all maintained within a single code-base enabling excellent source-code compatibility to maximize existing knowledge and code-reuse and reducing portability efforts, and released within the same suite of NuGet packages, all without breaking changes to existing .NET 4.5 Customers.</p><h3 id="net-core-the-future-of-net-on-linux" tabindex="-1">.NET Core - the future of .NET on Linux <a class="header-anchor" href="#net-core-the-future-of-net-on-linux" aria-hidden="true">#</a></h3><p>.NET Core enables an exciting era of .NET Web and Server App development - the kind .NET hasn&#39;t seen before. The existing Windows hosting and <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> restraints have been freed, now anyone can develop using .NET&#39;s productive expertly-designed and statically-typed mainstream C#/F# languages in their preferred editor and host it on the most popular server Operating Systems, in either an all-Linux, all-Windows or mixed ecosystem. Not only does this flexibility increase the value of existing .NET investments but it also makes .NET appeal to the wider and highly productive developer ecosystem who&#39;ve previously disregarded .NET as an option.</p><p>.NET Core offers significant performance and stability improvements over Mono that&#39;s derived from a shared cross-platform code-base and supported by a well-resourced, active and responsive team. If you&#39;re currently running <strong>ServiceStack on Mono</strong>, we strongly recommend <strong>upgrading to .NET Core</strong> to take advantage of its superior performance, stability and its top-to-bottom supported Technology Stack.</p><p>and with that let&#39;s jump into seeing some ServiceStack Live Demos running on .NET Core in Linux...</p><h3 id="servicestack-net-core-apps-running-in-docker" tabindex="-1">ServiceStack .NET Core Apps running in Docker <a class="header-anchor" href="#servicestack-net-core-apps-running-in-docker" aria-hidden="true">#</a></h3><p>Hosting .NET Core Apps immediately exposes us to the benefits of .NET Core. We&#39;ve ported the Live Demos using the most productive IDE and tooling combination we&#39;ve found for us - which is still <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> with ReSharper. But for deployments and hosting we now have an array of options at our disposal, including joining the thriving state-of-the-art ecosystem around building Linux Docker images and deploying them to the cloud.</p><p>For .NET Core Live Demos we&#39;ve settled on the popular power combo of:</p><ul><li>Using <a href="https://travis-ci.org/" target="_blank" rel="noopener noreferrer">travis-ci.org</a> (free for OSS projects) for running CI scripts to rebuild Docker App Images on every check-in</li><li>Using <a href="https://aws.amazon.com/ecs/" target="_blank" rel="noopener noreferrer">AWS EC2 Container Service</a> for managing Docker images and instance deployments</li><li>Using <a href="https://github.com/jwilder/nginx-proxy" target="_blank" rel="noopener noreferrer">nginx-proxy</a> setting up an nginx reverse proxy and automatically bind virtual hosts to Docker Instances</li></ul><p>You can checkout our <a href="/deploy-netcore-docker-aws-ecs.html">Deploy .NET Core with Docker to AWS ECS Guide</a> for the details on how we&#39;ve deployed the .NET Core Live Demos, but ultimately packaging .NET Core Apps inside Docker images enables a higher-level of abstraction letting you define your entire App Server Instance with a repeatable recipe that lets you treat and deploy instances like opaque self-contained units.</p><p>With our <a href="https://github.com/ServiceStackApps/LiveDemos" target="_blank" rel="noopener noreferrer">.NET 4.5 Windows Live Demos</a> we&#39;re effectively mutating a static Windows Server VM that required pre-configuring with IIS Virtual Hosts. Any infrastructure Servers each Live Demo needs, are set up out-of-band and to minimize the System administration burden, all Demos share the same Redis server instance.</p><h4 id="repeatable-isolated-no-touch-automated-deployments" tabindex="-1">Repeatable, Isolated, no-touch automated Deployments <a class="header-anchor" href="#repeatable-isolated-no-touch-automated-deployments" aria-hidden="true">#</a></h4><p>But for our .NET Core Docker deployments we have proper isolation and repeatable no-touch deployments where any infrastructure services each App needs are declared in configuration and deployed in a separate Docker container along side each App to an ECS cluster - decoupling your deployments from static EC2 instances. This lets you treat your server infrastructure and deployment automation story like code, where it&#39;s checked-in with your Repo and run with your CI who packages it in a Docker Container, publishes it as an opaque Image and deploys it to the <a href="https://aws.amazon.com/ecs/" target="_blank" rel="noopener noreferrer">AWS EC2 Container Service</a>.</p><h4 id="linux-cost-savings" tabindex="-1">Linux Cost Savings <a class="header-anchor" href="#linux-cost-savings" aria-hidden="true">#</a></h4><p>In addition to the thriving ecosystem and superior automation, another benefit of hosting .NET Core Apps on Linux is the considerable cost savings of hosting on a Linux infrastructure. Docker instances enable isolation with considerably more efficiency than VM&#39;s allowing you to pack them with greater density. For .NET Core Live Demos the single T2 medium instance (<strong>$25 /month</strong>) is hosting 15 Docker Images whilst running at <strong>~50% Memory Utilization</strong> and <strong>&lt;1% CPU Utilization</strong> in its current idle state.</p><h3 id="exceptional-code-reuse" tabindex="-1">Exceptional Code reuse <a class="header-anchor" href="#exceptional-code-reuse" aria-hidden="true">#</a></h3><p>Thanks to ServiceStack&#39;s high-level host agnostic API and our approach to decouple from concrete HTTP abstractions behind lightweight <code>IRequest</code> interfaces, ServiceStack projects enjoy near perfect code reuse, which allows the same ServiceStack Services to be able to run on <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a>, HttpListener SelfHosts, SOAP Endpoints, multiple MQ Hosts and .NET Core Apps. The <a href="https://github.com/ServiceStackApps/HelloMobile#servicestack-server-app" target="_blank" rel="noopener noreferrer">HelloMobile Server Hosts</a> shows an example of this where the same <a href="https://github.com/ServiceStackApps/HelloMobile/blob/master/src/Server.Common/WebServices.cs" target="_blank" rel="noopener noreferrer">AppHost Configuration and WebServices implementation</a> is used in all:</p><ul><li>.NET 5.0 Server</li><li><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core running on .NET Framework</li><li><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web App (.NET Framework)</li><li>HttpListener Self-Host (.NET Framework)</li></ul><p>The primary advantage of this is simplicity, in both effort and cognitive overhead for creating Services that target multiple platforms, reuse of existing knowledge and investments in using ServiceStack libraries and features as well as significantly reduced migration efforts for porting existing .NET Framework code-bases to run on .NET Core where it enjoys near perfect source code compatibility.</p><p>ServiceStack&#39;s exceptional source compatibility is visible in our new .NET 5.0 and .NET Framework project templates where all templates utilize the same recommended <a href="/physical-project-structure.html">Physical Project Structure</a>, reference the same NuGet packages, share the same source code for its Server and Client App implementations as well as Client and Server Unit and Integration Tests.</p><p>The primary difference between the .NET Core and .NET Framework project templates is how ServiceStack&#39;s <code>AppHost</code> is initialized, in <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> it&#39;s done in <code>Global.asax</code> whilst for .NET Core it&#39;s registered in .NET Core&#39;s pipeline as standard. The <code>.csproj</code> are also different with .NET Core using MSBuild&#39;s new and minimal human-friendly format and the <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Framework templates continuing to use <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>&#39;s classic project format for compatibility with older VS .NET versions.</p><h2 id="new-net-5-0-project-templates" tabindex="-1">New .NET 5.0 Project Templates <a class="header-anchor" href="#new-net-5-0-project-templates" aria-hidden="true">#</a></h2><p>There are <strong>11 .NET 5.0 project templates</strong> for each of ServiceStack&#39;s most popular starting templates. Each .NET 5.0 template has an equivalent .NET Framework template except for ServiceStack <a href="https://sharpscript.net/docs/sharp-apps" target="_blank" rel="noopener noreferrer">Sharp Apps</a> which is itself a pre-built .NET 5.0 App that lets you develop Web Applications and HTTP APIs on-the-fly without any compilation.</p><p>All .NET 5.0 Templates can be developed using your preferred choice of either VS Code, <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> or JetBrains Project Rider on your preferred Desktop OS. Given the diverse ecosystem used to develop .NET Core Applications, the new Project Templates are being maintained on GitHub and made available via our new <a href="/web-new.html">x new</a> command-line utility, installable from npm with:</p><div class="language-bash"><pre><code>$ dotnet tool <span class="token function">install</span> --global x 
</code></pre></div><p>This makes the <code>x</code> .NET Core tool globally available which can be run without arguments to view all templates available:</p>`,27),r=n(`<h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><p>That can be used to create new projects with:</p><div class="language-bash"><pre><code>x new <span class="token variable"><span class="token variable">\`</span><span class="token operator">&lt;</span>template-name<span class="token operator">&gt;</span><span class="token variable">\`</span></span> <span class="token variable"><span class="token variable">\`</span><span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span><span class="token variable">\`</span></span>
</code></pre></div><p>Example of creating a new <strong>Vue SPA</strong> project called <strong>Acme</strong>:</p><div class="language-bash"><pre><code>$ x new vue-spa Acme
</code></pre></div><p>The resulting <code>Acme.sln</code> can be opened in VS 2017 which will automatically restore and install both the .NET and npm packages upon first load and build. This can take a while to install all client and server dependencies, once finished the <code>wwwroot</code> folder will be populated with your generated Webpack App contained within a <code>/dist</code> folder alongside a generated <code>index.html</code> page. After these are generated you can run your App with <strong>F5</strong> to run your project as normal:</p><p><img src="https://docs.servicestack.net/images/ssvs/dotnet-new-spa-files.png" alt=""></p><p>If using JetBrains Rider the npm packages can be installed by opening <code>package.json</code> and clicking on the <strong>&quot;npm install&quot;</strong> tooltip on the <strong>bottom right</strong>. In VS Code you&#39;ll need to run <code>npm install</code> manually from the command-line.</p><h2 id="net-core-live-demos" tabindex="-1">.NET Core Live Demos <a class="header-anchor" href="#net-core-live-demos" aria-hidden="true">#</a></h2><p>To showcase ServiceStack features running on .NET Core we&#39;ve forked several of our existing <a href="https://github.com/ServiceStackApps/LiveDemos" target="_blank" rel="noopener noreferrer">Live Demos</a> and ported them to .NET Core and listed them side-by-side with their original <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> 4.5 code-bases so they can be easily compared.</p><p>The Live Demos cover a broad spectrum of ServiceStack features including:</p><h3 id="multi-stage-docker-builds" tabindex="-1">Multi-stage Docker Builds <a class="header-anchor" href="#multi-stage-docker-builds" aria-hidden="true">#</a></h3><p>The <a href="/deploy-netcore-docker-aws-ecs.html">.NET Core Apps deployed using Docker</a> use <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Team&#39;s <a href="https://docs.microsoft.com/en-us/dotnet/core/docker/building-net-docker-images#your-first-aspnet-core-docker-app" target="_blank" rel="noopener noreferrer">recommended multi-stage Docker Builds</a> where the App is built inside an <code>aspnetcore-build</code> Docker container with its published output copied inside a new <code>aspnetcore</code> runtime Docker container:</p><div class="language-docker"><pre><code><span class="token instruction"><span class="token keyword">FROM</span> mcr.microsoft.com/dotnet/core/sdk:3.1 <span class="token keyword">AS</span> build</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token comment"># copy csproj and restore as distinct layers</span>
<span class="token instruction"><span class="token keyword">COPY</span> src/*.sln .</span>
<span class="token instruction"><span class="token keyword">COPY</span> src/Chat/*.csproj ./Chat/</span>
<span class="token instruction"><span class="token keyword">RUN</span> dotnet restore</span>

<span class="token comment"># copy everything else and build app</span>
<span class="token instruction"><span class="token keyword">COPY</span> src/Chat/. ./Chat/</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app/Chat</span>
<span class="token instruction"><span class="token keyword">RUN</span> dotnet publish -c Release -o out</span>

<span class="token instruction"><span class="token keyword">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:3.1 <span class="token keyword">AS</span> runtime</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">build</span></span> /app/Chat/out ./</span>
<span class="token instruction"><span class="token keyword">ENV</span> ASPNETCORE_URLS http://*:5000</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;dotnet&quot;</span>, <span class="token string">&quot;Chat.dll&quot;</span>]</span>
</code></pre></div><p>The smaller footprint required by the <code>aspnetcore</code> runtime reduced the footprint of <a href="https://github.com/NetCoreApps/Chat" target="_blank" rel="noopener noreferrer">.NET Core Chat</a> from <strong>567MB</strong> to <strong>126MB</strong> whilst continuing to run flawlessly in AWS ECS at <a href="http://chat.netcore.io" target="_blank" rel="noopener noreferrer">chat.netcore.io</a>.</p><h3 id="net-core-web-apps" tabindex="-1">.NET Core Web Apps <a class="header-anchor" href="#net-core-web-apps" aria-hidden="true">#</a></h3><p>.NET 5.0 is also used to enable <a href="https://sharpscript.net/docs/sharp-apps" target="_blank" rel="noopener noreferrer">Sharp Apps</a> which is a new approach to dramatically simplify .NET Wep App development and provide the most productive development experience possible whilst maximizing reuse and component sharing.</p><p>Web Apps let you develop dynamic websites without needing to write any C# code or perform any app builds which dramatically reduces the cognitive overhead and conceptual knowledge required for development where the only thing front-end Web developers need to know is <a href="https://sharpscript.net/docs/syntax" target="_blank" rel="noopener noreferrer">ServiceStack #Script Syntax</a> and <a href="https://sharpscript.net/docs/filters-reference" target="_blank" rel="noopener noreferrer">what scripts are available</a> to call. Because of #Script&#39;s high-fidelity with JavaScript, developing a Website with Templates will be instantly familiar to JavaScript devs despite calling and binding directly to .NET APIs behind the scenes.</p><h4 id="web-app-examples" tabindex="-1"><a href="https://gist.github.com/gistlyn/f555677c98fb235dccadcf6d87b9d098#live-demos#live-demos" target="_blank" rel="noopener noreferrer">Web App Examples</a> <a class="header-anchor" href="#web-app-examples" aria-hidden="true">#</a></h4><p>To illustrate the various features available we&#39;ve developed a number of Web Apps examples to showcase the different kind of Apps that can easily be developed. The source code for each app is available from <a href="https://github.com/sharp-apps" target="_blank" rel="noopener noreferrer">github.com/NetCoreWebApps</a>. Each app runs the same unmodified <a href="https://github.com/ServiceStack/Web" target="_blank" rel="noopener noreferrer">Web App Binary</a> that&#39;s also used in the Bare Web App project above.</p><p>You can quickly get started by creating a Web App from the project template:</p><div class="language-bash"><pre><code>$ dotnet-new bare-app ProjectName
</code></pre></div><h2 id="run-asp-net-core-apps-on-the-net-framework" tabindex="-1">Run <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Apps on the .NET Framework <a class="header-anchor" href="#run-asp-net-core-apps-on-the-net-framework" aria-hidden="true">#</a></h2><p>A primary use-case prevented from having unified NuGet packages containing both <strong>.NET Standard</strong> and <strong>.NET Framework</strong> builds is being able to run <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Apps on the <strong>.NET Framework</strong> which stems from:</p><ul><li><code>net45</code> - Contains support for running <strong><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a></strong> Web or Self-Hosting <strong>HttpListener</strong> App Hosts</li><li><code>netstandard2.0</code> - Contains support for only running on <strong><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core</strong> App Hosts</li></ul><p>Where the <code>net45</code> builds always get used when they&#39;re added to any <strong>.NET Framework</strong> project. To support running <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Apps on the .NET Framework you can use the <code>.Core</code> NuGet packages which contains only the <strong>.NET Standard 2.0</strong> builds in order to force .NET Framework projects to use <strong>.NET Standard 2.0</strong> builds. Currently the complete list of <code>.Core</code> packages which contains only <strong>.NET Standard 2.0</strong> builds include:</p><ul><li>ServiceStack.Text.Core</li><li>ServiceStack.Interfaces.Core</li><li>ServiceStack.Client.Core</li><li>ServiceStack.HttpClient.Core</li><li>ServiceStack.Core</li><li>ServiceStack.Common.Core</li><li>ServiceStack.Mvc.Core</li><li>ServiceStack.Server.Core</li><li>ServiceStack.Redis.Core</li><li>ServiceStack.OrmLite.Core</li><li>ServiceStack.OrmLite.Sqlite.Core</li><li>ServiceStack.OrmLite.SqlServer.Core</li><li>ServiceStack.OrmLite.PostgreSQL.Core</li><li>ServiceStack.OrmLite.MySql.Core</li><li>ServiceStack.OrmLite.MySqlConnector.Core</li><li>ServiceStack.Aws.Core</li><li>ServiceStack.Azure.Core</li><li>ServiceStack.RabbitMq.Core</li><li>ServiceStack.Api.OpenApi.Core</li><li>ServiceStack.Admin.Core</li><li>ServiceStack.Stripe.Core</li><li>ServiceStack.Kestrel</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Ultimately support for whether a <strong>.NET Standard 2.0</strong> library will run on the .NET Framework depends on whether external dependencies also support this scenario which as it&#39;s a more niche use-case, will be a less tested scenario</p></div><p>Other issues from being a less popular scenario is not being able to reference the <a href="https://www.nuget.org/packages/Microsoft.AspNetCore.All" target="_blank" rel="noopener noreferrer">Microsoft.AspNetCore.All</a> meta package which only supports .NET Core 2.1 projects, instead <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> .NET Standard packages will need to be referenced individually.</p><p>To make it as easy as possible to get started you can use the <a href="https://github.com/NetFrameworkCoreTemplates" target="_blank" rel="noopener noreferrer">NetFrameworkCoreTemplates</a> containing popular starting templates for running <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Apps on .NET Framework (default v4.7) which as a convention all have the <code>-corefx</code> suffix:</p><ul><li><a href="https://github.com/NetFrameworkCoreTemplates/web-corefx" target="_blank" rel="noopener noreferrer">web-corefx</a> - .NET Framework <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Website</li><li><a href="https://github.com/NetFrameworkCoreTemplates/empty-corefx" target="_blank" rel="noopener noreferrer">empty-corefx</a> - .NET Framework <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Single Project Website</li><li><a href="https://github.com/NetFrameworkCoreTemplates/selfhost-corefx" target="_blank" rel="noopener noreferrer">selfhost-corefx</a> - .NET Framework <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core self-hosting Console App</li><li><a href="https://github.com/NetFrameworkCoreTemplates/mvc-corefx" target="_blank" rel="noopener noreferrer">mvc-corefx</a> - .NET Framework <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core MVC Website</li><li><a href="https://github.com/NetFrameworkCoreTemplates/razor-corefx" target="_blank" rel="noopener noreferrer">razor-corefx</a> - .NET Framework <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Website with ServiceStack.Razor</li><li><a href="https://github.com/NetFrameworkCoreTemplates/templates-corefx" target="_blank" rel="noopener noreferrer">templates-corefx</a> - .NET Framework <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Templates Bootstrap Website</li></ul><p>This will let you create an <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core App running on the .NET Framework v4.7 with the <a href="/dotnet-tool.html">dotnet tool</a>:</p><div class="language-bash"><pre><code>$ dotnet tool <span class="token function">install</span> --global x 

$ x new web-corefx AcmeNetFx
</code></pre></div><p>Which can then be opened in your preferred <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> or Project Rider C# IDE.</p><h3 id="servicestack-features-that-won-t-be-supported-in-net-core" tabindex="-1">ServiceStack features that won&#39;t be supported in .NET Core <a class="header-anchor" href="#servicestack-features-that-won-t-be-supported-in-net-core" aria-hidden="true">#</a></h3><p>Whilst we were able to make most of ServiceStack&#39;s features available in .NET Core there are a number of features that we&#39;re not able to support, these include:</p><ul><li><strong>HttpListener</strong> inc. all .NET 4.5 Self Host AppHosts - replaced with .NET Core&#39;s Kestrel</li><li><strong>SOAP Support</strong> inc. WSDLs, XSDs - missing WCF implementations in .NET Core</li><li><strong>Mini Profiler</strong> - tightly coupled to <a href="http://System.Web" target="_blank" rel="noopener noreferrer">System.Web</a></li><li><strong>Markdown Razor</strong> - CodeDom not available in .NET Core (vanilla Markdown still supported)</li><li><strong>ServiceStack.Authentication.OAuth2</strong> - DotNetOpenAuth dependency not available in .NET Core</li><li><strong>ServiceStack.Authentication.OpenId</strong> - DotNetOpenAuth dependency not available in .NET Core</li><li><strong>MVC FluentValidation Validators</strong> - tightly coupled to old <a href="http://System.Web" target="_blank" rel="noopener noreferrer">System.Web</a> MVC</li><li><strong>ServiceStack.Razor</strong> inc all existing <code>Html.*</code> helpers - tightly coupled to <a href="http://System.Web" target="_blank" rel="noopener noreferrer">System.Web</a> Razor</li></ul><p>Whilst we lost our beloved <strong>ServiceStack.Razor</strong> support we developed a completely new implementation backed by .NET Core MVC where we were able to implement most of ServiceStack.Razor user-facing features so porting should still be relatively straightforward with some minor syntax and configuration changes needed. This new implementation is available in <strong>ServiceStack.Mvc</strong> package and can be seen in action in the <a href="http://razor.netcore.io" target="_blank" rel="noopener noreferrer">Razor Rockstars .NET Core demo</a>.</p><h3 id="appselfhostbase-source-compatible-self-host" tabindex="-1">AppSelfHostBase Source-compatible Self-Host <a class="header-anchor" href="#appselfhostbase-source-compatible-self-host" aria-hidden="true">#</a></h3><p>The <strong>ServiceStack.Kestrel</strong> NuGet package encapsulates .NET Core&#39;s Kestrel HTTP Server dependency behind a source-compatible <code>AppSelfHostBase</code> which can be used to create source-compatible Self Hosted Apps and is what enables the exact same .NET Framework Template&#39;s <a href="https://github.com/NetFrameworkTemplates/vue-spa-netfx/blob/master/MyApp.Tests/IntegrationTest.cs" target="_blank" rel="noopener noreferrer">Integration Tests</a> to be used in .NET Core Template&#39;s <a href="https://github.com/NetCoreTemplates/vue-spa/blob/master/MyApp.Tests/IntegrationTest.cs" target="_blank" rel="noopener noreferrer">Integration Tests</a>.</p><h3 id="apphostbase-net-core-module" tabindex="-1">AppHostBase .NET Core Module <a class="header-anchor" href="#apphostbase-net-core-module" aria-hidden="true">#</a></h3><p>Whilst <code>AppSelfHostBase</code> enables the same development experience for developing Self-Hosted ServiceStack Solutions, when developing .NET Core-only Web Apps we instead recommend inheriting from <code>AppHostBase</code> and registering ServiceStack as a .NET Core module in order to remain consistent with all other .NET Core solutions.</p><p>In <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> 4.5, <code>AppHostBase</code> is used to create an <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> ServiceStack Host, but in .NET Core all Web Apps are Console Apps, <code>AppHostBase</code> in this case just refers to a normal ServiceStack <code>AppHost</code> you&#39;ll use to idiomatically register your ServiceStack AppHost into .NET Core&#39;s <code>IApplicationBuilder</code> pipeline as a standard .NET Core Module.</p><h3 id="binding-to-net-core" tabindex="-1">Binding to .NET Core <a class="header-anchor" href="#binding-to-net-core" aria-hidden="true">#</a></h3><p>To see how ServiceStack integrates with .NET Core we&#39;ll walk through porting the stand-alone <a href="https://github.com/NetCoreApps/Todos" target="_blank" rel="noopener noreferrer">Todos Live Demo</a> which contains the entire implementation of a functional Todos Web App back-end in a single <a href="https://github.com/NetCoreApps/Todos/blob/master/src/Todos/Startup.cs" target="_blank" rel="noopener noreferrer">Startup.cs</a> that we created using the <strong><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Web Application (.NET Core)</strong> Empty <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> Template.</p><p>The <code>Program</code> class remains unchanged from the template and defines the entry-point for your Console Application that just Configures and Starts a Kestrel HTTP Server behind an IIS Reverse Proxy via the <code>AspNetCoreModule</code> HTTP Handler configured in your <strong>web.config</strong>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebHostBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">UseKestrel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">UseContentRoot</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">UseIISIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        host<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="net-core-startup" tabindex="-1">.NET Core Startup <a class="header-anchor" href="#net-core-startup" aria-hidden="true">#</a></h3><p>The <code>Startup</code> class is what you&#39;ll use to configure your .NET App. The only difference from the default <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> Template is the single line to Register your ServiceStack AppHost in .NET Core&#39;s <code>IApplicationBuilder</code> pipeline:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IConfiguration</span> Configuration <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">Startup</span><span class="token punctuation">(</span><span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>

    <span class="token comment">// This method gets called by the runtime. Use this method to add services to the container.</span>
    <span class="token comment">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IHostingEnvironment</span> env<span class="token punctuation">,</span> <span class="token class-name">ILoggerFactory</span> loggerFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        loggerFactory<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//Register your ServiceStack AppHost as a .NET Core module</span>
        app<span class="token punctuation">.</span><span class="token function">UseServiceStack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span> <span class="token punctuation">{</span> 
            AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetCoreAppSettings</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span> <span class="token comment">// Use **appsettings.json** and config sources</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

        app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This shows the minimum code required to configure ServiceStack to run in .NET Core. It works similarly to the <a href="https://github.com/ServiceStackApps/Todos/blob/fdcffd37d4ad49daa82b01b5876a9f308442db8c/src/Todos/Web.config#L37" target="_blank" rel="noopener noreferrer">Wildcard HttpHandler configuration</a> in your <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> <strong>Web.config</strong> telling <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> to route all requests to ServiceStack. The difference here is that ServiceStack is registered in a pipeline and only receives requests that weren&#39;t handled in any of the preceding modules. Likewise ServiceStack will just call the next Module in the pipeline for any Requests that it&#39;s not configured to handle, this is in contrast to <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> 4.5 where ServiceStack was designed to handle all requests it receives, so it instead returns a <code>NotFoundHandler</code> and responds with a 404 Response.</p><p>In the above configuration any Request that ServiceStack doesn&#39;t handle gets passed on to the next module registered, which in this case will return a <code>Hello World!</code> plain text response.</p><h3 id="net-core-apphost-integration" tabindex="-1">.NET Core AppHost Integration <a class="header-anchor" href="#net-core-apphost-integration" aria-hidden="true">#</a></h3><p>Once inside your <code>AppHost</code> you&#39;re back in ServiceStack-land where it&#39;s business as usual and your AppHost configuration remains the same as before:</p><div class="language-csharp"><pre><code><span class="token comment">// Create your ServiceStack Web Service with a singleton AppHost</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostBase</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// Initializes your AppHost Instance, with the Service Name and assembly containing the Services</span>
    <span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;Backbone.js TODO&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TodoService</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token comment">// Configure your AppHost with the necessary configuration and dependencies your App needs</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//Register Redis Client Manager singleton in ServiceStack&#39;s built-in Func IOC</span>
        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicRedisClientManager</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This was all it took to port the <a href="https://github.com/NetCoreApps/Todos/blob/c742da45c9a70217980c2f2b323813fe7821df06/src/Todos/Startup.cs#L61-L110" target="_blank" rel="noopener noreferrer">Todos back-end Services</a> to run on .NET Core which was able to reuse the entire existing Service implementation as-is.</p><p>The other change needed outside the Todos ServiceStack implementation was to match .NET Core&#39;s default convention of serving static files from the <strong>WebRootPath</strong> which just required moving all static resources into the <a href="https://github.com/NetCoreApps/Todos/tree/master/src/Todos/wwwroot" target="_blank" rel="noopener noreferrer">/wwwroot</a> folder.</p><p>And with that the Todos port was complete, which you can view from the deployed location below:</p><ul><li><a href="http://todos.netcore.io" target="_blank" rel="noopener noreferrer">http://todos.netcore.io</a> - Linux / Docker / nginx / .NET Core</li></ul><h2 id="seamless-integration-with-net-core" tabindex="-1">Seamless Integration with .NET Core <a class="header-anchor" href="#seamless-integration-with-net-core" aria-hidden="true">#</a></h2><p>In addition to running flawlessly on .NET Core we&#39;re also actively striving to find how we can best integrate with and leverage the surrounding .NET Core ecosystem and have made several changes to that end:</p><h3 id="camelcase" tabindex="-1">CamelCase <a class="header-anchor" href="#camelcase" aria-hidden="true">#</a></h3><p>The JSON and JSV Text serializers are following .NET Core&#39;s default convention to use <strong>camelCase</strong> properties by default. This can be reverted back to <strong>PascalCase</strong> with:</p><div class="language-csharp"><pre><code><span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span> UseCamelCase <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>We also agree with this default, .NET Core seems to be centered around embracing the surrounding developer ecosystem where .NET&#39;s default <strong>PascalCase</strong> protrudes in a sea of <strong>camelCase</strong> and <strong>snake_case</strong> JSON APIs. This won&#39;t have an impact on .NET Service Clients or Text Serialization which supports case-insensitive properties, however Ajax and JS clients will need to be updated to use matching properties. You can use <a href="/ss-utils-js.html#normalize-and-normalizekey">ss-utils normalize()</a> methods to help with handling both conventions by recursively normalizing and converting all properties to <strong>lowercase</strong>.</p><h3 id="net-core-container-adapter" tabindex="-1">.NET Core Container Adapter <a class="header-anchor" href="#net-core-container-adapter" aria-hidden="true">#</a></h3><p>Like ServiceStack, .NET Core now has a built-in IOC where you can register any dependencies you need in your Startup <code>ConfigureServices()</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">,</span> Foo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IScoped<span class="token punctuation">,</span> Scoped<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IBar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bar</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="scoped-dependencies" tabindex="-1">Scoped Dependencies <a class="header-anchor" href="#scoped-dependencies" aria-hidden="true">#</a></h4><p>In .NET Core ServiceStack is pre-configured to use a <code>NetCoreContainerAdapter</code> where it will also resolve any dependencies declared in your .NET Core Startup using <code>app.ApplicationServices</code>. One side-effect of this is that when resolving <strong>Scoped</strong> dependencies it resolves them in a Singleton scope instead of the Request Scope had they instead been resolved from <code>context.RequestServices.GetService&lt;T&gt;()</code>.</p><p>One way to be able to inject scoped dependencies into your Services is to register the <code>IHttpContextAccessor</code> where they&#39;ll be resolved from <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core&#39;s RequestServices context:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
     services<span class="token punctuation">.</span><span class="token function">AddHttpContextAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IScoped<span class="token punctuation">,</span> Scoped<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Otherwise if you need to resolve Request Scoped .NET Core dependencies you can resolve them from <code>IRequest</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">MyRequest</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> requestScope <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryResolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IScoped<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Alternatively you can register the dependencies in ServiceStack&#39;s IOC instead, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAutoWiredAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Scoped<span class="token punctuation">,</span>IScoped<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ReusedWithin</span><span class="token punctuation">(</span>ReuseScope<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where they&#39;d be resolved within ServiceStack&#39;s Request Scope instead of via <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core&#39;s RequestServices.</p><h3 id="asp-net-core-iserviceprovider-apis" tabindex="-1"><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core IServiceProvider APIs <a class="header-anchor" href="#asp-net-core-iserviceprovider-apis" aria-hidden="true">#</a></h3><p>Registering dependencies in ServiceStack&#39;s IOC are only available within ServiceStack, you can access <strong>scoped <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core dependencies</strong> and create Custom IOC Scopes using the <code>IRequest</code> APIs below:</p><ul><li><code>IRequest.TryResolveScoped&lt;T&gt;()</code></li><li><code>IRequest.TryResolveScoped()</code></li><li><code>IRequest.ResolveScoped&lt;T&gt;()</code></li><li><code>IRequest.ResolveScoped()</code></li><li><code>IRequest.CreateScope()</code></li><li><code>IRequest.GetServices()</code></li><li><code>IRequest.GetServices&lt;T&gt;()</code></li></ul><p>Which can be used to create custom scopes that utilizes <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Entity Framework Identity classes in your ServiceStack Services:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> RoleManager <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RoleManager<span class="token punctuation">&lt;</span>IdentityRole<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> UserManager <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserManager<span class="token punctuation">&lt;</span>ApplicationUser<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> managerUser <span class="token operator">=</span> <span class="token keyword">await</span> UserManager<span class="token punctuation">.</span><span class="token function">FindByEmailAsync</span><span class="token punctuation">(</span><span class="token string">&quot;manager@gmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>managerUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">assertResult</span><span class="token punctuation">(</span><span class="token keyword">await</span> UserManager<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApplicationUser</span> <span class="token punctuation">{</span>
            DisplayName <span class="token operator">=</span> <span class="token string">&quot;Test Manager&quot;</span><span class="token punctuation">,</span>
            Email <span class="token operator">=</span> <span class="token string">&quot;manager@gmail.com&quot;</span><span class="token punctuation">,</span>
            UserName <span class="token operator">=</span> <span class="token string">&quot;manager@gmail.com&quot;</span><span class="token punctuation">,</span>
            FirstName <span class="token operator">=</span> <span class="token string">&quot;Test&quot;</span><span class="token punctuation">,</span>
            LastName <span class="token operator">=</span> <span class="token string">&quot;Manager&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;p@55wOrd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        managerUser <span class="token operator">=</span> <span class="token keyword">await</span> UserManager<span class="token punctuation">.</span><span class="token function">FindByEmailAsync</span><span class="token punctuation">(</span><span class="token string">&quot;manager@gmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> UserManager<span class="token punctuation">.</span><span class="token function">AddToRoleAsync</span><span class="token punctuation">(</span>managerUser<span class="token punctuation">,</span> <span class="token string">&quot;Manager&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="register-asp-net-core-dependencies-in-apphost" tabindex="-1">Register <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core dependencies in AppHost <a class="header-anchor" href="#register-asp-net-core-dependencies-in-apphost" aria-hidden="true">#</a></h3><p>Any dependencies registered .NET Core Startup are also available to ServiceStack but dependencies registered in ServiceStack&#39;s IOC are <strong>only</strong> visible to ServiceStack.</p><p>This is due to the limitation of <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core requiring all dependencies needing to be registered in <code>ConfigureServices()</code> before any App Modules are loaded and why dependencies registered in ServiceStack&#39;s AppHost <code>Configure()</code> are only accessible from ServiceStack and not the rest of <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core.</p><p>But in <a href="/modular-startup.html">Modular Startup</a> Apps you can override <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core&#39;s <code>IConfigureServices.Configure(IServiceCollection)</code> method in your AppHost to register IOC dependencies where they&#39;ll now be accessible to both ServiceStack and the rest of your <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core App, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisManagerPool</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> redisManager <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>We can take this even further and have your ServiceStack AppHost implement <code>IConfigureApp</code> where it can also contain the logic to register itself as an alternative to registering ServiceStack in your <code>Startup</code> class, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostBase</span><span class="token punctuation">,</span> <span class="token class-name">IConfigureApp</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">UseServiceStack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span>
        <span class="token punctuation">{</span>
            AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetCoreAppSettings</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/***/</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This will let you drop-in your custom <code>AppHost</code> into a <a href="/modular-startup.html">ModularStartup enabled ASP.NET Core App</a> to enable the same &quot;no-touch&quot; auto-registration.</p><h3 id="net-core-iappsettings-adapter" tabindex="-1">.NET Core IAppSettings Adapter <a class="header-anchor" href="#net-core-iappsettings-adapter" aria-hidden="true">#</a></h3><p>Most .NET Core Templates are also configured to use the new <code>NetCoreAppSettings</code> adapter to utilize .NET Core&#39;s new <code>IConfiguration</code> config model in ServiceStack by initializing the <code>AppHost</code> with .NET Core&#39;s pre-configured <code>IConfiguration</code> that&#39;s injected into the <a href="https://github.com/NetCoreTemplates/vue-spa/blob/master/MyApp/Startup.cs" target="_blank" rel="noopener noreferrer">Startup.cs</a> constructor, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IConfiguration</span> Configuration <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">Startup</span><span class="token punctuation">(</span><span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IHostingEnvironment</span> env<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">UseServiceStack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span> <span class="token punctuation">{</span>
            AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetCoreAppSettings</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This lets you use <strong>appsettings.json</strong> and .NET Core&#39;s other Configuration Sources from ServiceStack&#39;s <code>IAppSettings</code> API where it continues to resolve both primitive values and complex Types, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">bool</span></span> debug <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;DebugMode&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MyConfig</span> myConfig <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyConfig<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>  ghScopes <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;oauth.github.Scopes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fbScopes <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetList</span><span class="token punctuation">(</span><span class="token string">&quot;oauth.facebook.Permissions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>But instead of a single JSV string value, you&#39;ll need to use the appropriate JSON data type, e.g:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
    <span class="token property">&quot;DebugMode&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    
    <span class="token property">&quot;MyConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Kurt&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Age&quot;</span><span class="token operator">:</span> <span class="token number">27</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;oauth.facebook.Permissions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;oauth.github.Scopes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="consistent-registration-apis" tabindex="-1">Consistent Registration APIs <a class="header-anchor" href="#consistent-registration-apis" aria-hidden="true">#</a></h3><p>To retain the same nomenclature that .NET Core uses to register dependencies we&#39;ve added several <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/ContainerNetCoreExtensions.cs" target="_blank" rel="noopener noreferrer">Overloads to ServiceStack&#39;s IOC</a> letting you use a single consistent API to register dependencies in both ServiceStack and .NET Core IOC&#39;s making it easy to move registrations between the two, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">,</span> Foo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IScoped<span class="token punctuation">,</span> Scoped<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IBar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bar</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>ServiceStack&#39;s <code>Container</code> also implements .NET Core&#39;s <code>IServiceProvider</code> interface giving it access to .NET Core&#39;s convenience extension methods for resolving dependencies, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> foo <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="servicestack-logging-adapters" tabindex="-1">ServiceStack.Logging Adapters <a class="header-anchor" href="#servicestack-logging-adapters" aria-hidden="true">#</a></h3><p>The default Logging is an example of an abstraction which didn&#39;t make sense to maintain a separate implementation as any adapter would only be able to support logging within ServiceStack. With logging you&#39;ll want to configure it one place and have it apply to your whole application, so we&#39;ve instead pre-configured ServiceStack.Logging to proxy all messages to .NET Core&#39;s <a href="https://docs.asp.net/en/latest/fundamentals/logging.html" target="_blank" rel="noopener noreferrer">logging abstraction</a> where you&#39;ll only need to configure logging once in <code>Startup</code> and have it handle all logging solution-wide.</p><h3 id="net-standard-2-0-logging-providers" tabindex="-1">.NET Standard 2.0 Logging Providers <a class="header-anchor" href="#net-standard-2-0-logging-providers" aria-hidden="true">#</a></h3><p>Whilst our recommendation is to use .NET Core&#39;s Logging Abstraction, if you prefer you can avoid this abstraction and configure logging with ServiceStack directly with the logging providers below which maintains <strong>.NET Standard 2.0</strong> versions:</p><ul><li>ServiceStack.Logging.Serilog</li><li>ServiceStack.Logging.Slack</li></ul><h3 id="webrootpath-and-contentrootpath" tabindex="-1">WebRootPath and ContentRootPath <a class="header-anchor" href="#webrootpath-and-contentrootpath" aria-hidden="true">#</a></h3><p>Classic <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> serves static resources from your Host project&#39;s folder but in .NET Core this has been moved to your App&#39;s <code>/wwwroot</code> folder, separated from your App&#39;s non-public assets which remain in your projects root folder.</p><p>To match this convention we&#39;ve configured the read-only <code>VirtualFileSources</code> to point to the <code>/wwwroot</code><strong>WebRootPath</strong> whilst the read/write <code>IVirtualFiles</code> is configured to your projects <strong>ContentRootPath</strong> folder.</p><h4 id="mapprojectpath" tabindex="-1">MapProjectPath <a class="header-anchor" href="#mapprojectpath" aria-hidden="true">#</a></h4><p>As ServiceStack can be hosted in variety of different platforms encompassing several AppHost&#39;s, we&#39;ve added a new <code>IAppHost.MapProjectPath()</code> API that can be used to consistently resolve an absolute file path using a <strong>virtualPath</strong> from your Host Project root folder, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token operator">=</span> appHost<span class="token punctuation">.</span><span class="token function">MapProjectPath</span><span class="token punctuation">(</span><span class="token string">&quot;~/path/to/settings.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="hosting-asp-net-core-apps-on-custom-path" tabindex="-1">Hosting <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Apps on Custom Path <a class="header-anchor" href="#hosting-asp-net-core-apps-on-custom-path" aria-hidden="true">#</a></h3><p>Use the <code>PathBase</code> property on AppHost for hosting a ServiceStack .NET Core App at a custom path, e.g:</p><div class="language-csharp"><pre><code>app<span class="token punctuation">.</span><span class="token function">UseServiceStack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span> <span class="token punctuation">{</span>
    PathBase <span class="token operator">=</span> <span class="token string">&quot;/api&quot;</span><span class="token punctuation">,</span>
    AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetCoreAppSettings</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Resulting in both <code>Config.PathBase</code> and <code>Config.HandlerFactoryPath</code> getting populated with and without the <code>/</code> suffix:</p><div class="language-csharp"><pre><code>Config<span class="token punctuation">.</span>PathBase           <span class="token comment">//= /api</span>
Config<span class="token punctuation">.</span>HandlerFactoryPath <span class="token comment">//= api</span>
</code></pre></div><p>When necessary the <code>PathBase</code> property is available in both server rendered views:</p><div><ul><li><code>{{PathBase}}</code> variable in <a href="https://sharpscript.net/docs/sharp-pages" target="_blank" rel="noopener noreferrer">#Script Pages</a></li><li><code>PathBase</code> in Razor Views</li></ul></div><h3 id="hostcontext-trygetcurrentrequest" tabindex="-1">HostContext.TryGetCurrentRequest() <a class="header-anchor" href="#hostcontext-trygetcurrentrequest" aria-hidden="true">#</a></h3><p><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web Applications let you resolve the <code>IRequest</code> of the current executing HTTP Request with:</p><div class="language-"><pre><code>IRequest req = HostContext.TryGetCurrentRequest();
</code></pre></div><p>Which is a wrapper over accessing the <code>HttpContext.Current</code> singleton but as there&#39;s no equivalent in HttpListener self hosts this returns <code>null</code>. .NET Core also doesn&#39;t enable singleton access to the current HttpRequest by default but can be enabled by registering:</p><div class="language-csharp"><pre><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IHttpContextAccessor<span class="token punctuation">,</span> HttpContextAccessor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Although this should only be registered if needed as it has <a href="https://github.com/aspnet/Hosting/issues/793" target="_blank" rel="noopener noreferrer">non-trivial performance costs</a>.</p><h3 id="ormlite-like-queries" tabindex="-1">OrmLite LIKE Queries <a class="header-anchor" href="#ormlite-like-queries" aria-hidden="true">#</a></h3><p>One of our primary goals with ServiceStack providers is compatibility which lets you easily switch providers without having to change any call-site logic using the abstraction.</p><p>One case where this has an impact on performance is in OrmLite <strong>LIKE</strong> queries where some RDBMS providers will perform case-sensitive LIKE queries so in order to retain consistent behavior across all RDBMS providers OrmLite generates queries using <code>UPPER(Field)</code> to ensure case-insensitive searches.</p><p>However given .NET Core&#39;s strong focus on performance we&#39;ve removed this feature and reverted to the behavior of the underlying RDBMS so it no longer invalidates any DB Indexes on Fields. A more efficient alternative to get case-insensitive LIKE queries (where it&#39;s not the default) is to use a case-insensitive collation.</p><p>This behavior also applies to AutoQuery LIKE queries and can be reverted with:</p><div class="language-csharp"><pre><code>OrmLiteConfig<span class="token punctuation">.</span>StripUpperInLike <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="register-servicestack-httphandlers-as-net-core-modules" tabindex="-1">Register ServiceStack HttpHandlers as .NET Core Modules <a class="header-anchor" href="#register-servicestack-httphandlers-as-net-core-modules" aria-hidden="true">#</a></h3><p>Under the hood ServiceStack&#39;s functionality is split into different HTTP Handlers that implements <a href="https://msdn.microsoft.com/en-us/library/ms227433.aspx" target="_blank" rel="noopener noreferrer">ASP.NET&#39;s IHttpAsyncHandler</a> and is also adapted to support HttpListener self-hosts behind ServiceStack&#39;s <code>IRequest</code> abstractions.</p><p>We&#39;re happy to report that ServiceStack&#39;s HTTP Handlers can also be registered as a .NET Core module in the <code>IApplicationBuilder</code> pipeline. This lets you for instance return the same information as ServiceStack&#39;s <a href="/debugging.html#request-info">?debug=requestinfo</a> route for any unhandled requests by registering the <code>RequestInfoHandler</code> as the last module in .NET Core&#39;s <code>IApplicationBuilder</code> pipeline, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>
<span class="token punctuation">{</span>
    <span class="token comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IHostingEnvironment</span> env<span class="token punctuation">,</span> <span class="token class-name">ILoggerFactory</span> loggerFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        loggerFactory<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        app<span class="token punctuation">.</span><span class="token function">UseServiceStack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestInfoHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Some other examples of HTTP Handlers you could use is returning an image by registering a <code>StaticFileHandler</code> configured with the <strong>virtualPath</strong> of the image (from <strong>ContentRootPath</strong>):</p><div class="language-csharp"><pre><code>app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticFileHandler</span><span class="token punctuation">(</span><span class="token string">&quot;wwwroot/img/404.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Or you can even render an MVC Razor View by returning it in a <code>RazorHandler</code>, e.g:</p><div class="language-csharp"><pre><code>app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RazorHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will render the <code>/wwwroot/login.cshtml</code> Razor Page using the <a href="/netcore-razor.html">MVC Smart Razor Pages support</a></p><h1 id="community-resources" tabindex="-1">Community Resources <a class="header-anchor" href="#community-resources" aria-hidden="true">#</a></h1><ul><li><a href="https://medium.com/@williams.jackj/asp-net-core-2-react-docker-servicestack-96be42933e86" target="_blank" rel="noopener noreferrer">ASP.NET Core 2 + React + Docker + ServiceStack</a> by <a href="https://twitter.com/jackkedd" target="_blank" rel="noopener noreferrer">@jackkedd</a></li></ul>`,143),g=`{"title":".NET Core Overview","description":"","frontmatter":{"title":".NET Core Overview","slug":"netcore"},"headers":[{"level":3,"title":".NET Core - the future of .NET on Linux","slug":"net-core-the-future-of-net-on-linux"},{"level":3,"title":"ServiceStack .NET Core Apps running in Docker","slug":"servicestack-net-core-apps-running-in-docker"},{"level":3,"title":"Exceptional Code reuse","slug":"exceptional-code-reuse"},{"level":2,"title":"New .NET 5.0 Project Templates","slug":"new-net-5-0-project-templates"},{"level":3,"title":"Usage","slug":"usage"},{"level":2,"title":".NET Core Live Demos","slug":"net-core-live-demos"},{"level":3,"title":"Multi-stage Docker Builds","slug":"multi-stage-docker-builds"},{"level":3,"title":".NET Core Web Apps","slug":"net-core-web-apps"},{"level":2,"title":"Run ASP.NET Core Apps on the .NET Framework","slug":"run-asp-net-core-apps-on-the-net-framework"},{"level":3,"title":"ServiceStack features that won't be supported in .NET Core","slug":"servicestack-features-that-won-t-be-supported-in-net-core"},{"level":3,"title":"AppSelfHostBase Source-compatible Self-Host","slug":"appselfhostbase-source-compatible-self-host"},{"level":3,"title":"AppHostBase .NET Core Module","slug":"apphostbase-net-core-module"},{"level":3,"title":"Binding to .NET Core","slug":"binding-to-net-core"},{"level":3,"title":".NET Core Startup","slug":"net-core-startup"},{"level":3,"title":".NET Core AppHost Integration","slug":"net-core-apphost-integration"},{"level":2,"title":"Seamless Integration with .NET Core","slug":"seamless-integration-with-net-core"},{"level":3,"title":"CamelCase","slug":"camelcase"},{"level":3,"title":".NET Core Container Adapter","slug":"net-core-container-adapter"},{"level":3,"title":"ASP.NET Core IServiceProvider APIs","slug":"asp-net-core-iserviceprovider-apis"},{"level":3,"title":"Register ASP.NET Core dependencies in AppHost","slug":"register-asp-net-core-dependencies-in-apphost"},{"level":3,"title":".NET Core IAppSettings Adapter","slug":"net-core-iappsettings-adapter"},{"level":3,"title":"Consistent Registration APIs","slug":"consistent-registration-apis"},{"level":3,"title":"ServiceStack.Logging Adapters","slug":"servicestack-logging-adapters"},{"level":3,"title":".NET Standard 2.0 Logging Providers","slug":"net-standard-2-0-logging-providers"},{"level":3,"title":"WebRootPath and ContentRootPath","slug":"webrootpath-and-contentrootpath"},{"level":3,"title":"Hosting ASP.NET Core Apps on Custom Path","slug":"hosting-asp-net-core-apps-on-custom-path"},{"level":3,"title":"HostContext.TryGetCurrentRequest()","slug":"hostcontext-trygetcurrentrequest"},{"level":3,"title":"OrmLite LIKE Queries","slug":"ormlite-like-queries"},{"level":3,"title":"Register ServiceStack HttpHandlers as .NET Core Modules","slug":"register-servicestack-httphandlers-as-net-core-modules"}],"relativePath":"netcore.md","lastUpdated":1634495308426}`,c={};function i(l){return(u,d)=>(a(),s("div",null,[p,t(o(e)),r]))}const m=Object.assign(c,{setup:i});export{g as __pageData,m as default};
