import{_ as t,c as e,o,a as s,b as n,e as a}from"./app.14440598.js";const C='{"title":"An implementation-free logging API for .Net","description":"","frontmatter":{"title":"An implementation-free logging API for .Net"},"headers":[{"level":2,"title":"Download on NuGet","slug":"download-on-nuget"},{"level":3,"title":"Why a Logging Interface?","slug":"why-a-logging-interface"},{"level":3,"title":"Logging with Context","slug":"logging-with-context"},{"level":2,"title":"Built-in Loggers","slug":"built-in-loggers"},{"level":2,"title":"NLog","slug":"nlog-1"},{"level":2,"title":"Log4Net","slug":"log4net-1"},{"level":2,"title":"Event Log","slug":"event-log"},{"level":2,"title":"Elmah","slug":"elmah-1"},{"level":2,"title":"Slack","slug":"slack"},{"level":2,"title":"Serilog","slug":"serilog"},{"level":2,"title":"Usage Example","slug":"usage-example"},{"level":2,"title":"Community Logging Providers","slug":"community-logging-providers"},{"level":3,"title":"ServiceStack.Seq.RequestLogsFeature","slug":"servicestack-seq-requestlogsfeature"}],"relativePath":"logging.md","lastUpdated":1634495308422}',p={},c=s('',4),l=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Logging.NLog" Version="5.*" />')]),a(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),i=n("h4",{id:"elmah",tabindex:"-1"},[n("a",{href:"https://nuget.org/packages/ServiceStack.Logging.Elmah",target:"_blank",rel:"noopener noreferrer"},"Elmah"),a(),n("a",{class:"header-anchor",href:"#elmah","aria-hidden":"true"},"#")],-1),r=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Logging.Elmah" Version="5.*" />')]),a(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),u=n("h4",{id:"log4net",tabindex:"-1"},[n("a",{href:"https://nuget.org/packages/ServiceStack.Logging.Log4Net",target:"_blank",rel:"noopener noreferrer"},"Log4Net"),a(),n("a",{class:"header-anchor",href:"#log4net","aria-hidden":"true"},"#")],-1),g=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Logging.Log4Net" Version="5.*" />')]),a(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),k=n("h4",{id:"eventlog",tabindex:"-1"},[n("a",{href:"https://nuget.org/packages/ServiceStack.Logging.EventLog",target:"_blank",rel:"noopener noreferrer"},"EventLog"),a(),n("a",{class:"header-anchor",href:"#eventlog","aria-hidden":"true"},"#")],-1),d=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Logging.EventLog" Version="5.*" />')]),a(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),h=n("h4",{id:"slacklog",tabindex:"-1"},[n("a",{href:"https://www.nuget.org/packages/ServiceStack.Logging.Slack/",target:"_blank",rel:"noopener noreferrer"},"SlackLog"),a(),n("a",{class:"header-anchor",href:"#slacklog","aria-hidden":"true"},"#")],-1),m=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Logging.Slack" Version="5.*" />')]),a(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),y=n("h4",{id:"seriloglogger",tabindex:"-1"},[n("a",{href:"https://www.nuget.org/packages/ServiceStack.Logging.Serilog/",target:"_blank",rel:"noopener noreferrer"},"SerilogLogger"),a(),n("a",{class:"header-anchor",href:"#seriloglogger","aria-hidden":"true"},"#")],-1),f=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Logging.Serilog" Version="5.*" />')]),a(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),v=s(`__VP_STATIC_START__<div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>ConsoleLogFactory</code> and <code>DebugLogFactory</code> and are already built-in and bind to .NET Framework&#39;s Console and Debug loggers.</p></div><h3 id="why-a-logging-interface" tabindex="-1">Why a Logging Interface? <a class="header-anchor" href="#why-a-logging-interface" aria-hidden="true">#</a></h3><p>Even in the spirit of <strong>Bind to interfaces, not implementations</strong>, many .NET projects still have a hard dependency to <a href="http://logging.apache.org/log4net/index.html" target="_blank" rel="noopener noreferrer">log4net</a>.</p><p>Although log4net is the standard for logging in .NET, potential problems can arise from your libraries having a hard dependency on it:</p><ul><li>Your library needs to be shipped with a third-party dependency</li><li>Potential conflicts can occur when different libraries have dependency on different versions of log4net (e.g. the 1.2.9 / 1.2.10 dependency problem).</li><li>You may want to use a different logging provider (i.e. network distributed logging)</li><li>You want your logging for Unit and Integration tests to redirect to the Console or Debug logger without any configuraiton.</li><li>Something better like <a href="http://code.google.com/p/elmah/" target="_blank" rel="noopener noreferrer">elmah</a> can come along requiring a major rewrite to take advantage of it</li></ul><p>ServiceStack.Logging solves these problems by providing an implementation-free <code>ILog</code> interface that your application logic can bind to where your Application Host project can bind to the concrete logging implementation at deploy or runtime.</p><p>ServiceStack.Logging also includes adapters for the following logging providers:</p><ul><li>Elmah</li><li>NLog</li><li>Log4Net 1.2.10+</li><li>Log4Net 1.2.9</li><li>EventLog</li><li>SlackLog</li><li>Serilog</li><li>Console Log</li><li>Debug Log</li><li>Null / Empty Log</li></ul><h3 id="logging-with-context" tabindex="-1">Logging with Context <a class="header-anchor" href="#logging-with-context" aria-hidden="true">#</a></h3><p>Support for contextual logging is available with the <code>ILogWithContext</code> interface and <code>PushProperty</code> extension method which lets you attach additional data to log messages, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">PushProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">InfoFormat</span><span class="token punctuation">(</span><span class="token string">&quot;Message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Support for the additional context was added to <code>Log4net</code>, <code>NLog</code> and <code>Serilog</code> logging providers.</p><h4 id="serilog-notes" tabindex="-1">Serilog notes <a class="header-anchor" href="#serilog-notes" aria-hidden="true">#</a></h4><p>Serilog <code>PushProperty</code> support requires <a href="https://www.nuget.org/packages/Serilog.Enrichers.Thread" target="_blank" rel="noopener noreferrer">Serilog.Enrichers.Thread</a> NuGet package and its enricher enabled, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> serilog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span>Enrich<span class="token punctuation">.</span><span class="token function">FromLogContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// additional config</span>
  <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SerilogFactory</span><span class="token punctuation">(</span>serilog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h1 id="registration-examples" tabindex="-1">Registration Examples <a class="header-anchor" href="#registration-examples" aria-hidden="true">#</a></h1><p>Once on your App Startup, either In your <code>AppHost.cs</code> or <code>Global.asax</code> file inject the concrete logging implementation that your app should use, e.g.</p><h2 id="built-in-loggers" tabindex="-1">Built-in Loggers <a class="header-anchor" href="#built-in-loggers" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token comment">//Console.WriteLine</span>
LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConsoleLogFactory</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">debugEnabled</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//Debug.WriteLine</span>
LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DebugLogFactory</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">debugEnabled</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token comment">//Capture logs in StringBuilder</span>
LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilderLogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//No Logging (default)</span>
LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NullLogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
</code></pre></div><h2 id="nlog-1" tabindex="-1">NLog <a class="header-anchor" href="#nlog-1" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code>LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NLogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h2 id="log4net-1" tabindex="-1">Log4Net <a class="header-anchor" href="#log4net-1" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token comment">//Also runs log4net.Config.XmlConfigurator.Configure()</span>
LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Log4NetFactory</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">configureLog4Net</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h2 id="event-log" tabindex="-1">Event Log <a class="header-anchor" href="#event-log" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code>LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventLogFactory</span><span class="token punctuation">(</span><span class="token string">&quot;Logging.Tests&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then your application logic can bind to and use a lightweight implementation-free ILog which at runtime will be an instance of the concrete implementation configured in your host:</p><div class="language-csharp"><pre><code><span class="token class-name">ILog</span> log <span class="token operator">=</span> LogManager<span class="token punctuation">.</span><span class="token function">GetLogger</span><span class="token punctuation">(</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Debug Event Log Entry.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Warning Event Log Entry.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="elmah-1" tabindex="-1">Elmah <a class="header-anchor" href="#elmah-1" aria-hidden="true">#</a></h2><p>To configure Elmah register it before initializing ServiceStack&#39;s AppHost, passing in the Global HttpApplication Instance and an alternate logger you&#39;d like to use to for your Debug and Info messages, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Global</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpApplication</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> debugMessagesLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConsoleLogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ElmahLogFactory</span><span class="token punctuation">(</span>debugMessagesLog<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Elmah also requires its handlers and modules to be registered in the <strong>Web.config</strong> which lets you view your Elmah Error Log at: <code>/elmah.xsd</code>:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.web</span><span class="token punctuation">&gt;</span></span>
    ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpHandlers</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">verb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST,GET,HEAD<span class="token punctuation">&quot;</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elmah.axd<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Elmah.ErrorLogPageFactory, Elmah<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpHandlers</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpModules</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ErrorLog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Elmah.ErrorLogModule, Elmah<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpModules</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.web</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>handlers</span><span class="token punctuation">&gt;</span></span>
      ...
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Elmah<span class="token punctuation">&quot;</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elmah.axd<span class="token punctuation">&quot;</span></span> <span class="token attr-name">verb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST,GET,HEAD<span class="token punctuation">&quot;</span></span> 
           <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Elmah.ErrorLogPageFactory, Elmah<span class="token punctuation">&quot;</span></span> <span class="token attr-name">preCondition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>integratedMode<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>handlers</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Elmah.ErrorLog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Elmah.ErrorLogModule, Elmah<span class="token punctuation">&quot;</span></span> <span class="token attr-name">preCondition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>managedHandler<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>For a working example see the <a href="https://github.com/ServiceStack/ServiceStack.UseCases/tree/master/Logging.Elmah" target="_blank" rel="noopener noreferrer">Logging.Elmah UseCase</a> which has ServiceStack and Elmah configured together.</p><h2 id="slack" tabindex="-1">Slack <a class="header-anchor" href="#slack" aria-hidden="true">#</a></h2><p>Configure Slack Logger with the channels you want to log it to, e.g:</p><div class="language-csharp"><pre><code>LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SlackLogFactory</span><span class="token punctuation">(</span><span class="token string">&quot;{GeneratedSlackUrlFromCreatingIncomingWebhook}&quot;</span><span class="token punctuation">,</span> 
    <span class="token named-parameter punctuation">debugEnabled</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Alternate default channel than one specified when creating Incoming Webhook.</span>
    DefaultChannel <span class="token operator">=</span> <span class="token string">&quot;other-default-channel&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//Custom channel for Fatal logs. Warn, Info etc will fallback to DefaultChannel or </span>
    <span class="token comment">//channel specified when Incoming Webhook was created.</span>
    FatalChannel <span class="token operator">=</span> <span class="token string">&quot;more-grog-logs&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//Custom bot username other than default</span>
    BotUsername <span class="token operator">=</span> <span class="token string">&quot;Guybrush Threepwood&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//Custom channel prefix can be provided to help filter logs from different users or environments. </span>
    ChannelPrefix <span class="token operator">=</span> System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>WindowsIdentity<span class="token punctuation">.</span><span class="token function">GetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name
<span class="token punctuation">}</span><span class="token punctuation">;</span>

LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SlackLogFactory</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>More usage examples are available in <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Logging.Tests/UnitTests/SlackLogFactoryTests.cs" target="_blank" rel="noopener noreferrer">SlackLogFactoryTests</a>.</p><h2 id="serilog" tabindex="-1">Serilog <a class="header-anchor" href="#serilog" aria-hidden="true">#</a></h2><p>To Configure Serilog Logging, first download <a href="https://www.nuget.org/packages/ServiceStack.Logging.Serilog" target="_blank" rel="noopener noreferrer">ServiceStack.Logging.Serilog</a> from NuGet:</p>__VP_STATIC_END__`,39),b=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Logging.Serilog" Version="5.*" />')]),a(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),w=s(`__VP_STATIC_START__<p>Then configure ServiceStack to use <code>SerilogFactory</code>:</p><div class="language-csharp"><pre><code>LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SerilogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The Serilog adapter includes enhanced Serilog-specific APIs:</p><div class="language-csharp"><pre><code>ILog<span class="token punctuation">.</span>Debug<span class="token return-type class-name"><span class="token punctuation">(</span>Exception ex<span class="token punctuation">,</span> <span class="token keyword">string</span> messageTemplate<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> propertyValues<span class="token punctuation">)</span></span>
ILog<span class="token punctuation">.</span>Info<span class="token return-type class-name"><span class="token punctuation">(</span>Exception ex<span class="token punctuation">,</span> <span class="token keyword">string</span> messageTemplate<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> propertyValues<span class="token punctuation">)</span></span>
ILog<span class="token punctuation">.</span>Warn<span class="token return-type class-name"><span class="token punctuation">(</span>Exception ex<span class="token punctuation">,</span> <span class="token keyword">string</span> messageTemplate<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> propertyValues<span class="token punctuation">)</span></span>
ILog<span class="token punctuation">.</span>Error<span class="token return-type class-name"><span class="token punctuation">(</span>Exception ex<span class="token punctuation">,</span> <span class="token keyword">string</span> messageTemplate<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> propertyValues<span class="token punctuation">)</span></span>
ILog<span class="token punctuation">.</span>Fatal<span class="token return-type class-name"><span class="token punctuation">(</span>Exception ex<span class="token punctuation">,</span> <span class="token keyword">string</span> messageTemplate<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> propertyValues<span class="token punctuation">)</span></span>
ILog<span class="token punctuation">.</span><span class="token function">ForContext</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span>
ILog<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ILog<span class="token punctuation">.</span><span class="token function">ForContext</span><span class="token punctuation">(</span><span class="token class-name">ILogEventEnricher</span> enricher<span class="token punctuation">)</span>
ILog<span class="token punctuation">.</span><span class="token function">ForContext</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ILogEventEnricher<span class="token punctuation">&gt;</span></span> enrichers<span class="token punctuation">)</span>
ILog<span class="token punctuation">.</span><span class="token function">ForContext</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> propertyName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> destructureObjects <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-hidden="true">#</a></h2><p>Using a logger in your Service is similar to other .NET Logging providers, e.g. you can initialize a static property for the class and use it in your services, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ILog</span> Log <span class="token operator">=</span> LogManager<span class="token punctuation">.</span><span class="token function">GetLogger</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyService</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Log<span class="token punctuation">.</span>IsDebugEnabled<span class="token punctuation">)</span>
            Log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;In Request Service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="community-logging-providers" tabindex="-1">Community Logging Providers <a class="header-anchor" href="#community-logging-providers" aria-hidden="true">#</a></h2><h3 id="servicestack-seq-requestlogsfeature" tabindex="-1"><a href="https://github.com/wwwlicious/servicestack-seq-requestlogsfeature" target="_blank" rel="noopener noreferrer">ServiceStack.Seq.RequestLogsFeature</a> <a class="header-anchor" href="#servicestack-seq-requestlogsfeature" aria-hidden="true">#</a></h3><p>Servicestack plugin that logs requests to <a href="https://getseq.net/" target="_blank" rel="noopener noreferrer">Seq</a>.</p><h1 id="community-resources" tabindex="-1">Community Resources <a class="header-anchor" href="#community-resources" aria-hidden="true">#</a></h1><ul><li><a href="http://buildclassifieds.com/2016/02/01/using-slack-for-logging-with-servicestack/" target="_blank" rel="noopener noreferrer">Using Slack for Logging (with ServiceStack)</a> by <a href="https://twitter.com/markholdt" target="_blank" rel="noopener noreferrer">@markholdt</a></li><li><a href="http://rossipedia.com/blog/2013/03/elmah-emails-and-servicestack/" target="_blank" rel="noopener noreferrer">Elmah, Emails, and ServiceStack</a> by <a href="https://twitter.com/rossipedia" target="_blank" rel="noopener noreferrer">@rossipedia</a></li></ul>__VP_STATIC_END__`,12),L=[c,l,i,r,u,g,k,d,h,m,y,f,v,b,w];function S(x,_,q,E,I,T){return o(),e("div",null,L)}var N=t(p,[["render",S]]);export{C as __pageData,N as default};
