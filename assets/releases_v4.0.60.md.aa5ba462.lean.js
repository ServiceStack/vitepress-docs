import{_ as n,c as s,o as a,a as t}from"./app.14440598.js";const m='{"title":"v4.0.60 Release Notes","description":"","frontmatter":{"title":"v4.0.60 Release Notes","slug":"v4-0-60"},"headers":[{"level":2,"title":"Authentication","slug":"authentication"},{"level":3,"title":"Sessionless \\"Auth With Request\\" Providers","slug":"sessionless-auth-with-request-providers"},{"level":2,"title":"API Key Auth Provider","slug":"api-key-auth-provider"},{"level":3,"title":"API Key Defaults","slug":"api-key-defaults"},{"level":3,"title":"Built-in API Key Services","slug":"built-in-api-key-services"},{"level":2,"title":"JWT Auth Provider","slug":"jwt-auth-provider"},{"level":3,"title":"Sending JWT with Service Clients","slug":"sending-jwt-with-service-clients"},{"level":3,"title":"JWT Overview","slug":"jwt-overview"},{"level":3,"title":"JWT Header","slug":"jwt-header"},{"level":3,"title":"JWT Payload","slug":"jwt-payload"},{"level":3,"title":"JWT Signature","slug":"jwt-signature"},{"level":3,"title":"Encrypted JWE Tokens","slug":"encrypted-jwe-tokens"},{"level":3,"title":"Stateless Auth Microservices","slug":"stateless-auth-microservices"},{"level":3,"title":"Convert Sessions to Tokens","slug":"convert-sessions-to-tokens"},{"level":3,"title":"Ajax Clients","slug":"ajax-clients"},{"level":3,"title":"Switching existing Sites to JWT","slug":"switching-existing-sites-to-jwt"},{"level":3,"title":"JWT Configuration","slug":"jwt-configuration"},{"level":3,"title":"Further Examples","slug":"further-examples"},{"level":2,"title":"OrmLite","slug":"ormlite"},{"level":3,"title":"Cleaner, Modernized API Surface","slug":"cleaner-modernized-api-surface"},{"level":3,"title":"Parameterized by default","slug":"parameterized-by-default"},{"level":3,"title":"Improved partial Updates and Inserts APIs","slug":"improved-partial-updates-and-inserts-apis"},{"level":3,"title":"New ColumnExists API","slug":"new-columnexists-api"},{"level":3,"title":"New SelectMulti API","slug":"new-selectmulti-api"},{"level":3,"title":"Multiple APIs to fetch data","slug":"multiple-apis-to-fetch-data"},{"level":3,"title":"CustomSelect Attribute","slug":"customselect-attribute"},{"level":3,"title":"OrmLiteAuthRepository","slug":"ormliteauthrepository"},{"level":3,"title":"Optimize LIKE Searches","slug":"optimize-like-searches"},{"level":3,"title":"OrmLite Community Contributions","slug":"ormlite-community-contributions"},{"level":2,"title":"ServiceStack.Redis","slug":"servicestack-redis"},{"level":3,"title":"New Redis GEO Operations","slug":"new-redis-geo-operations"},{"level":3,"title":"Binary Key APIs","slug":"binary-key-apis"},{"level":2,"title":"Slack Logger","slug":"slack-logger"},{"level":2,"title":"Performance and Memory improvements","slug":"performance-and-memory-improvements"},{"level":3,"title":"String Parsing APIs","slug":"string-parsing-apis"},{"level":3,"title":"TypeConstants","slug":"typeconstants"},{"level":3,"title":"CachedExpressionCompiler","slug":"cachedexpressioncompiler"},{"level":3,"title":"GetActivator and GetCachedGenericType","slug":"getactivator-and-getcachedgenerictype"},{"level":3,"title":"Object Pools","slug":"object-pools"},{"level":3,"title":"Enum.HasFlag","slug":"enum-hasflag"},{"level":2,"title":"Other Features","slug":"other-features"},{"level":3,"title":"Add ServiceStack Reference Wildcards","slug":"add-servicestack-reference-wildcards"},{"level":3,"title":"New ServerEventsClient APIs","slug":"new-servereventsclient-apis"},{"level":3,"title":"New IServiceClient APIs","slug":"new-iserviceclient-apis"},{"level":3,"title":"RegisterServicesInAssembly","slug":"registerservicesinassembly"},{"level":3,"title":"FluentValidation","slug":"fluentvalidation"},{"level":2,"title":"HTTP Utils","slug":"http-utils"}],"relativePath":"releases/v4.0.60.md","lastUpdated":1634495308438}',e={},o=t(`__VP_STATIC_START__<blockquote><p>Quick fix release build that resolves issues reported with Add ServiceStack Reference in v4.0.58. The v4.0.58 Release Notes below contains new features added in this release:</p></blockquote><p>We&#39;ve got another jam-packed release with improvements and polish across the board, starting with exciting new API Key and JWT Auth Providers enabling fast, stateless and centralized Auth Services, a modernized API surface for OrmLite, new GEO capabilities in Redis, Logging for Slack, performance and memory improvements across all ServiceStack and libraries including useful utilities you can reuse to improve performance in your own Apps.</p><h2 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-hidden="true">#</a></h2><p>ServiceStack&#39;s Authentication is built around the simple <a href="/sessions.html">HTTP Session</a> model where after successful authentication a <a href="/sessions.html#using-typed-sessions-in-servicestack">Typed Users Session</a> is persisted in the registered <code>ICacheClient</code>. A Cookie is then set on the HTTP Response in order to establish an <strong>Authenticated Session</strong> for subsequent requests. Prior to this release the Users Session was always persisted, including for <code>IAuthWithRequest</code> Auth Providers which would send Authentication Info with each Request, these include:</p><ul><li><code>BasicAuthProvider</code> - Allow users to authenticate with <a href="https://en.wikipedia.org/wiki/Basic_access_authentication" target="_blank" rel="noopener noreferrer">HTTP Basic Auth</a></li><li><code>DigestAuthProvider</code> - Allow users to authenticate with <a href="https://en.wikipedia.org/wiki/Digest_access_authentication" target="_blank" rel="noopener noreferrer">HTTP Digest Authentication</a></li><li><code>AspNetWindowsAuthProvider</code> - Allow users to authenticate with integrated Windows Auth</li></ul><h3 id="sessionless-auth-with-request-providers" tabindex="-1">Sessionless &quot;Auth With Request&quot; Providers <a class="header-anchor" href="#sessionless-auth-with-request-providers" aria-hidden="true">#</a></h3><p>By default all <code>IAuthWithRequest</code> Auth Providers no longer persist the Users Session in the Cache, the result of which requires each of the above Auth Providers to resend their Credentials / Auth Info on every request, as was already the current and expected behavior in all Service Clients which supported these Authentication options.</p><p>Previously only the <strong>First</strong> Request required sending Auth Info, as any subsequent requests could access the previously established <strong>Authenticated Session</strong>. Whilst it shouldn&#39;t be required, should you need to restore the previous behavior, you can persist Sessions with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicAuthProvider</span> <span class="token punctuation">{</span> PersistSession <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>No longer persisting User Sessions doesn&#39;t impact the existing Auth functionality as the Authenticated Users Session is simply attached to the current Request inside the <code>IRequest.Items</code> dictionary, conceptually similar to:</p><div class="language-csharp"><pre><code>req<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>Keywords<span class="token punctuation">.</span>Session<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthUserSession</span> <span class="token punctuation">{</span> IsAuthenticated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Which is what gets returned whenever the Session is accessed from inside your Services:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> session <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">GetSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">var</span></span> session <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SessionAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthUserSession<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Or outside the Service, anywhere you have access to the current <code>IRequest</code>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">GetSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">var</span></span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SessionAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthUserSession<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>All above APIs return the Typed User Session attached to the request.</p><p>This refresher on ServiceStack Sessions which now sees <code>IAuthWithRequest</code> sessions only lasting within the scope of the request will serve useful in understanding the new Auth Providers as they also both implement <code>IAuthWithRequest</code> and authenticate with every request.</p><h2 id="api-key-auth-provider" tabindex="-1">API Key Auth Provider <a class="header-anchor" href="#api-key-auth-provider" aria-hidden="true">#</a></h2><p>The new API Key Auth Provider provides an alternative method for allowing external 3rd Parties access to your protected Services without needing to specify a password. API Keys is the preferred approach for many well-known public API providers used in system-to-system scenarios for several reasons:</p><ul><li><strong>Simple</strong> - It integrates easily with existing HTTP Auth functionality</li><li><strong>Independent from Password</strong> - Limits exposure to the much more sensitive master user passwords that should ideally never be stored in plain-text. Resetting User&#39;s Password or password reset strategies wont invalidate existing systems configured to use API Keys</li><li><strong>Entropy</strong> - API Keys are typically much more secure than most normal User Passwords. The configurable default has <strong>24 bytes</strong> of entropy (Guids have 16 bytes) generated from a secure random number generator that encodes to <strong>32 chars</strong> using URL-safe Base64 (Same as Stripe)</li><li><strong>Performance</strong> - Thanks to their much greater entropy and independence from user-chosen passwords, API Keys are validated as fast as possible using a datastore Index. This is contrast to validating hashed user passwords which as a goal require usage of slower and more computationally expensive algorithms to try make brute force attacks infeasible</li></ul><p>Like most ServiceStack providers the new API Key Auth Provider is simple to use, integrates seamlessly with ServiceStack existing Auth model and includes Typed end-to-end client/server support.</p><p>For familiarity and utility we&#39;ve modelled our implementation around Stripe&#39;s API Key functionality whilst sharing many of the benefits of ServiceStack&#39;s Auth Providers:</p><h4 id="simple-and-integrated" tabindex="-1">Simple and Integrated <a class="header-anchor" href="#simple-and-integrated" aria-hidden="true">#</a></h4><p>Like all of <a href="/authentication-and-authorization.html">ServiceStack&#39;s Auth Providers</a> registration is as easy as adding <code>ApiKeyAuthProvider</code> to the <code>AuthFeature</code> list of Auth Providers:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiKeyAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CredentialsAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>ApiKeyAuthProvider</code> works similarly to the other ServiceStack <code>IAuthWithRequest</code> providers where a successful API Key initializes the current <code>IRequest</code> with the user&#39;s Authenticated Session. It also adds the <a href="https://github.com/ServiceStack/ServiceStack/blob/c4a8f9741e496793d949c09cecb84e84fca86686/src/ServiceStack/Auth/ApiKeyAuthProvider.cs#L31" target="_blank" rel="noopener noreferrer">ApiKey</a> POCO Model to the request which can be accessed with:</p><div class="language-csharp"><pre><code><span class="token class-name">ApiKey</span> apiKey <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">GetApiKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>ApiKey</code> can be later inspected throughout the <a href="/order-of-operations.html">request pipeline</a> to determine which API Key, Type and Environment was used.</p><h4 id="interoperable" tabindex="-1">Interoperable <a class="header-anchor" href="#interoperable" aria-hidden="true">#</a></h4><p>Using existing HTTP Functionality makes it simple and interoperable to use with any HTTP Client even command-line clients like curl where API Keys can be specified in the <strong>Username</strong> of HTTP Basic Auth:</p><blockquote><p>curl <a href="https://api.stripe.com/v1/charges" target="_blank" rel="noopener noreferrer">https://api.stripe.com/v1/charges</a> -u yDOr26HsxyhpuRB3qbG07qfCmDhqutnA:</p></blockquote><p>Or as a HTTP Bearer Token in the <strong>Authorization</strong> HTTP Request Header:</p><blockquote><p>curl <a href="https://api.stripe.com/v1/charges" target="_blank" rel="noopener noreferrer">https://api.stripe.com/v1/charges</a> -H &quot;Authorization: Bearer yDOr26HsxyhpuRB3qbG07qfCmDhqutnA&quot;</p></blockquote><p>Both of these methods are built into most HTTP Clients. Here are a few different ways which you can send them using ServiceStack&#39;s <a href="/csharp-client.html">.NET Service Clients</a>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonHttpClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BearerToken <span class="token operator">=</span> apiKey
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Or using the <a href="/http-utils.html">HTTP Utils</a> extension methods:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> baseUrl<span class="token punctuation">.</span><span class="token function">CombineWith</span><span class="token punctuation">(</span><span class="token string">&quot;/secured&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetStringFromUrl</span><span class="token punctuation">(</span>
    <span class="token named-parameter punctuation">requestFilter</span><span class="token punctuation">:</span> req <span class="token operator">=&gt;</span> req<span class="token punctuation">.</span><span class="token function">AddBasicAuth</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">&quot;https://example.org/secured&quot;</span><span class="token punctuation">.</span><span class="token function">GetJsonFromUrlAsync</span><span class="token punctuation">(</span>
    <span class="token named-parameter punctuation">requestFilter</span><span class="token punctuation">:</span> req <span class="token operator">=&gt;</span> req<span class="token punctuation">.</span><span class="token function">AddBearerToken</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="multiple-auth-repositories" tabindex="-1">Multiple Auth Repositories <a class="header-anchor" href="#multiple-auth-repositories" aria-hidden="true">#</a></h4><p>The necessary functionality to support API Keys has been implemented in the following supported Auth Repositories:</p><ul><li><code>OrmLiteAuthRepository</code> - Supporting <a href="https://github.com/ServiceStack/ServiceStack.OrmLite#8-flavours-of-ormlite-is-on-nuget" target="_blank" rel="noopener noreferrer">most major RDBMS</a></li><li><code>RedisAuthRepository</code> - Uses Redis back-end data store</li><li><code>DynamoDbAuthRepository</code> - Uses AWS DynamoDB data store</li><li><code>InMemoryAuthRepository</code> - Uses InMemory Auth Repository</li></ul><p>And requires no additional configuration as it just utilizes the existing registered <code>IAuthRepository</code>.</p><h4 id="multiple-api-key-types-and-environments" tabindex="-1">Multiple API Key Types and Environments <a class="header-anchor" href="#multiple-api-key-types-and-environments" aria-hidden="true">#</a></h4><p>You can specify any number of different Key Types for use in multiple environments for each user. Keys are generated upon User Registration where it generates both a <strong>live</strong> and <strong>test</strong> key for the <strong>secret</strong> Key Type by default. To also create both a &quot;secret&quot; and &quot;publishable&quot; API Key, configure it with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiKeyAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            KeyTypes <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;publishable&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If preferred, any of the API Key Provider options can instead be specified in <a href="/appsettings.html">App Settings</a> following the <code>apikey.{PropertyName}</code> format, e.g:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>apikey.KeyTypes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>secret,publishable<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h4 id="multitenancy" tabindex="-1">Multitenancy <a class="header-anchor" href="#multitenancy" aria-hidden="true">#</a></h4><p>Thanks to the ServiceStack&#39;s trivial support for enabling <a href="/multitenancy.html">Multitenancy</a>, the minimal configuration required to register and API Key Auth Provider that persists to a <strong>LiveDb</strong> SQL Server database and also allows Services called with an Test API Key to query the alternative <strong>TestDb</strong> database instead, is just:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppSelfHostBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;API Key Multitenancy Example&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AppHost</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//Create and register an OrmLite DB Factory configured to use Live DB by default </span>
        <span class="token class-name"><span class="token keyword">var</span></span> dbFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span>
            AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;LiveDb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SqlServerDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>dbFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Register a &quot;TestDb&quot; Named Connection </span>
        dbFactory<span class="token punctuation">.</span><span class="token function">RegisterConnection</span><span class="token punctuation">(</span><span class="token string">&quot;TestDb&quot;</span><span class="token punctuation">,</span> 
            AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;TestDb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SqlServerDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Tell ServiceStack you want to persist User Auth Info in SQL Server</span>
        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteAuthRepository</span><span class="token punctuation">(</span>dbFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//Register the AuthFeature with the API Key Auth Provider </span>
        Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthUserSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiKeyAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IDbConnection</span> <span class="token function">GetDbConnection</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//If an API Test Key was used return DB connection to TestDb instead: </span>
        <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">GetApiKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">?.</span>Environment <span class="token operator">==</span> <span class="token string">&quot;test&quot;</span>
            <span class="token punctuation">?</span> <span class="token generic-method"><span class="token function">TryResolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OpenDbConnection</span><span class="token punctuation">(</span><span class="token string">&quot;TestDb&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">GetDbConnection</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Now whenever a Test API Key was used to call an Authenticated Service, all <code>base.Db</code> Queries or AutoQuery Services will query <strong>TestDb</strong> instead.</p><h3 id="api-key-defaults" tabindex="-1">API Key Defaults <a class="header-anchor" href="#api-key-defaults" aria-hidden="true">#</a></h3><p>The API Key Auth Provider has several options to customize its behavior with all but delegate Filters being able to be specified in AppSettings as well:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiKeyAuthProvider</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// Whether to only permit access via API Key from a secure connection. (default true)</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> RequireSecureConnection <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Generate different keys for different environments. (default live,test)</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Environments <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Different types of Keys each user can have. (default secret)</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> KeyTypes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// How much entropy should the generated keys have. (default 24)</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> KeySizeBytes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">/// Whether to automatically expire keys. (default no expiry)</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TimeSpan<span class="token punctuation">?</span></span> ExpireKeysAfter <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Automatically create the ApiKey Table for Auth Repositories which need it. (default true)</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> InitSchema <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Change how API Key is generated</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">CreateApiKeyDelegate</span> GenerateApiKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Run custom filter after API Key is created</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>ApiKey<span class="token punctuation">&gt;</span></span> CreateApiKeyFilter <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Should you need to, you can access API Keys from the Auth Repository directly through the following interface:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IManageApiKeys</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitApiKeySchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ApiKeyExists</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> apiKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">ApiKey</span> <span class="token function">GetApiKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> apiKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>ApiKey<span class="token punctuation">&gt;</span></span> <span class="token function">GetUserApiKeys</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StoreAll</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ApiKey<span class="token punctuation">&gt;</span></span> apiKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>This interface also defines what&#39;s required in order to implement API Keys support on a Custom AuthRepository.</p></blockquote><p>For Auth Repositories which implement it, you can access the interface by resolving <code>IAuthRepository</code> from the IOC and casting it to the above interface, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> apiRepo <span class="token operator">=</span> <span class="token punctuation">(</span>IManageApiKeys<span class="token punctuation">)</span>HostContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryResolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> apiKeys <span class="token operator">=</span> apiRepo<span class="token punctuation">.</span><span class="token function">GetUserApiKeys</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>UserAuthId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="built-in-api-key-services" tabindex="-1">Built-in API Key Services <a class="header-anchor" href="#built-in-api-key-services" aria-hidden="true">#</a></h3><p>To give end-users access to their keys the API Key Auth Provider enables 2 Services: the <code>GetApiKeys</code> Service to return all valid User API Keys for the specified environment:</p><div class="language-csharp"><pre><code><span class="token comment">//GET /apikeys/live</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetApiKeys</span> <span class="token punctuation">{</span> Environment <span class="token operator">=</span> <span class="token string">&quot;live&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
response<span class="token punctuation">.</span>Results<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//User&#39;s &quot;live&quot; API Keys </span>
</code></pre></div><p>And the <code>RegenrateApiKeys</code> Service to invalidate all current API Keys and generate new ones for the specified environment:</p><div class="language-csharp"><pre><code><span class="token comment">//POST /apikeys/regenerate/live</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RegenrateApiKeys</span> <span class="token punctuation">{</span> Environment <span class="token operator">=</span> <span class="token string">&quot;live&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
response<span class="token punctuation">.</span>Results<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//User&#39;s new &quot;live&quot; API Keys </span>
</code></pre></div><p>You can modify which built-in Services you want registered, or modify the custom routes to where you want them to be available by modifying the <code>ServiceRoutes</code> collection. E.g. you can prevent it from registering any Services by setting <code>ServiceRoutes</code> to an empty collection:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiKeyAuthProvider</span> <span class="token punctuation">{</span> ServiceRoutes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre></div><h2 id="jwt-auth-provider" tabindex="-1">JWT Auth Provider <a class="header-anchor" href="#jwt-auth-provider" aria-hidden="true">#</a></h2><p>Even more exciting than the new API Key Provider is the new integrated Auth solution for the popular <a href="https://jwt.io/" target="_blank" rel="noopener noreferrer">JSON Web Tokens</a> (JWT) industry standard which is easily enabled by registering the <code>JwtAuthProvider</code> with the <code>AuthFeature</code> plugin:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> <span class="token punctuation">{</span> AuthKey <span class="token operator">=</span> AesUtils<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CredentialsAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>At a minimum you&#39;ll need to specify the <code>AuthKey</code> that will be used to Sign and Verify JWT tokens. Whilst creating a new one in memory as above will work, a new Auth Key will be created every time the AppDomain recycles which will invalidate all existing JWT Tokens created with the previous key.</p><p>So you&#39;ll typically want to generate the AuthKey out-of-band and configure it with the <code>JwtAuthProvider</code> at registration which you can do in code using any of the <a href="/appsettings.html">AppSettings providers</a>:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> <span class="token punctuation">{</span> AuthKeyBase64 <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;AuthKeyBase64&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre></div><p>Or alternatively you can configure most <code>JwtAuthProvider</code> properties in your <strong>Web.config</strong> <code>&lt;appSettings/&gt;</code> (default AppSettings Provider) following the <code>jwt.{PropertyName}</code> format:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jwt.AuthKeyBase64<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{Base64AuthKey}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>As with all crypto keys you&#39;ll want to keep them confidential as if anyone gets a hold of your AuthKey they&#39;ll be able to forge and sign their own JWT tokens letting them be able to impersonate any user, roles or permissions!</p><h4 id="requiresecureconnection" tabindex="-1">RequireSecureConnection <a class="header-anchor" href="#requiresecureconnection" aria-hidden="true">#</a></h4><p>Both API Key and JWT Auth Providers defaults to <code>RequireSecureConnection=true</code> which mandates for Authentication via either Provider to happen over a secure (HTTPS) connection as both bearer tokens should be kept highly confidential. You can specify <code>RequireSecureConnection=false</code> to disable this requirement for testing or within controlled internal environments.</p><h3 id="sending-jwt-with-service-clients" tabindex="-1">Sending JWT with Service Clients <a class="header-anchor" href="#sending-jwt-with-service-clients" aria-hidden="true">#</a></h3><p>Just like API Keys, JWT Tokens can be sent using the Bearer Token support in all HTTP and Service Clients:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BearerToken <span class="token operator">=</span> jwtToken
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">&quot;https://example.org/secured&quot;</span><span class="token punctuation">.</span><span class="token function">GetJsonFromUrlAsync</span><span class="token punctuation">(</span>
    <span class="token named-parameter punctuation">requestFilter</span><span class="token punctuation">:</span> req <span class="token operator">=&gt;</span> req<span class="token punctuation">.</span><span class="token function">AddBearerToken</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The Service Clients offer additional high-level functionality where it&#39;s able to transparently request a new JWT Token after it expires by handling when the configured JWT Token becomes invalidated in the <code>OnAuthenticationRequired</code> callback. Here we can retrieve a new JWT Token that we can fetch using a different Service Client accessing a centralized and independent Auth Microservice that&#39;s configured with both API Key and JWT Token Auth Providers. We can fetch a new JWT Token by calling ServiceStack&#39;s built-in <code>Authenticate</code> Service with our <strong>secret</strong> API Key (that by default never invalidates unless revoked).</p><p>If authenticated, sending an empty <code>Authenticate()</code> DTO will return the currently Authenticated User Info that also generates a new JWT Token from the User&#39;s Authenticated Session and returns it in the <code>BearerToken</code> Response DTO property which we can use to update our invalidated JWT Token.</p><p>All together we can configure our Service Client to transparently refresh expired JWT Tokens with just:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> authClient <span class="token operator">=</span> <span class="token function">JsonServiceClient</span><span class="token punctuation">(</span>centralAuthBaseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>OnAuthenticationRequired <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">.</span>BearerToken <span class="token operator">=</span> authClient<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BearerToken<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="sending-jwt-using-cookies" tabindex="-1">Sending JWT using Cookies <a class="header-anchor" href="#sending-jwt-using-cookies" aria-hidden="true">#</a></h4><p>To <a href="https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage" target="_blank" rel="noopener noreferrer">improve accessibility with Ajax clients</a> JWT Tokens can also be sent using the <code>ss-tok</code> Cookie, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">&quot;ss-tok&quot;</span><span class="token punctuation">,</span> jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>We&#39;ll walk through an example of how you can access JWT Tokens as well as how you can convert Authenticated Sessions into JWT Tokens and assign it to use a <strong>Secure</strong> and <strong>HttpOnly</strong> Cookie later on.</p><h3 id="jwt-overview" tabindex="-1">JWT Overview <a class="header-anchor" href="#jwt-overview" aria-hidden="true">#</a></h3><p>A nice property of JWT tokens is that they allow for truly stateless authentication where API Keys and user credentials can be maintained in a decentralized Auth Service that&#39;s kept isolated from the rest of your System, making them optimal for use in Microservice architectures.</p><p>Being self-contained lends JWT tokens to more scalable, performant and flexible architectures as they don&#39;t require any I/O or any state to be accessed from App Servers to validate the JWT Tokens, this is unlike all other Auth Providers which requires at least a DB, Cache or Network hit to authenticate the user.</p><p>A good introduction into JWT is available from the JWT website: <a href="https://jwt.io/introduction/" target="_blank" rel="noopener noreferrer">https://jwt.io/introduction/</a></p><p>Essentially JWT&#39;s consist of 3 parts separated by <code>.</code> with each part encoded in <a href="https://tools.ietf.org/html/rfc4648#section-5" target="_blank" rel="noopener noreferrer">Base64url Encoding</a> making it safe to encode both text and binary using only URL-safe (i.e. non-escaping required) chars in the following format:</p><pre><code>Base64UrlHeader.Base64UrlPayload.Base64UrlSignature 
</code></pre><p>Where just like the API Key, JWT&#39;s can be sent as a Bearer Token in the <code>Authorization</code> HTTP Request Header.</p><h3 id="jwt-header" tabindex="-1">JWT Header <a class="header-anchor" href="#jwt-header" aria-hidden="true">#</a></h3><p>The header typically consists of two parts: the type of the token and the hashing algorithm being used which is typically just:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
  <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>We also send the &quot;kid&quot; <a href="http://self-issued.info/docs/draft-jones-json-web-token-01.html#rfc.section.5.1" target="_blank" rel="noopener noreferrer">Key Id</a> used to identify which key should be used to validate the signature to help with seamless key rotations in future. If not specified the KeyId defaults to the <strong>first 3 chars</strong> of the Base64 HMAC or RSA Public Key Modulus.</p><h3 id="jwt-payload" tabindex="-1">JWT Payload <a class="header-anchor" href="#jwt-payload" aria-hidden="true">#</a></h3><p>The Payload contains the essential information of a JWT Token which is made up of &quot;claims&quot;, i.e. statements and metadata about a user which are categorized into 3 groups:</p><ul><li><a href="https://tools.ietf.org/html/rfc7519#section-4.1" target="_blank" rel="noopener noreferrer">Registered Claim Names</a> - containing a known set of reserved names predefined in the JWT Standard</li><li><a href="https://tools.ietf.org/html/rfc7519#section-4.2" target="_blank" rel="noopener noreferrer">Public Claim Names</a> - additional common names that are registered in the <a href="http://www.iana.org/assignments/jwt/jwt.xhtml" target="_blank" rel="noopener noreferrer">IANA &quot;JSON Web Token Claims&quot; registry</a> or otherwise adopt a Collision-Resistant name, e.g. prefixed by a namespace</li><li><a href="https://tools.ietf.org/html/rfc7519#section-4.3" target="_blank" rel="noopener noreferrer">Private Claim Names</a> - any other metadata you wish to include about an entity</li></ul><p>We use the Payload to store essential information about the user which we use to validate the token and populate the session. Which typically contains:</p><ul><li><strong>iss</strong> (<a href="https://tools.ietf.org/html/rfc7519#section-4.1.1" target="_blank" rel="noopener noreferrer">Issuer</a>) - the principal that issued the JWT. Can be set with <code>JwtAuthProvider.Issuer</code>, defaults to <strong>ssjwt</strong></li><li><strong>sub</strong> (<a href="https://tools.ietf.org/html/rfc7519#section-4.1.2" target="_blank" rel="noopener noreferrer">Subject</a>) - identifies the subject of the JWT, used to store the User&#39;s <strong>UserAuthId</strong></li><li><strong>iat</strong> (<a href="https://tools.ietf.org/html/rfc7519#section-4.1.6" target="_blank" rel="noopener noreferrer">Issued At</a>) - when JWT Token was issued. Can use <code>InvalidateTokensIssuedBefore</code> to invalidate tokens issued before a specific date</li><li><strong>exp</strong> (<a href="https://tools.ietf.org/html/rfc7519#section-4.1.4" target="_blank" rel="noopener noreferrer">Expiration Time</a>) - when the JWT expires. Initialized with <code>JwtAuthProvider.ExpireTokensIn</code> from date of issue (default <strong>14 days</strong>)</li><li><strong>aud</strong> (<a href="https://tools.ietf.org/html/rfc7519#section-4.1.3" target="_blank" rel="noopener noreferrer">Audience</a>) - identifies the recipient of the JWT. Can be set with <code>JwtAuthProvider.Audience</code>, defaults to <code>null</code> (Optional)</li></ul><p>The remaining information in the JWT Payload is used to populate the Users Session, to maximize interoperability we&#39;ve used the most appropriate <a href="http://www.iana.org/assignments/jwt/jwt.xhtml" target="_blank" rel="noopener noreferrer">Public Claim Names</a> where possible:</p><ul><li><strong>email</strong> &lt;- <code>session.Email</code></li><li><strong>given_name</strong> &lt;- <code>session.FirstName</code></li><li><strong>family_name</strong> &lt;- <code>session.LastName</code></li><li><strong>name</strong> &lt;- <code>session.DisplayName</code></li><li><strong>preferred_username</strong> &lt;- <code>session.UserName</code></li><li><strong>picture</strong> &lt;- <code>session.ProfileUrl</code></li></ul><p>We also need to capture Users Roles and Permissions but as there&#39;s no Public Claim Name for this yet we&#39;re using <a href="https://azure.microsoft.com/en-us/documentation/articles/active-directory-token-and-claims/" target="_blank" rel="noopener noreferrer">Azure&#39;s Active Directory Conventions</a> where User Roles are stored in <strong>roles</strong> as a JSON Array and similarly, Permissions are stored in <strong>perms</strong>.</p><p>To keep the JWT Token small we&#39;re only storing the essential User Info above in the Token, which means when the Token is restored it will only be partially populated. You can detect when a Session was partially populated from a JWT Token with the new <code>FromToken</code> boolean property.</p><h4 id="modifying-the-payload" tabindex="-1">Modifying the Payload <a class="header-anchor" href="#modifying-the-payload" aria-hidden="true">#</a></h4><p>Whilst only limited info is embedded in the payload by default, all matching <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/AuthUserSession.cs" target="_blank" rel="noopener noreferrer">AuthUserSession</a> properties embedded in the token will also be populated on the Session, which you can add to the payload using the <code>CreatePayloadFilter</code> delegate. So if you also want to have access to when the user was registered you can add it to the payload with:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    CreatePayloadFilter <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token punctuation">,</span>session<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        payload<span class="token punctuation">[</span><span class="token string">&quot;CreatedAt&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span>CreatedAt<span class="token punctuation">.</span><span class="token function">ToUnixTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You can also use the filter to modify any existing property which you can use to change the behavior of the JWT Token, e.g. we can add a special exception extending the JWT Expiration to all Users from Acme Inc with:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    CreatePayloadFilter <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token punctuation">,</span>session<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span>Email<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;@acme.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
            payload<span class="token punctuation">[</span><span class="token string">&quot;exp&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToUnixTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Likewise you can modify JWT Headers with the <code>CreateHeaderFilter</code> delegate and modify how the Users Session is populated with the <code>PopulateSessionFilter</code>.</p><h3 id="jwt-signature" tabindex="-1">JWT Signature <a class="header-anchor" href="#jwt-signature" aria-hidden="true">#</a></h3><p>JWT Tokens are possible courtesy of the cryptographic signature added to the end of the message that&#39;s used to Authenticate and Verify that a Message hasn&#39;t been tampered with. As long as the message signature validates with our <code>AuthKey</code> we can be certain the contents of the message haven&#39;t changed from when it was created by either ourselves or someone else with access to our AuthKey.</p><p>JWT standard allows for a number of different Hashing Algorithms although requires at least the <strong>HM256</strong> HMAC SHA-256 to be supported which is the default. The full list of Symmetric HMAC and Asymmetric RSA Algorithms <code>JwtAuthProvider</code> supports include:</p><ul><li><strong>HM256</strong> - Symmetric HMAC SHA-256 algorithm</li><li><strong>HS384</strong> - Symmetric HMAC SHA-384 algorithm</li><li><strong>HS512</strong> - Symmetric HMAC SHA-512 algorithm</li><li><strong>RS256</strong> - Asymmetric RSA with PKCS#1 padding with SHA-256</li><li><strong>RS384</strong> - Asymmetric RSA with PKCS#1 padding with SHA-384</li><li><strong>RS512</strong> - Asymmetric RSA with PKCS#1 padding with SHA-512</li></ul><p>HMAC is the simplest to use as it lets you use the same AuthKey to Sign and Verify the message.</p><p>But if preferred you can use a RSA Keys to sign and verify tokens by changing the <code>HashAlgorithm</code> and specifying a RSA Private Key:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    HashAlgorithm <span class="token operator">=</span> <span class="token string">&quot;RS256&quot;</span><span class="token punctuation">,</span>
    PrivateKeyXml <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;PrivateKeyXml&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre></div><p>If you don&#39;t have a RSA Private Key, one can be created with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> privateKey <span class="token operator">=</span> RsaUtils<span class="token punctuation">.</span><span class="token function">CreatePrivateKeyParams</span><span class="token punctuation">(</span>RsaKeyLengths<span class="token punctuation">.</span>Bit2048<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>And its public key can be extracted using <code>ToPublicRsaParameters()</code> extension method, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> publicKey <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">ToPublicRsaParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then to serialize RSA Keys, you can then export them to XML with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> privateKeyXml <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">ToPrivateKeyXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name"><span class="token keyword">var</span></span> publicKeyXml <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">ToPublicKeyXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The behavior of using RSA to sign the JWT Tokens is mostly transparent but instead of using the AuthKey to both Sign and Verify the JWT Payload, it&#39;s signed with the Private Key and verified using the Public Key. New tokens will also have the <strong>alg</strong> JWT Header set to <strong>RS256</strong> to reflect the new HashAlgorithm used.</p><h3 id="encrypted-jwe-tokens" tabindex="-1">Encrypted JWE Tokens <a class="header-anchor" href="#encrypted-jwe-tokens" aria-hidden="true">#</a></h3><p>Something that&#39;s not immediately obvious is that while JWT Tokens are signed to prevent tampering and verify authenticity, they&#39;re not encrypted and can easily be read by decoding the URL-safe Base64 string. This is a feature of JWT where it allows Client Apps to inspect the User&#39;s claims and hide functionality they don&#39;t have access to, it also means that JWT Tokens are debuggable and can be inspected for whenever you need to track down unexpected behavior.</p><p>But there may be times when you want to embed sensitive information in your JWT Tokens in which case you&#39;ll want to enable Encryption, which can be done with:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    PrivateKeyXml <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;PrivateKeyXml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    EncryptPayload <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><p>When turning on encryption, tokens are instead created following the <a href="https://tools.ietf.org/html/rfc7516#section-3" target="_blank" rel="noopener noreferrer">JSON Web Encryption (JWE)</a> standard where they&#39;ll be encoded in the 5-part <a href="https://tools.ietf.org/html/rfc7516#section-3.1" target="_blank" rel="noopener noreferrer">JWE Compact Serialization</a> format:</p><pre><code>BASE64URL(UTF8(JWE Protected Header)) || &#39;.&#39; ||
BASE64URL(JWE Encrypted Key)          || &#39;.&#39; ||
BASE64URL(JWE Initialization Vector)  || &#39;.&#39; ||
BASE64URL(JWE Ciphertext)             || &#39;.&#39; ||
BASE64URL(JWE Authentication Tag)
</code></pre><p>JwtAuthProvider&#39;s JWE implementation uses RSAES OAEP for Key Encryption and AES/128/CBC HMAC SHA256 for Content Encryption, closely following <a href="https://tools.ietf.org/html/rfc7516#appendix-A.2" target="_blank" rel="noopener noreferrer">JWE&#39;s AES_128_CBC_HMAC_SHA_256 Example</a> where a new MAC Auth and AES Crypt Key and IV are created for each Token. The Content Encryption Key (CEK) used to Encrypt and Authenticate the payload is encrypted using the Public Key and decrypted with the Private Key so only Systems with access to the Private Key will be able to Decrypt, Validate and Read the Token&#39;s payload.</p><h3 id="stateless-auth-microservices" tabindex="-1">Stateless Auth Microservices <a class="header-anchor" href="#stateless-auth-microservices" aria-hidden="true">#</a></h3><p>One of JWT&#39;s most appealing features is its ability to decouple the System that provides User Authentication Services and issues tokens from all the other Systems but are still able provide protected Services although no longer needs access to a User database or Session data store to facilitate it, as sessions can now be embedded in Tokens and its state maintained and sent by clients instead of accessed from each App Server. This is ideal for Microservice architectures where Auth Services can be isolated into a single externalized System.</p><p>With this use-case in mind we&#39;ve decoupled <code>JwtAuthProvider</code> in 2 classes:</p><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/Auth/JwtAuthProviderReader.cs" target="_blank" rel="noopener noreferrer">JwtAuthProviderReader</a> - Responsible for validating and creating Authenticated User Sessions from tokens</li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/Auth/JwtAuthProvider.cs" target="_blank" rel="noopener noreferrer">JwtAuthProvider</a> - Inherits <code>JwtAuthProviderReader</code> to also be able to Issue, Encrypt and provide access to tokens</li></ul><h4 id="services-only-validating-tokens" tabindex="-1">Services only Validating Tokens <a class="header-anchor" href="#services-only-validating-tokens" aria-hidden="true">#</a></h4><p>This lets us configure our Microservices that we want to enable Authentication via JWT Tokens down to just:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthUserSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtAuthProviderReader</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                HashAlgorithm <span class="token operator">=</span> <span class="token string">&quot;RS256&quot;</span><span class="token punctuation">,</span>
                PublicKeyXml <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;PublicKeyXml&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which no longer needs access to a <a href="/authentication-and-authorization.html#userauth-persistence---the-iuserauthrepository">IUserAuthRepository</a> or <a href="/sessions.html">Sessions</a> since they&#39;re populated entirely from JWT Tokens. Whilst you can use the default <strong>HS256</strong> HashAlgorithm, RSA is ideal for this use-case as you can limit access to the <strong>PrivateKey</strong> to only the central Auth Service issuing the tokens and then only distribute the <strong>PublicKey</strong> to each Service which needs to validate them.</p><h4 id="service-issuing-tokens" tabindex="-1">Service Issuing Tokens <a class="header-anchor" href="#service-issuing-tokens" aria-hidden="true">#</a></h4><p>As we can now contain all our Systems Auth Functionality to a single System we can open it up to support multiple Auth Providers as it only needs to be maintained in a central location but is still able to benefit all our Microservices that are only configured to validate JWT Tokens.</p><p>Here&#39;s a popular Auth Server configuration example which stores all User Auth information as well as User Sessions in SQL Server and is configured to support many of ServiceStack&#39;s Auth and OAuth providers:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Store UserAuth in SQL Server</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dbFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span>
        AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;LiveDb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SqlServerDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>dbFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteAuthRepository</span><span class="token punctuation">(</span>dbFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span> UseDistinctRoleTables <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Create UserAuth RDBMS Tables</span>
    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Also store User Sessions in SQL Server</span>
    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrmLiteCacheClient<span class="token punctuation">,</span> ICacheClient<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICacheClient<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//Add Support for </span>
    Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthUserSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                HashAlgorithm <span class="token operator">=</span> <span class="token string">&quot;RS256&quot;</span><span class="token punctuation">,</span>
                PrivateKeyXml <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;PrivateKeyXml&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiKeyAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//Sign-in with API Key</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CredentialsAuthProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment">//Sign-in with UserName/Password credentials</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicAuthProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">//Sign-in with HTTP Basic Auth</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DigestAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//Sign-in with HTTP Digest Auth</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TwitterAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment">//Sign-in with Twitter</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FacebookAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">//Sign-in with Facebook</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">YahooOpenIdOAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//Sign-in with Yahoo OpenId</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenIdOAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment">//Sign-in with Custom OpenId</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GoogleOAuth2Provider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">//Sign-in with Google OAuth2 Provider</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LinkedInOAuth2Provider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//Sign-in with LinkedIn OAuth2 Provider</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GithubAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//Sign-in with GitHub OAuth Provider</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">YandexAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//Sign-in with Yandex OAuth Provider        </span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">VkAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">//Sign-in with VK.com OAuth Provider </span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>With this setup we can Authenticate using any of the supported Auth Providers with our central Auth Server, retrieve the generated Token and use it to communicate with any our Microservices configured to validate tokens:</p><h4 id="retrieve-token-with-api-key" tabindex="-1">Retrieve Token with API Key <a class="header-anchor" href="#retrieve-token-with-api-key" aria-hidden="true">#</a></h4><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> authClient <span class="token operator">=</span> <span class="token function">JsonServiceClient</span><span class="token punctuation">(</span>centralAuthBaseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> jwtToken <span class="token operator">=</span> authClient<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BearerToken<span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>service1BaseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span> BearerToken <span class="token operator">=</span> jwtToken <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secured</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="retrieve-token-with-http-basic-auth" tabindex="-1">Retrieve Token with HTTP Basic Auth <a class="header-anchor" href="#retrieve-token-with-http-basic-auth" aria-hidden="true">#</a></h4><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> authClient <span class="token operator">=</span> <span class="token function">JsonServiceClient</span><span class="token punctuation">(</span>centralAuthBaseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> jwtToken <span class="token operator">=</span> authClient<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BearerToken<span class="token punctuation">;</span>
</code></pre></div><h4 id="retrieve-token-with-credentials-auth" tabindex="-1">Retrieve Token with Credentials Auth <a class="header-anchor" href="#retrieve-token-with-credentials-auth" aria-hidden="true">#</a></h4><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> authClient <span class="token operator">=</span> <span class="token function">JsonServiceClient</span><span class="token punctuation">(</span>centralAuthBaseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> jwtToken <span class="token operator">=</span> authClient<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Authenticate</span> <span class="token punctuation">{</span>
    provider <span class="token operator">=</span> <span class="token string">&quot;credentials&quot;</span><span class="token punctuation">,</span>
    UserName <span class="token operator">=</span> username<span class="token punctuation">,</span>
    Password <span class="token operator">=</span> password
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BearerToken<span class="token punctuation">;</span>
</code></pre></div><h3 id="convert-sessions-to-tokens" tabindex="-1">Convert Sessions to Tokens <a class="header-anchor" href="#convert-sessions-to-tokens" aria-hidden="true">#</a></h3><p>Another useful Service that <code>JwtAuthProvider</code> provides is being able to Convert your current Authenticated Session into a Token. Authenticating via Credentials Auth establishes an <strong>Authenticated Session</strong> with the server which is captured in the <a href="/sessions.html#cookie-session-ids">Session Cookies</a> that gets populated on the HTTP Client. This lets us access protected Services immediately after we&#39;ve successfully Authenticated, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> authResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Authenticate</span> <span class="token punctuation">{</span>
    provider <span class="token operator">=</span> <span class="token string">&quot;credentials&quot;</span><span class="token punctuation">,</span>
    UserName <span class="token operator">=</span> username<span class="token punctuation">,</span>
    Password <span class="token operator">=</span> password
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secured</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>However this only establishes an <strong>Authenticated Session</strong> to a single Server that only lasts until the session stored on the Server is valid. The easiest way to tell ServiceStack to convert the Session into a stateless JWT Cookie instead is to set the <code>UseTokenCookie</code> option when authenticating, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> authResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Authenticate</span> <span class="token punctuation">{</span>
    provider <span class="token operator">=</span> <span class="token string">&quot;credentials&quot;</span><span class="token punctuation">,</span>
    UserName <span class="token operator">=</span> username<span class="token punctuation">,</span>
    Password <span class="token operator">=</span> password<span class="token punctuation">,</span>
    UseTokenCookie <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Uses stateless ss-tok Cookie with our Session encapsulated in JWT Token</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secured</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">var</span></span> jwtToken <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetTokenCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//From ss-tok Cookie</span>
</code></pre></div><p>This also removes the our Session from the App Servers Cache as now the Users <strong>Authenticated Session</strong> is contained solely in the JWT Cookie and is valid until the JWT Cookies Expiration, instead of determined by Server Session State.</p><p>Another way we can access our Token is to call the <code>ConvertSessionToToken</code> Service which also converts our currently Authenticated Session into a JWT Token which we can use instead to communicate with all our independent Services, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> tokenResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConvertSessionToToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> jwtToken <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetTokenCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//From ss-tok Cookie</span>

<span class="token class-name"><span class="token keyword">var</span></span> client2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>service2BaseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span> BearerToken <span class="token operator">=</span> jwtToken <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client2<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secured2</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>service3BaseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span> BearerToken <span class="token operator">=</span> jwtToken <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client3<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secured3</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Tokens are returned in the Secure HttpOnly <strong>ss-tok</strong> Cookie, accessible from the <code>GetTokenCookie()</code> extension method as seen above.</p><p>The default behavior of <code>ConvertSessionToToken</code> is to remove the Current Session from the Auth Server which will prevent access to protected Services using our previously Authenticated Session. If you still want to preserve your existing Session you can indicate this with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> tokenResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConvertSessionToToken</span> <span class="token punctuation">{</span> PreserveSession <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="ajax-clients" tabindex="-1">Ajax Clients <a class="header-anchor" href="#ajax-clients" aria-hidden="true">#</a></h3><p>Using Cookies is the <a href="https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage" target="_blank" rel="noopener noreferrer">recommended way for using JWT Tokens in Web Applications</a> since the <code>HttpOnly</code> Cookie flag will prevent it from being accessible from JavaScript making them immune to XSS attacks whilst the <code>Secure</code> flag will ensure that the JWT Token is only ever transmitted over HTTPS.</p><p>You can convert your Session into a Token and set the <strong>ss-tok</strong> Cookie in your web page by sending an Ajax request to <code>/session-to-token</code>, e.g:</p><div class="language-javascript"><pre><code>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/session-to-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Likewise this API lets you convert Sessions created by any of the OAuth providers into a stateless JWT Token.</p><h3 id="switching-existing-sites-to-jwt" tabindex="-1">Switching existing Sites to JWT <a class="header-anchor" href="#switching-existing-sites-to-jwt" aria-hidden="true">#</a></h3><p>Thanks to the flexibility and benefits of using stateless JWT Tokens, we&#39;ve upgraded both our Single Page App <a href="https://techstacks.io" target="_blank" rel="noopener noreferrer">https://techstacks.io</a> which uses Twitter and GitHub OAuth to <a href="https://github.com/ServiceStackApps/TechStacks/blob/78ecd5e390e585c14f616bb27b24e0072b756040/src/TechStacks/TechStacks/js/user/services.js#L30" target="_blank" rel="noopener noreferrer">use JWT with a single Ajax call</a>:</p><div class="language-javascript"><pre><code>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/session-to-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>We&#39;ve also upgraded <a href="https://servicestack.net" target="_blank" rel="noopener noreferrer">https://servicestack.net</a> which as it uses normal Username/Password Credentials Authentication (i.e. instead of redirects in OAuth), it doesn&#39;t need any additional network calls as we can add the <code>UseTokenCookie</code> option as a hidden variable in our FORM request:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-login<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/auth/login<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UseTokenCookie<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Which just like <code>ConvertSessionToToken</code> returns a populated session in the <strong>ss-tok</strong> Cookie so now both <a href="https://techstacks.io" target="_blank" rel="noopener noreferrer">techstacks.io</a> and <a href="https://servicestack.net" target="_blank" rel="noopener noreferrer">servicestack.net</a> can maintain uninterrupted Sessions across multiple redeployments without a persistent Sessions cache.</p><h3 id="jwt-configuration" tabindex="-1">JWT Configuration <a class="header-anchor" href="#jwt-configuration" aria-hidden="true">#</a></h3><p>The JWT Auth Provider provides the following options to customize its behavior:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">JwtAuthProviderReader</span>
<span class="token punctuation">{</span>
    <span class="token comment">// The RSA Bit Key Length to use</span>
    <span class="token keyword">static</span> <span class="token class-name">RsaKeyLengths</span> UseRsaKeyLength <span class="token operator">=</span> RsaKeyLengths<span class="token punctuation">.</span>Bit2048

    <span class="token comment">// Different HMAC Algorithms supported</span>
    Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Func<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> HmacAlgorithms

    <span class="token comment">// Different RSA Signing Algorithms supported</span>
    Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>RSAParameters<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> RsaSignAlgorithms
    Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>RSAParameters<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;&gt;</span> RsaVerifyAlgorithms

    <span class="token comment">// Whether to only allow access via API Key from a secure connection. (default true)</span>
    <span class="token keyword">bool</span> RequireSecureConnection

    <span class="token comment">// Run custom filter after JWT Header is created</span>
    Action<span class="token operator">&lt;</span>JsonObject<span class="token punctuation">,</span> IAuthSession<span class="token operator">&gt;</span> CreateHeaderFilter

    <span class="token comment">// Run custom filter after JWT Payload is created</span>
    Action<span class="token operator">&lt;</span>JsonObject<span class="token punctuation">,</span> IAuthSession<span class="token operator">&gt;</span> CreatePayloadFilter

    <span class="token comment">// Run custom filter after session is restored from a JWT Token</span>
    Action<span class="token operator">&lt;</span>IAuthSession<span class="token punctuation">,</span> JsonObject<span class="token punctuation">,</span> IRequest<span class="token operator">&gt;</span> PopulateSessionFilter

    <span class="token comment">// Whether to encrypt JWE Payload (default false). </span>
    <span class="token comment">// Uses RSA-OAEP for Key Encryption and AES/128/CBC HMAC SHA256 for Conent Encryption</span>
    <span class="token keyword">bool</span> EncryptPayload

    <span class="token comment">// Which Hash Algorithm should be used to sign the JWT Token. (default HS256)</span>
    <span class="token keyword">string</span> HashAlgorithm

    <span class="token comment">// Whether to only allow processing of JWT Tokens using the configured HashAlgorithm. (default true)</span>
    <span class="token keyword">bool</span> RequireHashAlgorithm

    <span class="token comment">// The Issuer to embed in the token. (default ssjwt)</span>
    <span class="token keyword">string</span> Issuer

    <span class="token comment">// The Audience to embed in the token. (default null)</span>
    <span class="token keyword">string</span> Audience

    <span class="token comment">// What Id to use to identify the Key used to sign the token. (default First 3 chars of Base64 Key)</span>
    <span class="token keyword">string</span> KeyId

    <span class="token comment">// The AuthKey used to sign the JWT Token</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> AuthKey
    <span class="token comment">// Convenient overload to initialize AuthKey with Base64 string</span>
    <span class="token keyword">string</span> AuthKeyBase64

    <span class="token comment">// The RSA Private Key used to Sign the JWT Token when RSA is used</span>
    RSAParameters<span class="token punctuation">?</span> PrivateKey
    <span class="token comment">// Convenient overload to intialize the Private Key via exported XML</span>
    <span class="token keyword">string</span> PrivateKeyXml

    <span class="token comment">// The RSA Public Key used to Verify the JWT Token when RSA is used</span>
    RSAParameters<span class="token punctuation">?</span> PublicKey

    <span class="token comment">// Convenient overload to intialize the Public Key via exported XML</span>
    <span class="token keyword">string</span> PublicKeyXml

    <span class="token comment">// How long should JWT Tokens be valid for. (default 14 days)</span>
    TimeSpan ExpireTokensIn

    <span class="token comment">// Whether to invalidate all JWT Tokens issued before a specified date.</span>
    DateTime<span class="token punctuation">?</span> InvalidateTokensIssuedBefore

    <span class="token comment">// Modify the registration of ConvertSessionToToken Service</span>
    Dictionary<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ServiceRoutes
<span class="token punctuation">}</span>
</code></pre></div><h3 id="further-examples" tabindex="-1">Further Examples <a class="header-anchor" href="#further-examples" aria-hidden="true">#</a></h3><p>More examples of both the new API Key and JWT Auth Providers are available in <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/RazorRockstars.Console.Files/StatelessAuthTests.cs" target="_blank" rel="noopener noreferrer">StatelessAuthTests</a>.</p><h2 id="ormlite" tabindex="-1">OrmLite <a class="header-anchor" href="#ormlite" aria-hidden="true">#</a></h2><h3 id="cleaner-modernized-api-surface" tabindex="-1">Cleaner, Modernized API Surface <a class="header-anchor" href="#cleaner-modernized-api-surface" aria-hidden="true">#</a></h3><p>As <a href="/releases/v4.0.56.html#deprecating-legacy-ormlite-apis">mentioned in the last release</a> we&#39;ve moved OrmLite&#39;s deprecated APIs into the <code>ServiceStack.OrmLite.Legacy</code> namespace leaving a clean, modern API surface in OrmLite&#39;s default namespace.</p><p>This primarily affects the original OrmLite APIs ending with <code>*Fmt</code> which were used to provide a familiar API for C# developers based on C#&#39;s <code>string.Format()</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> tracks <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SelectFmt</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Artist = {0} AND Album = {1}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nirvana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nevermind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Whilst you can continue using the legacy API by adding the <code>ServiceStack.OrmLite.Legacy</code> namespace, it&#39;s also a good time to consider switching using any of the recommended parameterized APIs below:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> tracks <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Artist <span class="token operator">==</span> <span class="token string">&quot;Nirvana&quot;</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Album <span class="token operator">==</span> <span class="token string">&quot;Nevermind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Artist <span class="token operator">==</span> <span class="token string">&quot;Nirvana&quot;</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Album <span class="token operator">==</span> <span class="token string">&quot;Nevermind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> tracks <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> tracks <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Artist = @artist AND Album = @album&quot;</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token punctuation">{</span> artist <span class="token operator">=</span> <span class="token string">&quot;Nirvana&quot;</span><span class="token punctuation">,</span> album <span class="token operator">=</span> <span class="token string">&quot;Nevermind&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> tracks <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token string">&quot;SELECT * FROM Track WHERE Artist = @artist AND Album = @album&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token punctuation">{</span> artist <span class="token operator">=</span> <span class="token string">&quot;Nirvana&quot;</span><span class="token punctuation">,</span> album <span class="token operator">=</span> <span class="token string">&quot;Nevermind&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The other API&#39;s that have been moved are those that inject an <code>SqlExpression&lt;T&gt;</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> tracks <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> 
    q<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Artist <span class="token operator">==</span> <span class="token string">&quot;Nirvana&quot;</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Album <span class="token operator">==</span> <span class="token string">&quot;Nevermind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This overload would confuse intellisense where lambda&#39;s could be injected with either <code>T</code> or <code>SqlExpression&lt;T&gt;</code>. We&#39;ve now removed the <code>SqlExpression&lt;T&gt;</code> overloads so now the only typed POCO parameter is injected. Existing APIs can use <code>db.From&lt;T&gt;()</code> to resolve any build errors, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> tracks <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Artist <span class="token operator">==</span> <span class="token string">&quot;Nirvana&quot;</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Album <span class="token operator">==</span> <span class="token string">&quot;Nevermind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="parameterized-by-default" tabindex="-1">Parameterized by default <a class="header-anchor" href="#parameterized-by-default" aria-hidden="true">#</a></h3><p>The <code>OrmLiteConfig.UseParameterizeSqlExpressions</code> option that could be used to disable parameterized SqlExpressions and revert to using in-line escaped SQL has been removed in along with all its dependent functionality, so now all queries just use db params.</p><h3 id="improved-partial-updates-and-inserts-apis" tabindex="-1">Improved partial Updates and Inserts APIs <a class="header-anchor" href="#improved-partial-updates-and-inserts-apis" aria-hidden="true">#</a></h3><p>One of the limitations we had with using LINQ Expressions was the <a href="http://stackoverflow.com/a/16847364/85785" target="_blank" rel="noopener noreferrer">lack of support for assignment expressions</a> which meant we previously needed to do capture which fields you wanted updated in partial updates, e.g:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateOnly</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Age <span class="token operator">=</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">onlyFields</span><span class="token punctuation">:</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Justin Bieber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//increments age by 1</span>
db<span class="token punctuation">.</span><span class="token function">UpdateAdd</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Age <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">onlyFields</span><span class="token punctuation">:</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Justin Bieber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Taking a <a href="https://github.com/ServiceStack/PocoDynamo#updating-an-item-with-pocodynamo" target="_blank" rel="noopener noreferrer">leaf from PocoDynamo</a> we&#39;ve added a better API using a lambda expression which now saves us from having to specify which fields to update twice since we&#39;re able to infer them from the returned Member Init Expression, e.g:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateOnly</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Age <span class="token operator">=</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Justin Bieber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//increments age by 1</span>
db<span class="token punctuation">.</span><span class="token function">UpdateAdd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Age <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Justin Bieber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Like most API&#39;s, async equivalents are also available:</p><div class="language-csharp"><pre><code><span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">UpdateOnlyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Age <span class="token operator">=</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Justin Bieber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">UpdateOnlyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Age <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Justin Bieber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Likewise we&#39;ve extended this feature to partial INSERT&#39;s as well:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">InsertOnly</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Justin Bieber&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">InsertOnlyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Poco</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Justin Bieber&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="new-columnexists-api" tabindex="-1">New ColumnExists API <a class="header-anchor" href="#new-columnexists-api" aria-hidden="true">#</a></h3><p>We&#39;ve added support for a Typed <code>ColumnExists</code> API across all supported RDBMS&#39;s which makes it easy to inspect the state of an RDBMS Table which can be used to determine what modifications you want on it, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">Poco</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Ssn <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DropTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TableExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= false</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TableExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= true</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ColumnExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Ssn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= true</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DropColumn</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Ssn<span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ColumnExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Ssn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= false</span>
</code></pre></div><p>In a future version of your Table POCO you can use <code>ColumnExists</code> to detect which columns haven&#39;t been added yet, then use <code>AddColumn</code> to add it, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">Poco</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Default</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ColumnExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//= false</span>
    db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddColumn</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ColumnExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= true</span>
</code></pre></div><p>The <code>[Default]</code> attribute lets you specify a default value, required when adding non-nullable columns to a table with existing rows.</p><h3 id="new-selectmulti-api" tabindex="-1">New SelectMulti API <a class="header-anchor" href="#new-selectmulti-api" aria-hidden="true">#</a></h3><p>Previously the only Typed API available to select data across multiple joined tables was to use a <a href="https://github.com/ServiceStack/ServiceStack.OrmLite#selecting-multiple-columns-across-joined-tables" target="_blank" rel="noopener noreferrer">Custom POCO with all the columns</a> you want from any of the joined tables, e.g:</p><div class="language-"><pre><code>List&lt;FullCustomerInfo&gt; customers = db.Select&lt;FullCustomerInfo&gt;(
    db.From&lt;Customer&gt;().Join&lt;CustomerAddress&gt;());
</code></pre></div><p>The new <code>SelectMulti</code> API now lets you use your existing POCO&#39;s to access results from multiple joined tables by returning them in a Typed Tuple:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">,</span> CustomerAddress<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">,</span> Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreatedDate <span class="token operator">&gt;=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">And</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomerAddress<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Country <span class="token operator">==</span> <span class="token string">&quot;Australia&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SelectMulti</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">,</span> CustomerAddress<span class="token punctuation">,</span> Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> tuple <span class="token keyword">in</span> results<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Customer</span> customer <span class="token operator">=</span> tuple<span class="token punctuation">.</span>Item1<span class="token punctuation">;</span>
    <span class="token class-name">CustomerAddress</span> custAddress <span class="token operator">=</span> tuple<span class="token punctuation">.</span>Item2<span class="token punctuation">;</span>
    <span class="token class-name">Order</span> custOrder <span class="token operator">=</span> tuple<span class="token punctuation">.</span>Item3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="using-ormlite-with-dapper" tabindex="-1">Using OrmLite with Dapper <a class="header-anchor" href="#using-ormlite-with-dapper" aria-hidden="true">#</a></h4><p>One of the benefits of Micro ORM&#39;s is that they can be used together, so alternatively you could use a combination of OrmLite to create the typed query using its built-in Reference Conventions and then use OrmLite&#39;s embedded version of <a href="http://stackoverflow.com/a/37420341/85785" target="_blank" rel="noopener noreferrer">Dapper to Query Multiple result-sets</a> into your existing POCOs:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">,</span> CustomerAddress<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">,</span> Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreatedDate <span class="token operator">&gt;=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">And</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomerAddress<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Country <span class="token operator">==</span> <span class="token string">&quot;Australia&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> multi <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">QueryMultiple</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">ToSelectStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> multi<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">,</span> CustomerAddress<span class="token punctuation">,</span> Order<span class="token punctuation">,</span> 
        Tuple<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">,</span>CustomerAddress<span class="token punctuation">,</span>Order<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Tuple<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> tuple <span class="token keyword">in</span> results<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> tuple<span class="token punctuation">.</span>Item1<span class="token punctuation">;</span>
        <span class="token class-name">CustomerAddress</span> custAddress <span class="token operator">=</span> tuple<span class="token punctuation">.</span>Item2<span class="token punctuation">;</span>
        <span class="token class-name">Order</span> custOrder <span class="token operator">=</span> tuple<span class="token punctuation">.</span>Item3<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="multiple-apis-to-fetch-data" tabindex="-1">Multiple APIs to fetch data <a class="header-anchor" href="#multiple-apis-to-fetch-data" aria-hidden="true">#</a></h3><p>One of the benefits of OrmLite is how the query is constructed and executed is independent from how the results are mapped. So it doesn&#39;t matter whether the query used raw custom SQL or a Typed SQL Expression, OrmLite just looks at the dataset returned to workout how the results should be mapped. This allows you to use any of the <a href="http://stackoverflow.com/a/37443162/85785" target="_blank" rel="noopener noreferrer">loose-typed Convenience APIs</a> to fetch data from multiple joined tables. In addition to using <a href="https://github.com/ServiceStack/ServiceStack.OrmLite#dynamic-result-sets" target="_blank" rel="noopener noreferrer">untyped .NET Collections</a>, we&#39;ve also now added support for <code>Select&lt;dynamic&gt;</code> as well:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Employee<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Department<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Employee<span class="token punctuation">,</span> Department<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> e<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> d<span class="token punctuation">.</span>Name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">dynamic</span></span> result <span class="token keyword">in</span> results<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> firstName <span class="token operator">=</span> result<span class="token punctuation">.</span>FirstName<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> lastName <span class="token operator">=</span> result<span class="token punctuation">.</span>LastName<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> deptName <span class="token operator">=</span> result<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="customselect-attribute" tabindex="-1">CustomSelect Attribute <a class="header-anchor" href="#customselect-attribute" aria-hidden="true">#</a></h3><p>The new <code>[CustomSelect]</code> can be used to define properties you want populated from a Custom SQL Function or Expression instead of a normal persisted column, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Block</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Width <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Height <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomSelect</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Width * Height&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Area <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Default</span><span class="token attribute-arguments"><span class="token punctuation">(</span>OrmLiteVariables<span class="token punctuation">.</span>SystemUtc<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreatedDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomSelect</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;FORMAT(CreatedDate, &#39;yyyy-MM-dd&#39;)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DateFormat <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Block</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Width <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> Height <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> block <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Block<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

block<span class="token punctuation">.</span>Area<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= 50</span>

block<span class="token punctuation">.</span>DateFormat<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= 2016-06-08</span>
</code></pre></div><h3 id="ormliteauthrepository" tabindex="-1">OrmLiteAuthRepository <a class="header-anchor" href="#ormliteauthrepository" aria-hidden="true">#</a></h3><p>OrmLiteAuthRepository can now be configured to store User Auth data in a separate database with:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteAuthRepository</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">namedConnnection</span><span class="token punctuation">:</span><span class="token string">&quot;AuthDb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h3 id="optimize-like-searches" tabindex="-1">Optimize LIKE Searches <a class="header-anchor" href="#optimize-like-searches" aria-hidden="true">#</a></h3><p>One of the primary goals of OrmLite is to expose and RDBMS agnostic Typed API Surface which will allow you to easily switch databases, or access multiple databases at the same time with the same behavior.</p><p>One instance where this can have an impact is needing to use <code>UPPER()</code> in <strong>LIKE</strong> searches to enable case-insensitive <strong>LIKE</strong> queries across all RDBMS. The drawback of this is that LIKE Queries are not able to use any existing RDBMS indexes. We can disable this feature and return to the default RDBMS behavior with:</p><div class="language-csharp"><pre><code>OrmLiteConfig<span class="token punctuation">.</span>StripUpperInLike <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><p>Allowing all <strong>LIKE</strong> Searches in OrmLite or AutoQuery to use any available RDBMS Index.</p><h3 id="ormlite-community-contributions" tabindex="-1">OrmLite Community Contributions <a class="header-anchor" href="#ormlite-community-contributions" aria-hidden="true">#</a></h3><p>We&#39;d like to thank <a href="https://github.com/shift-evgeny" target="_blank" rel="noopener noreferrer">Evgeny Morozov</a> from the ServiceStack Community who contributed several fixes and performance improvements to OrmLite in this release.</p><h2 id="servicestack-redis" tabindex="-1">ServiceStack.Redis <a class="header-anchor" href="#servicestack-redis" aria-hidden="true">#</a></h2><h3 id="new-redis-geo-operations" tabindex="-1">New Redis GEO Operations <a class="header-anchor" href="#new-redis-geo-operations" aria-hidden="true">#</a></h3><p>The latest <a href="http://antirez.com/news/104" target="_blank" rel="noopener noreferrer">release of Redis 3.2.0</a> brings it exciting new <a href="http://redis.io/commands/geoadd" target="_blank" rel="noopener noreferrer">GEO capabilities</a> which will let you store Lat/Long coordinates in Redis and query locations within a specified radius.</p><p>To demonstrate this functionality we&#39;ve created a new <a href="https://github.com/ServiceStackApps/redis-geo" target="_blank" rel="noopener noreferrer">Redis GEO Live Demo</a> which lets you click on anywhere in the U.S. to find the list of nearest cities within a given radius:</p><p><a href="http://redisgeo.netcore.io/" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/redis-geo/redisgeo-screenshot.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://redisgeo.netcore.io" target="_blank" rel="noopener noreferrer">http://redisgeo.netcore.io</a></p></blockquote><p>Redis GEO just <a href="https://github.com/ServiceStackApps/redis-geo/blob/master/README.md#import-geonames-dataset" target="_blank" rel="noopener noreferrer">imports postal data coordinates</a> for each State from the <a href="http://download.geonames.org/export/zip/" target="_blank" rel="noopener noreferrer">geonames.org postal data</a> for the specified country.</p><p>Only the single Service below was required to implement the Apps functionality which just returns all locations for a given state within a specified radius, sorted by nearest location:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/georesults/{State}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FindGeoResults</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>RedisGeoResult<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> State <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> WithinKm <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Lng <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Lat <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisGeoServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">FindGeoResults</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> Redis<span class="token punctuation">.</span><span class="token function">FindGeoResultsInRadius</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>State<span class="token punctuation">,</span> 
            <span class="token named-parameter punctuation">longitude</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>Lng<span class="token punctuation">,</span> <span class="token named-parameter punctuation">latitude</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>Lat<span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">radius</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>WithinKm<span class="token punctuation">.</span><span class="token function">GetValueOrDefault</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">unit</span><span class="token punctuation">:</span> RedisGeoUnit<span class="token punctuation">.</span>Kilometers<span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">sortByNearest</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> results<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Redis&#39;s new <a href="http://redis.io/commands/geoadd" target="_blank" rel="noopener noreferrer">GEO Operations</a> are available in the new ServiceStack.Redis API&#39;s below:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisClient</span>
<span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">AddGeoMember</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> longitude<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> latitude<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> member<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">AddGeoMembers</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">RedisGeo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> geoPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">CalculateDistanceBetweenGeoMembers</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> from<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> to<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> unit<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GetGeohashes</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> members<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>RedisGeo<span class="token punctuation">&gt;</span></span> <span class="token function">GetGeoCoordinates</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> members<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">FindGeoMembersInRadius</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> lng<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> lat<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> radius<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>RedisGeoResult<span class="token punctuation">&gt;</span></span> <span class="token function">FindGeoResultsInRadius</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> lng<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> lat<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> radius<span class="token punctuation">,</span> 
        <span class="token class-name"><span class="token keyword">string</span></span> unit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> count <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> sortByNearest <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">FindGeoMembersInRadius</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> member<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> radius<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>RedisGeoResult<span class="token punctuation">&gt;</span></span> <span class="token function">FindGeoResultsInRadius</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> member<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> radius<span class="token punctuation">,</span> 
        <span class="token class-name"><span class="token keyword">string</span></span> unit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> count <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> sortByNearest <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisNativeClient</span>
<span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">GeoAdd</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> longitude<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> latitude<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> member<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">GeoAdd</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">RedisGeo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> geoPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GeoDist</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromMember<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toMember<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> unit <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GeoHash</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> members<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>RedisGeo<span class="token punctuation">&gt;</span></span> <span class="token function">GeoPos</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> members<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>RedisGeoResult<span class="token punctuation">&gt;</span></span> <span class="token function">GeoRadius</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> lng<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> lat<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> radius<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> unit<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">bool</span></span> withCoords<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> withDist<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> withHash<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> count<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> asc<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>RedisGeoResult<span class="token punctuation">&gt;</span></span> <span class="token function">GeoRadiusByMember</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> member<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> radius<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> unit<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">bool</span></span> withCoords<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> withDist<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> withHash<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> count<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> asc<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="binary-key-apis" tabindex="-1">Binary Key APIs <a class="header-anchor" href="#binary-key-apis" aria-hidden="true">#</a></h3><p>New APIs were added to <code>RedisNativeClient</code> which lets persist and access data using a binary key:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">RedisNativeClient</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> expirySeconds<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> expiryMs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetEx</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> expireInSeconds<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">HSet</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> hashId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">HGet</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> hashId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">Del</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">HDel</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> hashId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">PExpire</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> ttlMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Expire</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="slack-logger" tabindex="-1">Slack Logger <a class="header-anchor" href="#slack-logger" aria-hidden="true">#</a></h2><p>The new Slack Logger can be used to send Logging to a custom Slack Channel which is a nice interactive way for your development team on Slack to see and discuss logging messages as they come in.</p><p>To start using it first download it from NuGet:</p><pre><code>PM&gt; Install-Package ServiceStack.Logging.Slack
</code></pre><p>Then configure it with the channels you want to log it to, e.g:</p><div class="language-csharp"><pre><code>LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SlackLogFactory</span><span class="token punctuation">(</span><span class="token string">&quot;{GeneratedSlackUrlFromCreatingIncomingWebhook}&quot;</span><span class="token punctuation">,</span> 
    <span class="token named-parameter punctuation">debugEnabled</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Alternate default channel than one specified when creating Incoming Webhook.</span>
    DefaultChannel <span class="token operator">=</span> <span class="token string">&quot;other-default-channel&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//Custom channel for Fatal logs. Warn, Info etc will fallback to DefaultChannel or </span>
    <span class="token comment">//channel specified when Incoming Webhook was created.</span>
    FatalChannel <span class="token operator">=</span> <span class="token string">&quot;more-grog-logs&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//Custom bot username other than default</span>
    BotUsername <span class="token operator">=</span> <span class="token string">&quot;Guybrush Threepwood&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//Custom channel prefix can be provided to help filter logs from different users or environments. </span>
    ChannelPrefix <span class="token operator">=</span> System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>WindowsIdentity<span class="token punctuation">.</span><span class="token function">GetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name
<span class="token punctuation">}</span><span class="token punctuation">;</span>

LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SlackLogFactory</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Some more usage examples are available in <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Logging.Tests/UnitTests/SlackLogFactoryTests.cs" target="_blank" rel="noopener noreferrer">SlackLogFactoryTests</a>.</p><h2 id="performance-and-memory-improvements" tabindex="-1">Performance and Memory improvements <a class="header-anchor" href="#performance-and-memory-improvements" aria-hidden="true">#</a></h2><p>Several performance and memory usage improvements were also added across the board in this release where all ServiceStack libraries have now switched to using a ThreadStatic <code>StringBuilder</code> Cache where possible to reuse existing <code>StringBuilder</code> instances and save on Heap allocations.</p><p>For similar improvements you can also use the new <code>StringBuilderCache</code> in your own code where you&#39;d just need to call <code>Allocate()</code> to get access to a reset <code>StringBuilder</code> instance and call <code>ReturnAndFree()</code> when you&#39;re done to access the <code>string</code> and return the <code>StringBuilder</code> to the cache, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToMd5Hash</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Stream</span> stream<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token operator">=</span> MD5<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> StringBuilderCache<span class="token punctuation">.</span><span class="token function">Allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hash<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;x2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> StringBuilderCache<span class="token punctuation">.</span><span class="token function">ReturnAndFree</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>There&#39;s also a <code>StringBuilderCacheAlt</code> for when you need access to 2x StringBuilders at the same time.</p><h3 id="string-parsing-apis" tabindex="-1">String Parsing APIs <a class="header-anchor" href="#string-parsing-apis" aria-hidden="true">#</a></h3><p>In several areas we used <code>SplitOnFirst()</code> and <code>SplitOnLast()</code> String extension methods to parse strings which returns a <code>string[]</code> containing the string components we were interested in, e.g we can use it to fetch the Type name from a Generic Type Definition with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> genericTypeName <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetGenericTypeDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">SplitOnFirst</span><span class="token punctuation">(</span><span class="token string character">&#39;\`&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><p>Whilst this works it creates a temporary array to store the components. We can get the same result and save a Heap Allocation by using the new <code>LeftPart</code> API instead:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> genericTypeName <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetGenericTypeDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">LeftPart</span><span class="token punctuation">(</span><span class="token string character">&#39;\`&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which in addition to saving unnecessary allocations, is shorter and reads better, win, win!</p><p>The new APIs have the same behavior as the existing <code>SplitOnFirst()</code> and <code>SplitOnLast()</code> extension methods below:</p><div class="language-csharp"><pre><code>str<span class="token punctuation">.</span><span class="token function">LeftPart</span><span class="token punctuation">(</span><span class="token string character">&#39;:&#39;</span><span class="token punctuation">)</span>      <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">SplitOnFirst</span><span class="token punctuation">(</span><span class="token string character">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
str<span class="token punctuation">.</span><span class="token function">RightPart</span><span class="token punctuation">(</span><span class="token string character">&#39;:&#39;</span><span class="token punctuation">)</span>     <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">SplitOnFirst</span><span class="token punctuation">(</span><span class="token string character">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
str<span class="token punctuation">.</span><span class="token function">LastLeftPart</span><span class="token punctuation">(</span><span class="token string character">&#39;:&#39;</span><span class="token punctuation">)</span>  <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">SplitOnLast</span><span class="token punctuation">(</span><span class="token string character">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
str<span class="token punctuation">.</span><span class="token function">LastRightPart</span><span class="token punctuation">(</span><span class="token string character">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">SplitOnLast</span><span class="token punctuation">(</span><span class="token string character">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="typeconstants" tabindex="-1">TypeConstants <a class="header-anchor" href="#typeconstants" aria-hidden="true">#</a></h3><p>We&#39;ve switched to using the new <a href="https://github.com/ServiceStack/ServiceStack.Text/blob/master/src/ServiceStack.Text/TypeConstants.cs" target="_blank" rel="noopener noreferrer">TypeConstants</a> which holds static instances of many popular empty collections and <code>Task&lt;T&gt;</code> results which you can reuse instead of creating new instances, e.g:</p><div class="language-csharp"><pre><code>TypeConstants<span class="token punctuation">.</span>EmptyStringArray <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
TypeConstants<span class="token punctuation">.</span>EmptyObjectArray <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
TypeConstants<span class="token operator">&lt;</span>CustomType<span class="token operator">&gt;</span><span class="token punctuation">.</span>EmptyArray <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="cachedexpressioncompiler" tabindex="-1">CachedExpressionCompiler <a class="header-anchor" href="#cachedexpressioncompiler" aria-hidden="true">#</a></h3><p>We&#39;ve added MVC&#39;s <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/CachedExpressionCompiler.cs" target="_blank" rel="noopener noreferrer">CachedExpressionCompiler</a> to <strong>ServiceStack.Common</strong> and where possible are now using it in-place of Compiling LINQ expressions directly in all of ServiceStack libraries.</p><h3 id="getactivator-and-getcachedgenerictype" tabindex="-1">GetActivator and GetCachedGenericType <a class="header-anchor" href="#getactivator-and-getcachedgenerictype" aria-hidden="true">#</a></h3><p>The new <code>GetCachedGenericType()</code> and <code>GetActivator()</code> API&#39;s caches and improves performance when dynamically creating instances of generic types. We can use this to return a cached compiled delegate accepting any number of <code>object[]</code> args to dynamically create instances of Typed Tuples, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> genericArgs <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TypeA</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TypeB</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Type</span> genericType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Tuple<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetCachedGenericType</span><span class="token punctuation">(</span>genericArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> ctor <span class="token operator">=</span> genericType<span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span>genericArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> activator <span class="token operator">=</span> ctor<span class="token punctuation">.</span><span class="token function">GetActivator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> tuple <span class="token operator">=</span> <span class="token punctuation">(</span>Tuple<span class="token operator">&lt;</span>TypeA<span class="token punctuation">,</span> TypeB<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token function">activator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TypeA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TypeB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="object-pools" tabindex="-1">Object Pools <a class="header-anchor" href="#object-pools" aria-hidden="true">#</a></h3><p>We&#39;ve added the Object pooling classes that Roslyn&#39;s code-base uses in <code>ServiceStack.Text.Pools</code> which lets you create reusable object pools of instances. The available pools include:</p><ul><li><code>ObjectPool&lt;T&gt;</code></li><li><code>PooledObject&lt;T&gt;</code></li><li><code>SharedPools</code></li><li><code>StringBuilderPool</code></li></ul><h3 id="enum-hasflag" tabindex="-1">Enum.HasFlag <a class="header-anchor" href="#enum-hasflag" aria-hidden="true">#</a></h3><p>To <a href="https://twitter.com/hmemcpy/status/739884409726328832" target="_blank" rel="noopener noreferrer">reduce allocations</a> we&#39;ve replaced our usage of <code>Enum.HasFlag</code> to using bit-wise operations instead.</p><h2 id="other-features" tabindex="-1">Other Features <a class="header-anchor" href="#other-features" aria-hidden="true">#</a></h2><h3 id="add-servicestack-reference-wildcards" tabindex="-1">Add ServiceStack Reference Wildcards <a class="header-anchor" href="#add-servicestack-reference-wildcards" aria-hidden="true">#</a></h3><p>The <code>IncludeType</code> option in all <a href="/add-servicestack-reference.html">Add ServiceStack Reference</a> languages now allow specifying a <code>.*</code> wildcard suffix on Request DTO&#39;s as a shorthand to return all dependent DTOs for that Service, e.g:</p><pre><code>IncludeTypes: RequestDto.*
</code></pre><p>Special thanks to <a href="https://github.com/donaldgray" target="_blank" rel="noopener noreferrer">@donaldgray</a> for contributing this feature.</p><h3 id="new-servereventsclient-apis" tabindex="-1">New ServerEventsClient APIs <a class="header-anchor" href="#new-servereventsclient-apis" aria-hidden="true">#</a></h3><p>Use new Typed <a href="https://github.com/ServiceStack/ServiceStack/commit/1476e232502f690ba1832600c221ad76c15cfda7" target="_blank" rel="noopener noreferrer">GetChannelSubscribers APIs</a> added to <a href="/csharp-server-events-client.html">C#/.NET ServerEventsClient</a> to fetch Channel Subscribers, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> clientA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerEventsClient</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> channelASubscribers <span class="token operator">=</span> clientA<span class="token punctuation">.</span><span class="token function">GetChannelSubscribers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> channelASubscribers <span class="token operator">=</span> <span class="token keyword">await</span> clientA<span class="token punctuation">.</span><span class="token function">GetChannelSubscribersAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="new-iserviceclient-apis" tabindex="-1">New IServiceClient APIs <a class="header-anchor" href="#new-iserviceclient-apis" aria-hidden="true">#</a></h3><p>Use the new Typed extension methods to fetch Session Cookies from all Service Clients:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> sessionId <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newClient<span class="token punctuation">.</span><span class="token function">SetSessionId</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> permSessionId <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetPermanentSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newClient<span class="token punctuation">.</span><span class="token function">SetPermanentSessionId</span><span class="token punctuation">(</span>permSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetTokenCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="registerservicesinassembly" tabindex="-1">RegisterServicesInAssembly <a class="header-anchor" href="#registerservicesinassembly" aria-hidden="true">#</a></h3><p>Plugins can use the new <code>RegisterServicesInAssembly()</code> API to register multiple Services in a specified assembly, e.g:</p><div class="language-csharp"><pre><code>appHost<span class="token punctuation">.</span><span class="token function">RegisterServicesInAssembly</span><span class="token punctuation">(</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="fluentvalidation" tabindex="-1">FluentValidation <a class="header-anchor" href="#fluentvalidation" aria-hidden="true">#</a></h3><p>The current <code>IRequest</code> is now injected and can be used within child Collection Validators as well, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRequestValidator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AbstractValidator<span class="token punctuation">&lt;</span>CustomRequestError<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MyRequestValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">RuleSet</span><span class="token punctuation">(</span>ApplyTo<span class="token punctuation">.</span>Post <span class="token operator">|</span> ApplyTo<span class="token punctuation">.</span>Put <span class="token operator">|</span> ApplyTo<span class="token punctuation">.</span>Get<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> req <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">;</span>
            <span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>PathInfo<span class="token punctuation">.</span><span class="token function">ContainsAny</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetCollectionValidator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyRequestItemValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRequestItemValidator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AbstractValidator<span class="token punctuation">&lt;</span>CustomRequestItem<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MyRequestItemValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>QueryString<span class="token punctuation">[</span><span class="token string">&quot;Items&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ContainsAny</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="http-utils" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack/wiki/Http-Utils" target="_blank" rel="noopener noreferrer">HTTP Utils</a> <a class="header-anchor" href="#http-utils" aria-hidden="true">#</a></h2><p>Equivalent Async APIs have been added matching all Sync <a href="https://github.com/ServiceStack/ServiceStack/wiki/Http-Utils" target="_blank" rel="noopener noreferrer">HTTP Utils</a> APIs which are now all mockable, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResultsFilter</span> <span class="token punctuation">{</span> BytesResult <span class="token operator">=</span> <span class="token string">&quot;mocked&quot;</span><span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//= &quot;mocked&quot;.ToUtf8Bytes():</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mocked <span class="token operator">=</span> <span class="token keyword">await</span> url<span class="token punctuation">.</span><span class="token function">GetBytesFromUrlAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   
    mocked <span class="token operator">=</span> <span class="token keyword">await</span> url<span class="token punctuation">.</span><span class="token function">GetBytesFromUrlAsync</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">accept</span><span class="token punctuation">:</span> <span class="token string">&quot;image/png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    mocked <span class="token operator">=</span> <span class="token keyword">await</span> url<span class="token punctuation">.</span><span class="token function">PostBytesToUrlAsync</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">requestBody</span><span class="token punctuation">:</span><span class="token string">&quot;postdata=1&quot;</span><span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h1 id="v4-0-56-release-notes" tabindex="-1"><a href="/releases/v4.0.56.html">v4.0.56 Release Notes</a> <a class="header-anchor" href="#v4-0-56-release-notes" aria-hidden="true">#</a></h1>__VP_STATIC_END__`,300),p=[o];function c(l,i,u,r,k,d){return a(),s("div",null,p)}var g=n(e,[["render",c]]);export{m as __pageData,g as default};
