import{_ as e,c as t,o as a,a as s}from"./app.14440598.js";const g='{"title":"AngularJS v1.5 VS.NET Project Template","description":"","frontmatter":{"title":"AngularJS v1.5 VS.NET Project Template","slug":"templates-angularjs-v15"},"headers":[{"level":2,"title":"Common Template Project Structure","slug":"common-template-project-structure"}],"relativePath":"templates-angularjs-v15.md","lastUpdated":1634495308450}',r={},o=s('<p>The simple HelloWorld AngularJS application that is provided in the template calls the <code>/hello/{Name}</code> route and displays the result in the <code>&lt;p&gt;</code> below.</p><p><img src="https://github.com/ServiceStack/ServiceStackVS/raw/master/Images/angularjs_hello_app.png" alt=""></p><p>This template uses NuGet to manage JavaScript dependencies like Angular, unlike the AngularJS App template which uses NPM and Gulp.</p><h2 id="common-template-project-structure" tabindex="-1">Common Template Project Structure <a class="header-anchor" href="#common-template-project-structure" aria-hidden="true">#</a></h2><p>Starting a new application using a ServiceStackVS template will give you 4 new projects.</p><ul><li>Host project</li><li>Service Interface project</li><li>Service Model project</li><li>Unit Testing project</li></ul><p><img src="https://raw.githubusercontent.com/ServiceStack/ServiceStackVS/master/Images/angularjs_solution.png" alt=""></p><p>The Host project contains an <code>AppHost</code> which has been configured with the <code>RazorFormat</code> plugin as well as hosting all the required JavaScript packages like AngularJS, Bootstrap and jQuery. It is setup initially with a single <code>_Layout.cshtml</code> using the default Bootstrap template and a <code>default.cshtml</code> which contains the HelloWorld demo. The Single Page Application (SPA) templates use a plain <code>default.html</code> in which these Razor views aren&#39;t used.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/ServiceStackVS/master/Images/angularjs_main_project.png" alt=""></p><p>The Host project has dependencies on the Service Model and Service Interface projects. These are the projects that contain your request/response DTOs, validators and filters. This structure is trying to encourage have your data structures and services in separate projects make testing and reuse easier.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/ServiceStackVS/master/Images/angularjs_other_projects.png" alt=""></p><p>The Unit Testing project, also as a dependency on these projects as it tests them in isolation of the main Host project. In the template, we are using the <code>BasicAppHost</code> to mock the AppHost we are using in the Host project. The example unit test is using NUit to setup and run the tests.</p>',12),c=[o];function i(n,p,l,u,h,d){return a(),t("div",null,c)}var S=e(r,[["render",i]]);export{g as __pageData,S as default};
