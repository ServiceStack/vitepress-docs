import{_ as a,c as n,o as s,a as e}from"./app.14440598.js";const h='{"title":"v4.0.09 Release Notes","description":"","frontmatter":{"title":"v4.0.09 Release Notes","slug":"v4-0-09"},"headers":[{"level":2,"title":"Rabbit MQ Support","slug":"rabbit-mq-support"},{"level":3,"title":"Configurable Metadata Pages","slug":"configurable-metadata-pages"},{"level":3,"title":"OrmLite new runtime typed API","slug":"ormlite-new-runtime-typed-api"},{"level":2,"title":"Breaking changes","slug":"breaking-changes"},{"level":3,"title":"Messaging","slug":"messaging"},{"level":3,"title":"ServiceStack.Text","slug":"servicestack-text"},{"level":3,"title":"OrmLite","slug":"ormlite"}],"relativePath":"releases/v4.0.09.md","lastUpdated":1634495308430}',t={},p=e(`<h2 id="rabbit-mq-support" tabindex="-1">Rabbit MQ Support <a class="header-anchor" href="#rabbit-mq-support" aria-hidden="true">#</a></h2><p>The biggest feature in this release is ServiceStack&#39;s new support for <a href="/rabbit-mq.html">hosting Services via a Rabbit MQ Server</a>, expanding on our existing <a href="/messaging.html">Redis MQ and In Memory messaging</a> options with a new durable MQ option in the robust and popular <a href="http://www.rabbitmq.com" target="_blank" rel="noopener noreferrer">Rabbit MQ</a>. ServiceStack&#39;s Rabbit MQ support is available on NuGet with:</p><pre><code>PM&gt; Install-Package ServiceStack.RabbitMq
</code></pre><p>A new <a href="https://github.com/mythz/rabbitmq-windows" target="_blank" rel="noopener noreferrer">Rabbit MQ on Windows installation and setup guide</a> was published containing code samples for working with Rabbit MQ from C#/.NET.</p><h3 id="configurable-metadata-pages" tabindex="-1">Configurable Metadata Pages <a class="header-anchor" href="#configurable-metadata-pages" aria-hidden="true">#</a></h3><p>New customizable filters were added to the <code>MetadataFeature</code> plugin to allow customization of the Master and detail metadata pages before they&#39;re rendered. E.g. you can reverse the order of operation names with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> metadata <span class="token operator">=</span> <span class="token punctuation">(</span>MetadataFeature<span class="token punctuation">)</span>Plugins<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token keyword">is</span> <span class="token class-name">MetadataFeature</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
metadata<span class="token punctuation">.</span>IndexPageFilter <span class="token operator">=</span> page <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    page<span class="token punctuation">.</span>OperationNames<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> y<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="ormlite-new-runtime-typed-api" tabindex="-1">OrmLite new runtime typed API <a class="header-anchor" href="#ormlite-new-runtime-typed-api" aria-hidden="true">#</a></h3><p>The <a href="https://github.com/ServiceStack/ServiceStack.OrmLite/blob/master/src/ServiceStack.OrmLite/IUntypedApi.cs" target="_blank" rel="noopener noreferrer">IUntypedApi</a> interface is useful for when you only have access to a late-bound object runtime type which is accessible via <code>db.CreateTypedApi</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseClass</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseClass</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> row <span class="token operator">=</span> <span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Target</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> useType <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> typedApi <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">CreateTypedApi</span><span class="token punctuation">(</span>useType<span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">DropAndCreateTables</span><span class="token punctuation">(</span>useType<span class="token punctuation">)</span><span class="token punctuation">;</span>

typedApi<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> typedRow <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Target<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
typedRow<span class="token punctuation">.</span>Name <span class="token comment">//= Foo</span>

<span class="token class-name"><span class="token keyword">var</span></span> updateRow <span class="token operator">=</span> <span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Target</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

typedApi<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>updateRow<span class="token punctuation">)</span><span class="token punctuation">;</span>

typedRow <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Target<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
typedRow<span class="token punctuation">.</span>Name <span class="token comment">//= Bar</span>

typedApi<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>typedRow<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

typedRow <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Target<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= null</span>
</code></pre></div><h4 id="ormlite-create-table-support" tabindex="-1">OrmLite Create Table Support <a class="header-anchor" href="#ormlite-create-table-support" aria-hidden="true">#</a></h4><ul><li>Added NonClustered and Clustered options to <code>[Index]</code> attribute</li></ul><h2 id="breaking-changes" tabindex="-1">Breaking changes <a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a></h2><h3 id="messaging" tabindex="-1">Messaging <a class="header-anchor" href="#messaging" aria-hidden="true">#</a></h3><p>In order to support Rabbit MQ Server some changes were made to <a href="/messaging.html">ServiceStack&#39;s Messaging API</a> to support all MQ options, namely:</p><ul><li><code>IMessageQueueClient</code> now exposes high-level <code>IMessage</code> API&#39;s instead of raw <code>byte[]</code></li><li>The <code>IMessage.Error</code> property is now a <code>ResponseStatus</code> type (same used in Web Services)</li><li><strong>Ack</strong> / <strong>Nak</strong> APIs were also added to <code>IMessageQueueClient</code></li><li>All MQ Brokers now have a default <code>RetryCount=1</code></li></ul><h3 id="servicestack-text" tabindex="-1">ServiceStack.Text <a class="header-anchor" href="#servicestack-text" aria-hidden="true">#</a></h3><ul><li>UrlEncode extension method now encodes spaces with <code>+</code> instead of <code>%20</code> to match default <code>HttpUtility.UrlEncode</code> behavior</li></ul><h3 id="ormlite" tabindex="-1">OrmLite <a class="header-anchor" href="#ormlite" aria-hidden="true">#</a></h3><ul><li>MySql and Sqlite providers now treat GUID&#39;s as <code>char(36)</code></li></ul>`,20),o=[p];function c(l,i,r,u,k,d){return s(),n("div",null,o)}var m=a(t,[["render",c]]);export{h as __pageData,m as default};
