import{_ as s,c as n,o as a,a as e}from"./app.14440598.js";const h='{"title":"v4.0.50 Release Notes","description":"","frontmatter":{"title":"v4.0.50 Release Notes","slug":"v4-0-50"},"headers":[{"level":2,"title":"RedisReact","slug":"redisreact"},{"level":2,"title":"ServiceStack.Redis","slug":"servicestack-redis"},{"level":3,"title":"New Redis APIs","slug":"new-redis-apis"},{"level":3,"title":"ServiceStack.Text","slug":"servicestack-text"}],"relativePath":"releases/v4.0.50.md","lastUpdated":1634495308434}',t={},p=e(`__VP_STATIC_START__<p>This is primarily a bug fix release to <a href="https://github.com/ServiceStack/ServiceStack/blob/master/docs/2015/release-notes.md#v4048-issues" target="_blank" rel="noopener noreferrer">resolve issues from the last release</a> that we wanted to get out before the holidays. This release also contains a number of performance improvements added in OrmLite to speed up your Data Access and <a href="/autoquery.html">AutoQuery</a> results.</p><p>Other changes in this release include:</p><h4 id="new-onsessionfilter" tabindex="-1">New OnSessionFilter <a class="header-anchor" href="#new-onsessionfilter" aria-hidden="true">#</a></h4><p>You can intercept sessions after they&#39;ve been resolved from the cache and modify them before they&#39;re used in ServiceStack or other application code by overriding <code>OnSessionFilter()</code> in your AppHost, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IAuthSession</span> <span class="token function">OnSessionFilter</span><span class="token punctuation">(</span><span class="token class-name">IAuthSession</span> session<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> withSessionId<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Update User Session</span>
    <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnSessionFilter</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> withSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This comes in useful when migrating existing sessions and populating properties with custom values.</p><h4 id="registered-type-filters-on-iapphost" tabindex="-1">Registered Type Filters on IAppHost <a class="header-anchor" href="#registered-type-filters-on-iapphost" aria-hidden="true">#</a></h4><p>To make it easier for plugins to register <a href="/request-and-response-filters.html#typed-request-filters">Typed Filters</a> , their Registration APIs are now available on IAppHost as well, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAppHost</span>
<span class="token punctuation">{</span>    
    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// Add Request Filter for a specific Request DTO Type</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">RegisterTypedRequestFilter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> IResponse<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> filterFn<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// Add Request Filter for a specific Response DTO Type</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">RegisterTypedResponseFilter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> IResponse<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> filterFn<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// Add Request Filter for a specific MQ Request DTO Type</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">RegisterTypedMessageRequestFilter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> IResponse<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> filterFn<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// Add Request Filter for a specific MQ Response DTO Type</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">RegisterTypedMessageResponseFilter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>IRequest<span class="token punctuation">,</span> IResponse<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> filterFn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="redisreact" tabindex="-1"><a href="https://github.com/ServiceStackApps/RedisReact" target="_blank" rel="noopener noreferrer">RedisReact</a> <a class="header-anchor" href="#redisreact" aria-hidden="true">#</a></h2><p>New Windows, OSX, Linux binaries published and <a href="http://redisreact.servicestack.net" target="_blank" rel="noopener noreferrer">http://redisreact.servicestack.net</a> Live Demo updated with this November Release:</p><h4 id="connections-with-authentication" tabindex="-1">Connections with Authentication <a class="header-anchor" href="#connections-with-authentication" aria-hidden="true">#</a></h4><p>Added support for password authentication when establishing connections with redis.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/redis-react/updates/add-authentication.png" alt=""></p><h4 id="custom-key-console-links" tabindex="-1">Custom key console links <a class="header-anchor" href="#custom-key-console-links" aria-hidden="true">#</a></h4><p>The <strong>console</strong> link now populates the console with the most appropriate command for each key type, e.g. clicking <strong>console</strong> ok a Sorted Set Key (ZSET) populates the Web Console with <code>ZRANGE key 0 -1 WITHSCORES</code>.</p><h2 id="servicestack-redis" tabindex="-1">ServiceStack.Redis <a class="header-anchor" href="#servicestack-redis" aria-hidden="true">#</a></h2><h4 id="redisconfig-defaultmaxpoolsize" tabindex="-1">RedisConfig.DefaultMaxPoolSize <a class="header-anchor" href="#redisconfig-defaultmaxpoolsize" aria-hidden="true">#</a></h4><p>You can easily configure the default pool size for <code>RedisManagerPool</code> and <code>PooledRedisClientManager</code> with a global static configuration, e.g:</p><div class="language-csharp"><pre><code>RedisConfig<span class="token punctuation">.</span>DefaultMaxPoolSize <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>Changes:</strong></p><p>The <code>RedisManagerPool.MaxPoolSize</code> property is now read-only to reflect proper usage where it needs to be specified in the constructor otherwise it&#39;s ignored.</p><h3 id="new-redis-apis" tabindex="-1">New Redis APIs <a class="header-anchor" href="#new-redis-apis" aria-hidden="true">#</a></h3><p>New API&#39;s added to typed Redis Client to make available API&#39;s to resolve cache key for specific types, deprecate <code>SetEntry*</code> API&#39;s and replace them with more appropriately named <code>SetValue*</code>, allow typed API to store and expire typed POCO&#39;s in 1 operation:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisClient</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Resolve cache key for specific Type and Id</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">UrnKey</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">UrnKey</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">UrnKey</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisTypedClient</span>
<span class="token punctuation">{</span>
    <span class="token comment">//resolve cache key used for a typed instance</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">UrnKey</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//Deprecate SetEntry* API&#39;s </span>
    <span class="token punctuation">[</span><span class="token function">Obsolete</span><span class="token punctuation">(</span><span class="token string">&quot;Use SetValue()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetEntry</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Use SetValue()&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetEntry</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> expireIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Use SetValueIfNotExists()&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SetEntryIfNotExists</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Replaces above SetEntry* API&#39;s</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> entity<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> expireIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SetValueIfNotExists</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SetValueIfExists</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Save and expire an entity in 1 operation</span>
    <span class="token return-type class-name">T</span> <span class="token function">Store</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> expireIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="servicestack-text" tabindex="-1">ServiceStack.Text <a class="header-anchor" href="#servicestack-text" aria-hidden="true">#</a></h3><p>To improve the usefulness of mocking HTTP Requests, the request body is now passed in the Results Filter so the Request Body can be inspected, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResultsFilter</span>
<span class="token punctuation">{</span>
    StringResultFn <span class="token operator">=</span> <span class="token punctuation">(</span>webReq<span class="token punctuation">,</span> reqBody<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reqBody <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> reqBody<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;a\\&quot;:1}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token string">&quot;mocked-by-body&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> webReq<span class="token punctuation">.</span>RequestUri<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;google&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">?</span> <span class="token string">&quot;mocked-google&quot;</span>
            <span class="token punctuation">:</span> <span class="token string">&quot;mocked-yahoo&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;http://yahoo.com&quot;</span><span class="token punctuation">.</span><span class="token function">PostJsonToUrl</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">json</span><span class="token punctuation">:</span> <span class="token string">&quot;{\\&quot;a\\&quot;:1}&quot;</span><span class="token punctuation">)</span> <span class="token comment">//= mocked-by-body</span>
    
    <span class="token string">&quot;http://google.com&quot;</span><span class="token punctuation">.</span><span class="token function">GetJsonFromUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//= mocked-google</span>
    <span class="token string">&quot;http://yahoo.com&quot;</span><span class="token punctuation">.</span><span class="token function">GetJsonFromUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//= mocked-yahoo</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Previously <a href="http://stackoverflow.com/a/31631039/85785" target="_blank" rel="noopener noreferrer">inspecting the Request Body was not possible</a>. Thanks to <a href="https://github.com/georgehemmings" target="_blank" rel="noopener noreferrer">@georgehemmings</a> for adding this feature.</p>__VP_STATIC_END__`,29),o=[p];function c(l,i,u,r,k,d){return a(),n("div",null,o)}var y=s(t,[["render",c]]);export{h as __pageData,y as default};
