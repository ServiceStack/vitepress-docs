import{_ as n,c as s,o as a,a as t}from"./app.14440598.js";const h='{"title":"v4.0.18 Release Notes","description":"","frontmatter":{"title":"v4.0.18 Release Notes","slug":"v4-0-18"},"headers":[{"level":2,"title":"New, much faster Self-Host!","slug":"new-much-faster-self-host"},{"level":3,"title":"Using different Self Host options","slug":"using-different-self-host-options"},{"level":3,"title":"Optimal Self Hosted option","slug":"optimal-self-hosted-option"},{"level":2,"title":"OrmLite","slug":"ormlite"},{"level":3,"title":"Improved Oracle RDBMS provider","slug":"improved-oracle-rdbms-provider"},{"level":3,"title":"Improved Typed SqlExpressions","slug":"improved-typed-sqlexpressions"},{"level":2,"title":"Redis","slug":"redis"},{"level":3,"title":"New Scan APIs Added","slug":"new-scan-apis-added"},{"level":3,"title":"New HyperLog API","slug":"new-hyperlog-api"},{"level":2,"title":"HTTP and MQ Service Clients","slug":"http-and-mq-service-clients"},{"level":3,"title":"Substitutable OneWay MQ and HTTP Service Clients","slug":"substitutable-oneway-mq-and-http-service-clients"},{"level":3,"title":"UploadProgress added on Service Clients","slug":"uploadprogress-added-on-service-clients"},{"level":2,"title":"Razor Support","slug":"razor-support"},{"level":3,"title":"ss-utils.js","slug":"ss-utils-js"},{"level":2,"title":"Other Changes","slug":"other-changes"},{"level":3,"title":"Restriction attributes allowed on Services","slug":"restriction-attributes-allowed-on-services"},{"level":2,"title":"AppSettings","slug":"appsettings"},{"level":3,"title":"New OrmLiteAppSettings","slug":"new-ormliteappsettings"},{"level":3,"title":"Extract key / value settings from text file","slug":"extract-key-value-settings-from-text-file"},{"level":3,"title":"PerfUtils","slug":"perfutils"},{"level":3,"title":"Minor Changes","slug":"minor-changes"},{"level":3,"title":"New Signed Projects","slug":"new-signed-projects"},{"level":3,"title":"Breaking Changes","slug":"breaking-changes"}],"relativePath":"releases/v4.0.18.md","lastUpdated":1634495308430}',e={},p=t(`__VP_STATIC_START__<h2 id="new-much-faster-self-host" tabindex="-1">New, much faster Self-Host! <a class="header-anchor" href="#new-much-faster-self-host" aria-hidden="true">#</a></h2><p>Prior to this release ServiceStack had 2 self-hosting options with different <a href="/concurrency-model.html">Concurrency Models</a>:</p><ul><li><code>AppHostHttpListenerBase</code> - Executes requests on the IO callback thread</li><li><code>AppHostHttpListenerPoolBase</code> - Executes requests on .NET&#39;s built-in ThreadPool</li></ul><p>Where in typical scenarios (i.e. CPU intensive or blocking IO), executing on .NET&#39;s Thread Pool provides better performance.</p><p>This <a href="http://en.rdebug.com/2013/05/06/servicestack-selfhosted-performance-boost/" target="_blank" rel="noopener noreferrer">Self-hosting performance analysis</a> from the ServiceStack community shows we&#39;re able to achieve even better performance by utilizing the excellent <a href="http://www.codeproject.com/Articles/7933/Smart-Thread-Pool" target="_blank" rel="noopener noreferrer">Smart Thread Pool</a> instead, which is now available in the <code>AppHostHttpListenerSmartPoolBase</code> base class.</p><p>The new Smart Pool self-host routinely outperforms all other self hosting options, and does especially well in heavy IO scenarios as seen in the benchmarks below:</p><table><thead><tr><th></th><th>Self Host</th><th>ASP.NET/IIS Express</th><th>HttpListener Pool</th><th>HttpListener</th></tr></thead><tbody><tr><th>Database updates</th><td>1x</td><td>1.9x</td><td>2x</td><td>4.1x</td></tr><tr><th>Single database query</th><td>1x</td><td>1.2x</td><td>1.5x</td><td>2.6x</td></tr><tr><th>Multiple database queries</th><td>1x</td><td>1.2x</td><td>1.4x</td><td>2.6x</td></tr><tr><th>Plaintext</th><td>1x</td><td>2.3x</td><td>2.4x</td><td>1.6x</td></tr><tr><th>Fortunes Razor View</th><td>1x</td><td>1.2x</td><td>1.5x</td><td>1.8x</td></tr><tr><th>JSON serialization</th><td>1x</td><td>1.2x</td><td>1.4x</td><td>1x</td></tr></tbody></table><h3 id="using-different-self-host-options" tabindex="-1">Using different Self Host options <a class="header-anchor" href="#using-different-self-host-options" aria-hidden="true">#</a></h3><p>You can easily switch between the different self-hosting options by simply changing your AppHost&#39;s base class, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostHttpListenerBase</span></span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostHttpListenerPoolBase</span></span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostHttpListenerSmartPoolBase</span></span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><p>Both the HttpListener Pool and SmartPool hosts have configurable pool sizes that can be tweaked to perform better under different scenarios.</p><h3 id="optimal-self-hosted-option" tabindex="-1">Optimal Self Hosted option <a class="header-anchor" href="#optimal-self-hosted-option" aria-hidden="true">#</a></h3><p>As the number of self-hosts grow, we&#39;ve added a new <code>AppSelfHostBase</code> base class that represents an alias for the highest performing self-hosting option with an optimal configuration that we&#39;ll continue to tune for performance against typical scenarios. Unless you&#39;ve identified specific configurations that performs better for your use-case, the recommendation is for new self-hosts to inherit this configuration:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppSelfHostBase</span></span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><h2 id="ormlite" tabindex="-1">OrmLite <a class="header-anchor" href="#ormlite" aria-hidden="true">#</a></h2><p>OrmLite received a lot more attention this release with a number of value-added additions:</p><h3 id="improved-oracle-rdbms-provider" tabindex="-1">Improved Oracle RDBMS provider <a class="header-anchor" href="#improved-oracle-rdbms-provider" aria-hidden="true">#</a></h3><p>The OrmLite Oracle Provider has been significantly improved thanks to <a href="https://github.com/BruceCowan-AI" target="_blank" rel="noopener noreferrer">Bruce Cowen</a> efforts who&#39;s brought the quality in-line with other RDBMS providers which now passes OrmLite&#39;s test suite. As part of this change, the Oracle Provider now depends on <a href="http://www.oracle.com/technetwork/topics/dotnet/index-085163.html" target="_blank" rel="noopener noreferrer">Oracle&#39;s Data Provider for .NET</a> and can be installed with:</p><pre><code>PM&gt; Install-Package ServiceStack.OrmLite.Oracle
PM&gt; Install-Package ServiceStack.OrmLite.Oracle.Signed
</code></pre><p>More notes about the Oracle provider are maintained in the <a href="https://github.com/ServiceStack/ServiceStack.OrmLite/#oracle-provider-notes" target="_blank" rel="noopener noreferrer">OrmLite Release Notes</a>.</p><h3 id="improved-typed-sqlexpressions" tabindex="-1">Improved Typed SqlExpressions <a class="header-anchor" href="#improved-typed-sqlexpressions" aria-hidden="true">#</a></h3><p>The existing <code>db.SqlExpression&lt;T&gt;()</code> API has a more readable alias in:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which now supports an optional SQL <strong>FROM</strong> fragment that can be used to specify table joins, e.g:</p><pre><code>var results = db.Select(db.From&lt;Person&gt;(&quot;Person INNER JOIN Band ON Person.Id = Band.PersonId&quot;));
</code></pre><h4 id="new-isqlexpression-api" tabindex="-1">New ISqlExpression API <a class="header-anchor" href="#new-isqlexpression-api" aria-hidden="true">#</a></h4><p>OrmLite API&#39;s have overloads to execute any SQL builders that implement the simple <code>ISqlExpression</code> API, i.e:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISqlExpression</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToSelectStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This allows for more readable code when using a decoupled Sql Builder, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">int</span></span> over40s <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Scalar</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>Sql<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>Age <span class="token operator">&gt;</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> lastNames <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Column</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>Age <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> uniqueAges <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ColumnDistinct</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Dictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>x<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> x<span class="token punctuation">.</span>LastName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="partial-selects" tabindex="-1">Partial Selects <a class="header-anchor" href="#partial-selects" aria-hidden="true">#</a></h4><p>This also improves the APIs for partial SELECT queries, which originally required the use of custom SQL:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> partialColumns <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SelectFmt</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SubsetOfShipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Shipper</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ShipperTypeId = {0}&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>But can now be expressed in any of the more typed examples below:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> partialColumns <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SubsetOfShipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>ShipperTypeId <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Or partially populating the same POCO with only the columns specified:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> partialColumns <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> x<span class="token punctuation">.</span>Phone<span class="token punctuation">,</span> x<span class="token punctuation">.</span>CompanyName <span class="token punctuation">}</span><span class="token punctuation">)</span>
                                              <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>ShipperTypeId <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> partialColumns <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Phone, CompanyName&quot;</span><span class="token punctuation">)</span>
                                              <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>ShipperTypeId <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="nullable-limit-apis" tabindex="-1">Nullable Limit APIs <a class="header-anchor" href="#nullable-limit-apis" aria-hidden="true">#</a></h4><p>The Limit API&#39;s now accept <code>int?</code> making it easier to apply paging in your ServiceStack services, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> Request 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Skip <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Take <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> Db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>From<span class="token operator">&lt;</span>Table<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Skip<span class="token punctuation">,</span> request<span class="token punctuation">.</span>Take<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which will only filter the results for the values provided. Aliases for <code>Skip()</code> and <code>Take()</code> are also available if LINQ naming is preferred.</p><h4 id="new-aliasnamingstrategy" tabindex="-1">New AliasNamingStrategy <a class="header-anchor" href="#new-aliasnamingstrategy" aria-hidden="true">#</a></h4><p>A new alias naming strategy was added (in addition to <code>[Alias]</code> attribute) that lets you specify a dictionary of Table and Column aliases OrmLite should used instead, e.g:</p><div class="language-csharp"><pre><code>OrmLiteConfig<span class="token punctuation">.</span>DialectProvider<span class="token punctuation">.</span>NamingStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AliasNamingStrategy</span> <span class="token punctuation">{</span>
    TableAliases  <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;MyTable&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TableAlias&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ColumnAliases <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;MyField&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ColumnAlias&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Which OrmLite will use instead, e.g when creating a table:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyTable<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Aliases can also be referenced when creating custom SQL using the <code>SqlTable()</code> and <code>SqlColumn()</code> extension methods, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyTable<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token string">&quot;SELECT * FROM {0} WHERE {1} = {2}&quot;</span><span class="token punctuation">.</span><span class="token function">Fmt</span><span class="token punctuation">(</span><span class="token string">&quot;MyTable&quot;</span><span class="token punctuation">.</span><span class="token function">SqlTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;MyField&quot;</span><span class="token punctuation">.</span><span class="token function">SqlColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">.</span><span class="token function">SqlValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="new-exists-apis" tabindex="-1">New Exists APIs <a class="header-anchor" href="#new-exists-apis" aria-hidden="true">#</a></h4><p>Nicer if you just need to check for existence, instead of retrieving a full result-set e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">bool</span></span> hasUnder50s <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Exists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> hasUnder50s <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-hidden="true">#</a></h2><h3 id="new-scan-apis-added" tabindex="-1">New Scan APIs Added <a class="header-anchor" href="#new-scan-apis-added" aria-hidden="true">#</a></h3><p>Redis v2.8 introduced a beautiful new <a href="http://redis.io/commands/scan" target="_blank" rel="noopener noreferrer">SCAN</a> operation that provides an optimal strategy for traversing a redis instance entire keyset in managable-size chunks utilizing only a client-side cursor and without introducing any server state. It&#39;s a higher performance alternative and should be used instead of <a href="http://redis.io/commands/keys" target="_blank" rel="noopener noreferrer">KEYS</a> in application code. SCAN and its related operations for traversing members of Sets, Sorted Sets and Hashes are now available in the Redis Client in the following API&#39;s:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisClient</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">ScanAllKeys</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> pattern <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">ScanAllSetItems</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> setId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> pattern <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">ScanAllSortedSetItems</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> setId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> pattern <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">ScanAllHashEntries</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> hashId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> pattern <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>

<span class="token comment">//Low-level API</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisNativeClient</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token return-type class-name">ScanResult</span> <span class="token function">Scan</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">ulong</span></span> cursor<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> match <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">ScanResult</span> <span class="token function">SScan</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> setId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">ulong</span></span> cursor<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> match <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">ScanResult</span> <span class="token function">ZScan</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> setId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">ulong</span></span> cursor<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> match <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">ScanResult</span> <span class="token function">HScan</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> hashId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">ulong</span></span> cursor<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> match <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <code>IRedisClient</code> provides a higher-level API that abstracts away the client cursor to expose a lazy Enumerable sequence to provide an optimal way to stream scanned results that integrates nicely with LINQ, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> scanUsers <span class="token operator">=</span> Redis<span class="token punctuation">.</span><span class="token function">ScanAllKeys</span><span class="token punctuation">(</span><span class="token string">&quot;urn:User:*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> sampleUsers <span class="token operator">=</span> scanUsers<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Stop after retrieving 10000 user keys </span>
</code></pre></div><h3 id="new-hyperlog-api" tabindex="-1">New HyperLog API <a class="header-anchor" href="#new-hyperlog-api" aria-hidden="true">#</a></h3><p>The development branch of Redis server (available when v3.0 is released) includes an ingenious algorithm to approximate the unique elements in a set with maximum space and time efficiency. For details about how it works see Redis&#39;s creator Salvatore&#39;s blog who <a href="http://antirez.com/news/75" target="_blank" rel="noopener noreferrer">explains it in great detail</a>. Essentially it lets you maintain an efficient way to count and merge unique elements in a set without having to store its elements. A Simple example of it in action:</p><div class="language-csharp"><pre><code>redis<span class="token punctuation">.</span><span class="token function">AddToHyperLog</span><span class="token punctuation">(</span><span class="token string">&quot;set1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
redis<span class="token punctuation">.</span><span class="token function">AddToHyperLog</span><span class="token punctuation">(</span><span class="token string">&quot;set1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">CountHyperLog</span><span class="token punctuation">(</span><span class="token string">&quot;set1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span>

redis<span class="token punctuation">.</span><span class="token function">AddToHyperLog</span><span class="token punctuation">(</span><span class="token string">&quot;set2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

redis<span class="token punctuation">.</span><span class="token function">MergeHyperLogs</span><span class="token punctuation">(</span><span class="token string">&quot;mergedset&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;set1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;set2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> mergeCount <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">CountHyperLog</span><span class="token punctuation">(</span><span class="token string">&quot;mergedset&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//6</span>
</code></pre></div><h2 id="http-and-mq-service-clients" tabindex="-1">HTTP and MQ Service Clients <a class="header-anchor" href="#http-and-mq-service-clients" aria-hidden="true">#</a></h2><h3 id="substitutable-oneway-mq-and-http-service-clients" tabindex="-1">Substitutable OneWay MQ and HTTP Service Clients <a class="header-anchor" href="#substitutable-oneway-mq-and-http-service-clients" aria-hidden="true">#</a></h3><p>Service Clients and MQ Clients have become a lot more interoperable where all MQ Clients now implement the Service Clients <code>IOneWayClient</code> API which enables writing code that works with both HTTP and MQ Clients:</p><div class="language-csharp"><pre><code><span class="token class-name">IOneWayClient</span> client <span class="token operator">=</span> <span class="token function">GetClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">SendOneWay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestDto</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Likewise the HTTP Service Clients implement the Messaging API <code>IMessageProducer</code>:</p><div class="language-csharp"><pre><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Publish</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> requestDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Publish</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IMessage<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When publishing a <code>IMessage&lt;T&gt;</code> the message metadata are sent as HTTP Headers with an <code>X-</code> prefix.</p><h3 id="uploadprogress-added-on-service-clients" tabindex="-1">UploadProgress added on Service Clients <a class="header-anchor" href="#uploadprogress-added-on-service-clients" aria-hidden="true">#</a></h3><p>Which works similar to <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/AsyncProgressTests.cs" target="_blank" rel="noopener noreferrer">OnDownloadProgress</a> where you can specify a callback to provide UX Progress updates, e.g:</p><div class="language-csharp"><pre><code>client<span class="token punctuation">.</span>OnUploadProgress <span class="token operator">=</span> <span class="token punctuation">(</span>bytesWritten<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Written {0}/{1} bytes...&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>bytesWritten<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PostFileWithRequest</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UploadResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Upload</span> <span class="token punctuation">{</span> CreatedBy <span class="token operator">=</span> <span class="token string">&quot;Me&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="razor-support" tabindex="-1">Razor Support <a class="header-anchor" href="#razor-support" aria-hidden="true">#</a></h2><p>Our support for <a href="https://github.com/ServiceStack/EmailContacts/#the-no-ceremony-option---dynamic-pages-without-controllers" target="_blank" rel="noopener noreferrer">No Ceremony Razor pages</a> has been very well received which has all but alleviated the need of requiring services / controllers for dynamic html pages. One of the areas where a Service may be required is for execution any custom request filters, which we&#39;ve now added support for by letting you choose to execute all request filters for a specific Request with:</p><div class="language-csharp"><pre><code>@<span class="token punctuation">{</span>
    <span class="token function">ApplyRequestFilters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This will execute all the Request Filters applied to the specified Request DTO. Any one of the filters ends the request (e.g. with a redirect) and the rest of the Razor page will stop execution.</p><p>Likewise it&#39;s possible to redirect from within Razor with:</p><div class="language-csharp"><pre><code>@<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>IsAuthenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Response<span class="token punctuation">.</span><span class="token function">RedirectToUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StopExecutionException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>An alternative to <code>StopExecutionException</code> is to have an explicit <code>return;</code>, the difference being that it will continue to execute the remainder of the page, although neither approach will emit any Razor output to the response.</p><p>As redirecting non-authenticated users is a common use-case it&#39;s also available as a one-liner:</p><div class="language-csharp"><pre><code>@<span class="token punctuation">{</span>
    <span class="token function">RedirectIfNotAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which if no url is specified it will redirect to the path configured on <code>AuthFeature.HtmlRedirect</code>.</p><h3 id="ss-utils-js" tabindex="-1">ss-utils.js <a class="header-anchor" href="#ss-utils-js" aria-hidden="true">#</a></h3><p>A few enhancements were added to ServiceStack&#39;s <strong>/js/ss-utils.js</strong> is ServiceStack&#39;s built-in JS library, first demonstrated in <a href="https://github.com/ServiceStack/EmailContacts/#servicestack-javascript-utils---jsss-utilsjs" target="_blank" rel="noopener noreferrer">Email Contacts solution</a>:</p><p>Declarative event handlers can send multiple arguments:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>single<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multiple:arg1,arg2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-javascript"><pre><code><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bindHandlers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">single</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> li <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">multiple</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> li <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Trigger client-side validation errors with <code>setFieldError()</code>:</p><div class="language-javascript"><pre><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bindForm</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serializeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>Password <span class="token operator">!=</span> params<span class="token punctuation">.</span>Confirm<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFieldError</span><span class="token punctuation">(</span><span class="token string">&#39;Password&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Passwords to not match&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Model binding now also populates <code>data-href</code> and <code>data-src</code> attributes e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">data-href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FieldName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FieldName<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-javascript"><pre><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyValues</span><span class="token punctuation">(</span><span class="token punctuation">{</span> FieldName<span class="token operator">:</span> imgUrl <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="other-changes" tabindex="-1">Other Changes <a class="header-anchor" href="#other-changes" aria-hidden="true">#</a></h2><h3 id="restriction-attributes-allowed-on-services" tabindex="-1">Restriction attributes allowed on Services <a class="header-anchor" href="#restriction-attributes-allowed-on-services" aria-hidden="true">#</a></h3><p>Restriction attributes can be added on Service classes in addition to Request DTOs (which still take precedence).</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Restrict</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LocalhostOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalHostOnlyServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><h2 id="appsettings" tabindex="-1">AppSettings <a class="header-anchor" href="#appsettings" aria-hidden="true">#</a></h2><h3 id="new-ormliteappsettings" tabindex="-1">New OrmLiteAppSettings <a class="header-anchor" href="#new-ormliteappsettings" aria-hidden="true">#</a></h3><p>Added new read/write AppSettings config option utilizing OrmLite as the back-end. This now lets you maintain your applications configuration in any <a href="https://github.com/ServiceStack/ServiceStack.OrmLite/#download" target="_blank" rel="noopener noreferrer">RDBMS back-end OrmLite supports</a>. It basically works like a mini Key/Value database in which can store any serializable value against any key which is maintained into the simple Id/Value <code>ConfigSettings</code> table.</p><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h4><p>Registration just uses an OrmLite DB Factory, e.g:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteAppSettings</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> appSettings <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrmLiteAppSettings<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
appSettings<span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Create the ConfigSettings table if it doesn&#39;t exist</span>
</code></pre></div><p>It then can be accessed like any <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Common.Tests/Configuration/AppSettingsTests.cs" target="_blank" rel="noopener noreferrer">AppSetting APIs</a>:</p><div class="language-csharp"><pre><code><span class="token comment">//Read the \`MyConfig\` POCO stored at \`config\` otherwise use default value if it doesn&#39;t exist</span>
<span class="token class-name">MyConfig</span> config <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfig</span> <span class="token punctuation">{</span> Key <span class="token operator">=</span> <span class="token string">&quot;DefaultValue&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It also supports writing config values in addition to the AppSettings read-only API&#39;s, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> latestStats <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">GetOrCreate</span><span class="token punctuation">(</span><span class="token string">&quot;stats&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> statsProvider<span class="token punctuation">.</span><span class="token function">GetLatest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="extract-key-value-settings-from-text-file" tabindex="-1">Extract key / value settings from text file <a class="header-anchor" href="#extract-key-value-settings-from-text-file" aria-hidden="true">#</a></h3><p>The new ParseKeyValueText extension method lets you extract key / value data from text, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> configText <span class="token operator">=</span> <span class="token string">@&quot;
StringKey string value
IntKey 42
ListKey A,B,C,D,E
DictionaryKey A:1,B:2,C:3,D:4,E:5
PocoKey {Foo:Bar,Key:Value}&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> configMap <span class="token operator">=</span> configText<span class="token punctuation">.</span><span class="token function">ParseKeyValueText</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">delimiter</span><span class="token punctuation">:</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When combined with the existing <code>DictionarySettings</code>, enables a rich, simple and clean alternative to .NET&#39;s App.config config section for reading structured configuration into clean data structures, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name">IAppSettings</span> appSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DictionarySettings</span><span class="token punctuation">(</span>configMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;StringKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;IntKey&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">defaultValue</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">GetList</span><span class="token punctuation">(</span><span class="token string">&quot;ListKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> valuesMap <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">GetList</span><span class="token punctuation">(</span><span class="token string">&quot;DictionaryKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MyConfig</span> config <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;PocoKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfig</span> <span class="token punctuation">{</span> Key <span class="token operator">=</span> <span class="token string">&quot;DefaultValue&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>As we expect this to be a popular combination we&#39;ve combined them into a single class that accepts a filePath, providing a simple alternative to custom Web.config configurations:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> appSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFileSettings</span><span class="token punctuation">(</span><span class="token string">&quot;~/app.settings&quot;</span><span class="token punctuation">.</span><span class="token function">MapHostAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="perfutils" tabindex="-1">PerfUtils <a class="header-anchor" href="#perfutils" aria-hidden="true">#</a></h3><p>We&#39;ve included the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/PerfUtils.cs" target="_blank" rel="noopener noreferrer">C# Benchmark Utils</a> previously used in <a href="https://github.com/dartist/sudoku_solver#benchmarks" target="_blank" rel="noopener noreferrer">Sudoku Benchmarks</a> originally inspired from <a href="https://github.com/dart-lang/benchmark_harness" target="_blank" rel="noopener noreferrer">Dart&#39;s benchmark_harness</a>. Unlike other benchmark utils, it runs for a specified period of time (2000ms by default) then returns the avg iteration time in microseconds. Here&#39;s an example usage comparing performance of maintaining a unique int collection between HashSet vs List:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> avgMicroSecs <span class="token operator">=</span> PerfUtils<span class="token punctuation">.</span><span class="token function">Measure</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">runForMs</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token string">&quot;HashSet: {0}us&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>avgMicroSecs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
avgMicroSecs <span class="token operator">=</span> PerfUtils<span class="token punctuation">.</span><span class="token function">Measure</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">runForMs</span><span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token string">&quot;List: {0}us&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>avgMicroSecs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="minor-changes" tabindex="-1">Minor Changes <a class="header-anchor" href="#minor-changes" aria-hidden="true">#</a></h3><ul><li>Numeric type mismatches between POCOs used in OrmLite and underlying RDBMS Tables are transparently coerced</li><li><code>Vary: Accept</code> is included in Global HTTP Headers to resolve browsers caching different Content-Type for the same url</li><li>Razor configuration removes references to a specific version of <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web Pages and adds <code>System</code> to default namespaces</li><li>Swagger API emits an ApiVersion, configurable with <code>Config.ApiVersion</code> that defaults to &quot;1.0&quot;</li><li>Partials now render inside user-defined Razor sections</li><li>Added <code>email.ToGravatarUrl()</code> extension method to retrieve avatar url from an email</li><li>Replaced self-hosts use of ThreadStatics with CallContext to preserve Request scope in async requests</li><li>Avoid runtime razor exceptions in Mono by not registering duplicate assemblies (i.e. from GAC) in RazorHost</li><li>AppHostHttpListenerPoolBase self-host has a default pool size of <code>16 x Environment.ProcessorCount</code></li><li>ServiceStack&#39;s <code>IAppHost.CustomErrorHttpHandlers</code> can now override built-in HTTP Error handlers and fallback to generic error responses</li></ul><h3 id="new-signed-projects" tabindex="-1">New Signed Projects <a class="header-anchor" href="#new-signed-projects" aria-hidden="true">#</a></h3><ul><li><a href="https://www.nuget.org/packages/ServiceStack.ProtoBuf.Signed" target="_blank" rel="noopener noreferrer">ServiceStack.ProtoBuf.Signed</a></li></ul><h3 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a></h3><ul><li>Moved <code>Config.GlobalHtmlErrorHttpHandler</code> to <code>IAppHost.GlobalHtmlErrorHttpHandler</code></li></ul>__VP_STATIC_END__`,120),o=[p];function c(l,i,u,r,k,d){return a(),s("div",null,o)}var m=n(e,[["render",c]]);export{h as __pageData,m as default};
