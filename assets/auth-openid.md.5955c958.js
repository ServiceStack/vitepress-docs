import{_ as s,c as t,o as e,a,b as n,e as o}from"./app.14440598.js";const w=`{"title":"OpenId 2.0 Auth Providers","description":"","frontmatter":{"slug":"openid","title":"OpenId 2.0 Auth Providers"},"headers":[{"level":2,"title":"Install via NuGet","slug":"install-via-nuget"},{"level":2,"title":"Easy configuration, plugs into ServiceStack's Auth Provider model","slug":"easy-configuration-plugs-into-servicestack-s-auth-provider-model"},{"level":3,"title":"Creating a Custom OpenId Provider","slug":"creating-a-custom-openid-provider"},{"level":3,"title":"Automatically Merges Registration and Authentication information from multiple Auth Providers","slug":"automatically-merges-registration-and-authentication-information-from-multiple-auth-providers"}],"relativePath":"auth-openid.md","lastUpdated":1634495307610}`,p={},c=a('<p>Contained in the <a href="http://nuget.org/packages/ServiceStack.Authentication.OpenId" target="_blank" rel="noopener noreferrer">ServiceStack.Authentication.OpenId</a> NuGet package is ServiceStack&#39;s support of OpenId 2.0 Authentication. This allows ServiceStack-enabled <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> / MVC sites and web services to authenticate and accept registration from any OpenId 2.0 Authentication provider. Like most .NET OpenId libraries, we leverage the de-facto and excellent <a href="http://www.dotnetopenauth.net/" target="_blank" rel="noopener noreferrer">DotNetOpenAuth</a> library to enable our OpenId and OAuth2 support.</p><h2 id="install-via-nuget" tabindex="-1">Install via NuGet <a class="header-anchor" href="#install-via-nuget" aria-hidden="true">#</a></h2>',2),i=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Authentication.OpenId" Version="5.*" />')]),o(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),r=a(`<h2 id="easy-configuration-plugs-into-servicestack-s-auth-provider-model" tabindex="-1">Easy configuration, plugs into ServiceStack&#39;s Auth Provider model <a class="header-anchor" href="#easy-configuration-plugs-into-servicestack-s-auth-provider-model" aria-hidden="true">#</a></h2><p>As you might expect adding OpenId support works seamlessly with ServiceStack&#39;s existing <a href="/authentication-and-authorization.html">Auth Providers</a> where you can enable support for any Specific OpenId 2.0 provider with just <strong>1-line of registration</strong> each. Below is the example taken from <a href="https://github.com/ServiceStack/SocialBootstrapApi/blob/master/src/SocialBootstrapApi/AppHost.cs#L171" target="_blank" rel="noopener noreferrer">SocialBootstrapApi&#39;s AppHost</a> showing how to extend their existing Auth Providers with new OpenId 2.0 options:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> appSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Access Web.Config AppSettings</span>
Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomUserSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token comment">//Add all the Auth Providers you want to allow registration with</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
        <span class="token comment">//Existing Auth Providers</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CredentialsAuthProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment">//HTML Form post of UserName/Password credentials</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TwitterAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment">//Sign-in with Twitter</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FacebookAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">//Sign-in with Facebook</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DigestAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//Sign-in with Digest Auth</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicAuthProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">//Sign-in with Basic Auth</span>

        <span class="token comment">//Register new OpenId providers you want to allow authentication with</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GoogleOpenIdOAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//Sign-in with Google OpenId</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">YahooOpenIdOAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//Sign-in with Yahoo OpenId</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenIdOAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment">//Sign-in with any Custom OpenId Provider</span>

        <span class="token comment">//Register new OAuth2 providers you want to allow authentication with</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GoogleOAuth2Provider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">//Sign-in with Google OAuth2        </span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LinkedInOAuth2Provider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//Sign-in with LinkedIn OAuth2        </span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.AuthWeb.Tests/" target="_blank" rel="noopener noreferrer">AuthWebTests</a> is a simple project that shows all Auth Providers configured and working in the same app. See the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.AuthWeb.Tests/AppHost.cs" target="_blank" rel="noopener noreferrer">AppHost</a> for an example of the code and the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.AuthWeb.Tests/Web.config" target="_blank" rel="noopener noreferrer">Web.config</a> for an example of the configuration required to enable each Auth Provider.</p><h3 id="creating-a-custom-openid-provider" tabindex="-1">Creating a Custom OpenId Provider <a class="header-anchor" href="#creating-a-custom-openid-provider" aria-hidden="true">#</a></h3><p>Creating a custom OpenId provider is trivially done by just inheriting from <code>OpenIdOAuthProvider</code> and providing a unique Id and Auth Realm Url for the provider. This is the source code for <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Authentication.OpenId/GoogleOpenIdOAuthProvider.cs" target="_blank" rel="noopener noreferrer">GoogleOpenIdOAuthProvider</a>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoogleOpenIdOAuthProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">OpenIdOAuthProvider</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=</span> <span class="token string">&quot;GoogleOpenId&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> Realm <span class="token operator">=</span> <span class="token string">&quot;https://www.google.com/accounts/o8/id&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">GoogleOpenIdOAuthProvider</span><span class="token punctuation">(</span><span class="token class-name">IResourceManager</span> appSettings<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Realm<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>With just <code>GoogleOpenIdOAuthProvider</code> class and it&#39;s registration above we can now enable authentication for our websites by just adding a HTML Form to <strong>POST</strong> to the <code>/auth/{AuthProviderName}</code> AuthService, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api/auth/googleopenid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/Content/img/sign-in-with-google.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Sign in with Google<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Any other custom OpenId provider can be added in the same way, here is the HTML Form for Yahoo OpenId:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api/auth/yahooopenid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/Content/img/sign-in-with-yahoo.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Sign in with Yahoo!<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Finally you can allow registration of any other OpenId 2.0 provider at run-time by including their Url in the <strong>OpenIdUrl</strong> Form POST variable, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api/auth/openid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OpenIdUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://myopenid.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Sign In<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>The above sample markup from the <a href="https://github.com/ServiceStack/SocialBootstrapApi/blob/master/src/SocialBootstrapApi/Views/Shared/Index.cshtml#L366" target="_blank" rel="noopener noreferrer">Bootstrap Api project Index.cshtml</a> page, which when rendered looks like:</p><p><a href="http://bootstrapapi.apphb.com" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStackV3/Mono/master/src/Mono/files/openid-form.png" alt="ServiceStack OpenId 2.0 Providers"></a></p><p>For a live demo of ServiceStack&#39;s Auth Providers in action check out the MVC + ServiceStack enabled <a href="http://bootstrapapi.apphb.com" target="_blank" rel="noopener noreferrer">Bootstrap API project</a>.</p><h3 id="automatically-merges-registration-and-authentication-information-from-multiple-auth-providers" tabindex="-1">Automatically Merges Registration and Authentication information from multiple Auth Providers <a class="header-anchor" href="#automatically-merges-registration-and-authentication-information-from-multiple-auth-providers" aria-hidden="true">#</a></h3><p>One of the benefits of using <a href="/authentication-and-authorization.html">ServiceStack&#39;s Auth Providers</a> is that it allows a single user to login via multiple Auth Providers and it takes care of merging authentication and registration info from multiple Authentication sources into the same UserAuth Account. It also automatically maintains updates of users latest registration information on each login and their session is automatically populated with all of their previously authenticated providers, e.g. If a user logs in the 2nd time with Facebook, their session is also populated with their earlier Twitter account information.</p>`,18),l=[c,i,r];function u(k,d,h,g,m,v){return e(),t("div",null,l)}var S=s(p,[["render",u]]);export{w as __pageData,S as default};
