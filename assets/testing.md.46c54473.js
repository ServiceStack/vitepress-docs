import{_ as n,c as s,o as a,a as t}from"./app.14440598.js";const y='{"title":"Testing","description":"","frontmatter":{"slug":"testing","title":"Testing"},"headers":[{"level":2,"title":"Example Stand-alone Integration tests","slug":"example-stand-alone-integration-tests"},{"level":2,"title":"Integration Testing","slug":"integration-testing"},{"level":2,"title":"Unit testing","slug":"unit-testing"},{"level":3,"title":"Using an in-memory database","slug":"using-an-in-memory-database"},{"level":3,"title":"Test Setup","slug":"test-setup"},{"level":3,"title":"Manually injecting dependencies","slug":"manually-injecting-dependencies"},{"level":2,"title":"Testing ServiceStack classes in Unit Tests","slug":"testing-servicestack-classes-in-unit-tests"},{"level":3,"title":"Stack Overflow","slug":"stack-overflow"}],"relativePath":"testing.md","lastUpdated":1634495308454}',p={},e=t(`<p>The tests in <a href="https://github.com/ServiceStack/ServiceStack/tree/master/tests/ServiceStack.WebHost.Endpoints.Tests" target="_blank" rel="noopener noreferrer">ServiceStack.WebHost.Endpoints.Tests</a> show good examples of how to create stand-alone integration tests that just use a self-hosted HttpListener AppHost.</p><h2 id="example-stand-alone-integration-tests" tabindex="-1">Example Stand-alone Integration tests <a class="header-anchor" href="#example-stand-alone-integration-tests" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/BufferedRequestTests.cs" target="_blank" rel="noopener noreferrer">BufferedRequestTests</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/AuthTests.cs" target="_blank" rel="noopener noreferrer">AuthTests</a></li></ul><h2 id="integration-testing" tabindex="-1">Integration Testing <a class="header-anchor" href="#integration-testing" aria-hidden="true">#</a></h2><p>If your test project is targeting netcore, <code>AppSelfHostBase</code> is available in the <code>ServiceStack.Kestrel</code> package.</p><p>The <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/CustomerRestExample.cs" target="_blank" rel="noopener noreferrer">CustomerRestExample.cs</a> shows an example of a stand-alone integration test. Integration tests in ServiceStack just involves starting a standard <a href="/self-hosting.html">self-host</a> ServiceStack Instance when the Test Fixture Starts up and disposing it when it tears down. Your integration tests can then communicate with the self-host exactly the same as if it were a remote ServiceStack instance (since that&#39;s all it is), e.g:</p><div class="language-csharp"><pre><code><span class="token comment">//Create your ServiceStack AppHost with only the dependencies it needs</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppSelfHostBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;Customer REST Example&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomerService</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span><span class="token string">&quot;:memory:&quot;</span><span class="token punctuation">,</span> SqliteDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateTableIfNotExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//Add Service Contract DTO&#39;s and Data Models</span>
<span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">&quot;/customers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetCustomers</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>GetCustomersResponse<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetCustomersResponse</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span> Results <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/customers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateCustomer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//Implement your Service Contracts</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">GetCustomers</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetCustomersResponse</span> <span class="token punctuation">{</span> Results <span class="token operator">=</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token class-name">CreateCustomer</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> request<span class="token punctuation">.</span>Name <span class="token punctuation">}</span><span class="token punctuation">;</span>
        Db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//Write your Integration tests</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerRestExample</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> BaseUri <span class="token operator">=</span> <span class="token string">&quot;http://localhost:2000/&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">ServiceStackHost</span> appHost<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomerRestExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//Start your AppHost on OneTimeSetUp</span>
        appHost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
            <span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>BaseUri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OneTimeTearDown</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OneTimeTearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> appHost<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Write your Integration Tests against the self-host instance */</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Can_GET_and_Create_Customers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>BaseUri<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//GET /customers</span>
        <span class="token class-name"><span class="token keyword">var</span></span> all <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetCustomers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>all<span class="token punctuation">.</span>Results<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//POST /customers</span>
        <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateCustomer</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//GET /customers</span>
        all <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetCustomers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>all<span class="token punctuation">.</span>Results<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="unit-testing" tabindex="-1">Unit testing <a class="header-anchor" href="#unit-testing" aria-hidden="true">#</a></h2><p>If you want to unit test a ServiceStack Service in isolation there are a couple of different approaches you can take. The base <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/Service.cs" target="_blank" rel="noopener noreferrer">Service</a> class itself is just a simple C# class which lets you define and inject dependencies manually or by using the built-in IOC container.</p><p>We&#39;ll illustrate both approaches using this <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/UnitTestExample.cs" target="_blank" rel="noopener noreferrer">simple unit test example</a> that tests this simple Service:</p><div class="language-csharp"><pre><code><span class="token comment">// DTOs</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FindRockstars</span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Aged <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> Alive <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetStatus</span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RockstarStatus</span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Alive <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rockstar</span>
<span class="token punctuation">{</span>
   <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Implementation</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name">IRockstarRepository</span> RockstarRepository <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">FindRockstars</span> request<span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token return-type class-name">request<span class="token punctuation">.</span>Aged<span class="token punctuation">.</span>HasValue
          <span class="token punctuation">?</span></span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>Age <span class="token operator">==</span> request<span class="token punctuation">.</span>Aged<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
          <span class="token punctuation">:</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token return-type class-name">RockstarStatus</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">GetStatus</span> request<span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token class-name"><span class="token keyword">var</span></span> rockstar <span class="token operator">=</span> RockstarRepository<span class="token punctuation">.</span><span class="token function">GetByLastName</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>rockstar <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
          <span class="token keyword">throw</span> HttpError<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;&#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>LastName</span><span class="token punctuation">}</span></span><span class="token string">&#39; is not a Rockstar&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token class-name"><span class="token keyword">var</span></span> status <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RockstarStatus</span>
      <span class="token punctuation">{</span>
          Alive <span class="token operator">=</span> RockstarRepository<span class="token punctuation">.</span><span class="token function">IsAlive</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">PopulateWith</span><span class="token punctuation">(</span>rockstar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Populates with matching fields</span>

      <span class="token keyword">return</span> status<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This Service provides 2 operations, <code>FindRockstars</code> which makes db queries directly in the service class itself, and <code>GetStatus</code> which uses a repository instead for all its Data access.</p><h3 id="using-an-in-memory-database" tabindex="-1">Using an in-memory database <a class="header-anchor" href="#using-an-in-memory-database" aria-hidden="true">#</a></h3><p>If you&#39;re accessing <code>Db</code> from directly within your service implementation you&#39;re going to want to make use of a real DB given the <a href="http://msdn.microsoft.com/en-us/library/system.data.idbconnection.aspx" target="_blank" rel="noopener noreferrer">ADO.NET IDbConnection</a> requires a lot of effort to mock. You can do this in the same way you would register your dependencies in ServiceStack itself, by using the built-in IOC. For a unit test we can do this without an AppHost by just use a new <code>Container</code> in your <code>OneTimeSetUp</code>, e.g:</p><h3 id="test-setup" tabindex="-1">Test Setup <a class="header-anchor" href="#test-setup" aria-hidden="true">#</a></h3><div class="language-csharp"><pre><code><span class="token keyword">private</span> <span class="token class-name">ServiceStackHost</span> appHost<span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OneTimeSetUp</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OneTimeSetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    appHost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicAppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> appHost<span class="token punctuation">.</span>Container<span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span><span class="token string">&quot;:memory:&quot;</span><span class="token punctuation">,</span> SqliteDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAutoWiredAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RockstarRepository<span class="token punctuation">,</span> IRockstarRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAutoWired</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimpleService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DropAndCreateTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        db<span class="token punctuation">.</span><span class="token function">InsertAll</span><span class="token punctuation">(</span>SeedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OneTimeTearDown</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OneTimeTearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> appHost<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>With everything setup we can now test the service just like a normal C# class in isolation independently of ServiceStack itself:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Using_in_memory_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Resolve the autowired service from IOC and set Resolver for the base class</span>
    <span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> appHost<span class="token punctuation">.</span>Container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimpleService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token class-name"><span class="token keyword">var</span></span> rockstars <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FindRockstars</span> <span class="token punctuation">{</span> Aged <span class="token operator">=</span> <span class="token number">27</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rockstars<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Print a dump of the results to Console</span>

    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>rockstars<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span>SeedData<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> status <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetStatus</span> <span class="token punctuation">{</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Vedder&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>Alive<span class="token punctuation">,</span> Is<span class="token punctuation">.</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span>

    status <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetStatus</span> <span class="token punctuation">{</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Hendrix&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>Alive<span class="token punctuation">,</span> Is<span class="token punctuation">.</span>False<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Assert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Throws</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpError<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        service<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetStatus</span> <span class="token punctuation">{</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Unknown&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="manually-injecting-dependencies" tabindex="-1">Manually injecting dependencies <a class="header-anchor" href="#manually-injecting-dependencies" aria-hidden="true">#</a></h3><p>If you prefer your unit tests not to use an in-memory database, you can instead choose to mock your dependencies. In this example we&#39;ll use a stand-alone Mock, but you can reduce boilerplate by using mocking library like <a href="https://github.com/Moq/moq" target="_blank" rel="noopener noreferrer">Moq</a> instead.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RockstarRepositoryMock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRockstarRepository</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Rockstar</span> <span class="token function">GetByLastName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lastName <span class="token operator">==</span> <span class="token string">&quot;Vedder&quot;</span>
            <span class="token punctuation">?</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rockstar</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;Eddie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Vedder&quot;</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>
            <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsAlive</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lastName <span class="token operator">==</span> <span class="token string">&quot;Grohl&quot;</span> <span class="token operator">||</span> lastName <span class="token operator">==</span> <span class="token string">&quot;Vedder&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Using_manual_dependency_injection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SimpleService</span>
    <span class="token punctuation">{</span>
        RockstarRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RockstarRepositoryMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> status <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetStatus</span> <span class="token punctuation">{</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Vedder&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>Alive<span class="token punctuation">,</span> Is<span class="token punctuation">.</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Assert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Throws</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpError<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        service<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetStatus</span> <span class="token punctuation">{</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Hendrix&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This example doesn&#39;t need a container as we&#39;re injecting all the dependencies manually.</p><h2 id="testing-servicestack-classes-in-unit-tests" tabindex="-1">Testing ServiceStack classes in Unit Tests <a class="header-anchor" href="#testing-servicestack-classes-in-unit-tests" aria-hidden="true">#</a></h2><p>Much of ServiceStack functionality assumes there&#39;s an AppHost is available which for Unit Tests you can just use an In Memory AppHost, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">My_unit_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicAppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//test ServiceStack classes</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If preferred this can be set up once per test fixture following this pattern:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUnitTests</span>
<span class="token punctuation">{</span>
    <span class="token class-name">ServiceStackHost</span> appHost<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">MyUnitTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> appHost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicAppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OneTimeTearDown</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OneTimeTearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> appHost<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">My_unit_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//test ServiceStack classes</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h1 id="community-resources" tabindex="-1">Community Resources <a class="header-anchor" href="#community-resources" aria-hidden="true">#</a></h1><ul><li><a href="http://kylehodgson.com/2014/06/03/servicestack-4-http-utilities-contract-testing/" target="_blank" rel="noopener noreferrer">ServiceStack 4 HTTP Utilities: Contract Testing</a> by <a href="https://twitter.com/kylehodgson" target="_blank" rel="noopener noreferrer">@kylehodgson</a></li><li><a href="http://iwayneo.blogspot.co.uk/2014/05/regression-testing-servicestack.html" target="_blank" rel="noopener noreferrer">Regression testing ServiceStack services with RavenDB embedded</a> by <a href="https://twitter.com/wayne_douglas" target="_blank" rel="noopener noreferrer">@wayne_douglas</a></li><li><a href="http://dilanperera.wordpress.com/2014/02/23/servicestack-testing-services-with-chrome-rest-console/" target="_blank" rel="noopener noreferrer">ServiceStack \u2013 Testing services with Chrome REST Console</a></li><li><a href="http://tech.pro/tutorial/1276/servicestack-and-ravendb-end-to-end-testing" target="_blank" rel="noopener noreferrer">ServiceStack and RavenDB End to End Testing</a> by <a href="https://twitter.com/AquaBirdConsult" target="_blank" rel="noopener noreferrer">@aquabirdconsult</a></li><li><a href="http://rossipedia.com/blog/2013/02/integration-testing-with-servicestack/" target="_blank" rel="noopener noreferrer">Integration Testing With ServiceStack</a> by <a href="https://twitter.com/rossipedia" target="_blank" rel="noopener noreferrer">@rossipedia</a></li><li><a href="http://www.rickardnilsson.net/post/2013/01/19/how-to-unit-test-your-database-code-when-using-servicestack-ormlite.aspx" target="_blank" rel="noopener noreferrer">How to unit test your database code when using ServiceStack OrmLite</a> by <a href="https://twitter.com/rickardn" target="_blank" rel="noopener noreferrer">@rickardn</a></li><li><a href="http://blogs.lessthandot.com/index.php/DesktopDev/MSTech/easyhttp-and-servicestack-making-it" target="_blank" rel="noopener noreferrer">EasyHttp and ServiceStack, making the mspec tests better</a> by <a href="https://twitter.com/chrissie1" target="_blank" rel="noopener noreferrer">@chrissie1</a></li><li><a href="http://blogs.lessthandot.com/index.php/DesktopDev/MSTech/using-servicestack-for-the-easyhttp" target="_blank" rel="noopener noreferrer">Using ServiceStack for the EasyHttp integration tests</a> by <a href="https://twitter.com/chrissie1" target="_blank" rel="noopener noreferrer">@chrissie1</a></li><li><a href="http://nikosbaxevanis.com/2012/02/18/parameterized-tests-for-servicestack-web-services/" target="_blank" rel="noopener noreferrer">Parameterized Tests for ServiceStack Web Services</a></li></ul><h3 id="stack-overflow" tabindex="-1">Stack Overflow <a class="header-anchor" href="#stack-overflow" aria-hidden="true">#</a></h3><ul><li><a href="http://stackoverflow.com/a/14791657/85785" target="_blank" rel="noopener noreferrer">Unit Test HTTPRequest Headers with ServiceStack</a></li><li><a href="http://stackoverflow.com/a/9587745/85785" target="_blank" rel="noopener noreferrer">ServiceStack and Mocking, any tutorials?</a></li><li><a href="http://stackoverflow.com/a/15012300/85785" target="_blank" rel="noopener noreferrer">How do you mock ServiceStack ISession using Moq and StructureMap?</a></li></ul>`,31),o=[e];function c(l,u,i,k,r,d){return a(),s("div",null,o)}var g=n(p,[["render",c]]);export{y as __pageData,g as default};
