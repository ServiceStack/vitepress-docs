import{_ as s,c as n,o as a,a as e}from"./app.14440598.js";const m='{"title":"Filter Attributes","description":"","frontmatter":{"slug":"filter-attributes","title":"Filter Attributes"},"headers":[{"level":3,"title":"Request Filter Attributes","slug":"request-filter-attributes"},{"level":3,"title":"Response Filter Attributes","slug":"response-filter-attributes"},{"level":3,"title":"Action Filter Attributes","slug":"action-filter-attributes"},{"level":2,"title":"Filter Attributes Example","slug":"filter-attributes-example"},{"level":2,"title":"Example Usage","slug":"example-usage"},{"level":3,"title":"Dependencies are auto-wired","slug":"dependencies-are-auto-wired"},{"level":3,"title":"RequestFilterAttribute base class","slug":"requestfilterattribute-base-class"},{"level":3,"title":"Conditionally Apply Filter Attributes","slug":"conditionally-apply-filter-attributes"}],"relativePath":"filter-attributes.md","lastUpdated":1634495307618}',t={},p=e(`__VP_STATIC_START__<p>ServiceStack also contains interfaces for attributes which can be executed before and after a request like request/response filters. The filter attributes are great for composing re-usable functionality as you can wrap common functionality in a Filter Attribute and selectively annotate which Services they should apply to.</p><p>For example, ServiceStack uses <code>[Authenticate]</code> and <code>[RequiredPermission]</code> filter attributes to decorate which Services should be protected with authentication or specific permissions (see <a href="/authentication-and-authorization.html">Authentication and authorization</a>).</p><h3 id="request-filter-attributes" tabindex="-1">Request Filter Attributes <a class="header-anchor" href="#request-filter-attributes" aria-hidden="true">#</a></h3><p>Request Filters are executed before Services are called. You can create a Filter Attribute by inheriting from the built-in RequestFilterAttribute&#39;s:</p><div class="language-csharp"><pre><code><span class="token comment">//Async:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAsyncRequestFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">RequestFilterAsyncAttribute</span></span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> requestDto<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> userAgent <span class="token operator">=</span> req<span class="token punctuation">.</span>UserAgent<span class="token punctuation">;</span>
        StatisticManager<span class="token punctuation">.</span><span class="token function">SaveUserAgent</span><span class="token punctuation">(</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//Sync:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRequestFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">RequestFilterAttribute</span></span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> requestDto<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Or if you prefer you can instead implement one of the Request or Response Filter interfaces below:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRequestFilterBase</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> Priority <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>      <span class="token comment">// Prioity of &lt;0 are tun before Global Request Filters. &gt;=0 Run after</span>
    <span class="token return-type class-name">IRequestFilterBase</span> <span class="token function">Copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A new shallow copy of this filter is used on every request.</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHasRequestFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequestFilterBase</span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RequestFilter</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> requestDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHasRequestFilterAsync</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequestFilterBase</span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task</span> <span class="token function">RequestFilterAsync</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> requestDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="response-filter-attributes" tabindex="-1">Response Filter Attributes <a class="header-anchor" href="#response-filter-attributes" aria-hidden="true">#</a></h3><p>Response Filters are called after Services are executed.</p><div class="language-csharp"><pre><code><span class="token comment">//Async:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAsyncResponseFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ResponseFilterAsyncAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> responseDto<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">//This code is executed after the service</span>
        res<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;max-age=3600&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//Sync:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomResponseFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ResponseFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> responseDto<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Alternatively you can implement the <code>IHasResponseFilter</code> or <code>IHasResponseFilterAsync</code> interfaces instead.</p><h3 id="action-filter-attributes" tabindex="-1">Action Filter Attributes <a class="header-anchor" href="#action-filter-attributes" aria-hidden="true">#</a></h3><p>All Sync and Async Filter Attributes follow the same <a href="/order-of-operations.html">Order of Operations</a> with Async Attributes executed immediately after any registered sync filters with the same priority.</p><p>Filter attributes annotated on methods are always executed immediately before or after the Service, i.e. the Priority is only scoped and sorted between other method-level attributes.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomRequestFilter</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="filter-attributes-example" tabindex="-1">Filter Attributes Example <a class="header-anchor" href="#filter-attributes-example" aria-hidden="true">#</a></h2><p>The method signatures for Filter Attributes are the same as Global Request/Response Filters with the <code>IRequest</code>, <code>IResponse</code> and Request or Response DTO. Filter attributes can change the DTO, the http response (e.g status code) or look for a specific header in the http request. You can also attach any data to this request via the <code>IHttpRequest.Items</code> dictionary which all subsequent filters and services can access.</p><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-hidden="true">#</a></h2><p>These two attributes have to be added to a request/response DTO or to the service implementation to enable them.</p><div class="language-csharp"><pre><code>
<span class="token comment">//Request DTO</span>
<span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">&quot;/aspect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomRequestFilter</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Company <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Count <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//Response DTO</span>
<span class="token punctuation">[</span>CustomResponseFilter<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserResponse</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHasResponseStatus</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Car <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ResponseStatus</span> ResponseStatus <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>...or if you don&#39;t want the code-first DTOs messed with attributes:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomRequestFilter</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomResponseFilter</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">Aspect</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>That&#39;s all, now ServiceStack recognizes the attributes and executes them on every call!</p><h3 id="dependencies-are-auto-wired" tabindex="-1">Dependencies are auto-wired <a class="header-anchor" href="#dependencies-are-auto-wired" aria-hidden="true">#</a></h3><p>Just like in Services and Validators, the filter attributes are also auto-wired, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRequestFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">RequestFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//This property will be resolved by the IoC container</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ICacheClient</span> Cache <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RequestFilter</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> requestDto<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//Access the property &#39;Cache&#39; here</span>
        
        <span class="token comment">//This code is executed before the service</span>
        <span class="token class-name"><span class="token keyword">string</span></span> userAgent <span class="token operator">=</span> req<span class="token punctuation">.</span>UserAgent<span class="token punctuation">;</span>
        StatisticManager<span class="token punctuation">.</span><span class="token function">SaveUserAgent</span><span class="token punctuation">(</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In this case the property <code>Cache</code> will be tried to be resolved by the IoC container.</p><h3 id="requestfilterattribute-base-class" tabindex="-1">RequestFilterAttribute base class <a class="header-anchor" href="#requestfilterattribute-base-class" aria-hidden="true">#</a></h3><p>ServiceStack also has two base classes, which implement the above interfaces, which make it easier to create contextual filters. Contextual filters are only executed on specific HTTP verbs (GET, POST...).</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatisticFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">RequestFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//This property will be resolved by the IoC container</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ICacheClient</span> Cache <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">StatisticFilterAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">StatisticFilterAttribute</span><span class="token punctuation">(</span><span class="token class-name">ApplyTo</span> applyTo<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>applyTo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IResponse</span> res<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> requestDto<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//This code is executed before the service</span>
        <span class="token class-name"><span class="token keyword">string</span></span> userAgent <span class="token operator">=</span> req<span class="token punctuation">.</span>UserAgent<span class="token punctuation">;</span>
        StatisticManager<span class="token punctuation">.</span><span class="token function">SaveUserAgent</span><span class="token punctuation">(</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>ResponseFilterAttribute</code> base class can be used for Response Filter Attributes which works the same as <code>RequestFilterAttribute</code> above</p></div><h3 id="conditionally-apply-filter-attributes" tabindex="-1">Conditionally Apply Filter Attributes <a class="header-anchor" href="#conditionally-apply-filter-attributes" aria-hidden="true">#</a></h3><p>The base class <code>RequestFilterAttribute</code> has an empty constructor and a constructor which takes the <code>ApplyTo</code> flag. If the empty constructor is called, the method <code>Execute</code> will be called on every HTTP verb (<code>ApplyTo.All</code>), with the other constructor it will be called only on the configured HTTP verbs (eg <code>ApplyTo.Get | ApplyTo.Post</code>).</p><p>So you can use the attribute on your request DTO/service like that:</p><div class="language-csharp"><pre><code><span class="token comment">//Filter will be executed on every request</span>
<span class="token punctuation">[</span>StatisticFilter<span class="token punctuation">]</span>

<span class="token comment">//Filter will be executed only on GET and POST requests</span>
<span class="token punctuation">[</span><span class="token function">StatisticFilter</span><span class="token punctuation">(</span>ApplyTo<span class="token punctuation">.</span>Get <span class="token operator">|</span> ApplyTo<span class="token punctuation">.</span>Post<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre></div>__VP_STATIC_END__`,35),o=[p];function c(l,u,i,r,k,d){return a(),n("div",null,o)}var h=s(t,[["render",c]]);export{m as __pageData,h as default};
