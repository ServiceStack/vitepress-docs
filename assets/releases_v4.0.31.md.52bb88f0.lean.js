import{_ as n,c as s,o as a,a as e}from"./app.14440598.js";const h=`{"title":"v4.0.31 Release Notes","description":"","frontmatter":{"title":"v4.0.31 Release Notes","slug":"v4-0-31"},"headers":[{"level":2,"title":"Redis ServerEvents","slug":"redis-serverevents"},{"level":3,"title":"Enabling RedisServer Events","slug":"enabling-redisserver-events"},{"level":3,"title":"Cross-platform Memory and Redis ServerEvent Enabled Chat.exe","slug":"cross-platform-memory-and-redis-serverevent-enabled-chat-exe"},{"level":3,"title":"Chat.zip (1.2MB)","slug":"chat-zip-1-2mb"},{"level":2,"title":"C# ServerEvents Client","slug":"c-serverevents-client"},{"level":3,"title":"Managed Connection","slug":"managed-connection"},{"level":3,"title":"Handling Server Events","slug":"handling-server-events"},{"level":3,"title":"Assigning Callback Handlers","slug":"assigning-callback-handlers"},{"level":3,"title":"Customizing Metadata sent to clients","slug":"customizing-metadata-sent-to-clients"},{"level":3,"title":"Using C# Async/Await friendly API's","slug":"using-c-async-await-friendly-api-s"},{"level":3,"title":"Message Event Handlers","slug":"message-event-handlers"},{"level":3,"title":"Named Receivers","slug":"named-receivers"},{"level":3,"title":"Sending messages to Named Receivers","slug":"sending-messages-to-named-receivers"},{"level":3,"title":"Life-cycle of Receivers","slug":"life-cycle-of-receivers"},{"level":3,"title":"The Global Receiver","slug":"the-global-receiver"},{"level":2,"title":"ServiceStack.Redis","slug":"servicestack-redis"},{"level":3,"title":"Redis Pub/Sub Server","slug":"redis-pub-sub-server"},{"level":2,"title":"App Settings","slug":"app-settings"},{"level":3,"title":"First class AppSettings","slug":"first-class-appsettings"},{"level":3,"title":"AppSettings are now writable","slug":"appsettings-are-now-writable"},{"level":2,"title":"Metadata Pages","slug":"metadata-pages"},{"level":2,"title":"Authentication","slug":"authentication"},{"level":3,"title":"Web Sudo","slug":"web-sudo"},{"level":3,"title":"Auth Events","slug":"auth-events"},{"level":2,"title":"OrmLite","slug":"ormlite"},{"level":2,"title":"Text","slug":"text"},{"level":2,"title":"Community","slug":"community"},{"level":2,"title":"ServiceStack MiniProfiler Toolkit","slug":"servicestack-miniprofiler-toolkit"},{"level":3,"title":"Description","slug":"description"},{"level":3,"title":"Screenshots","slug":"screenshots"},{"level":3,"title":"Install","slug":"install"},{"level":3,"title":"Register the Plugin:","slug":"register-the-plugin"}],"relativePath":"releases/v4.0.31.md","lastUpdated":1634495308430}`,t={},p=e(`__VP_STATIC_START__<p>The most requested feature since our last release was to expand our last releases support for <a href="https://github.com/ServiceStackApps/Chat#server-sent-events" target="_blank" rel="noopener noreferrer">Server Sent Events</a> with both a scale-out <strong>Redis ServerEvents back-end</strong> for use in load-balanced App Servers scenarios as well as a <strong>typed C# ServerEvents Client</strong> - we&#39;re happy to announce we&#39;ve been able to deliver both features in this release!</p><h4 id="major-features-in-this-release" tabindex="-1">Major features in this release <a class="header-anchor" href="#major-features-in-this-release" aria-hidden="true">#</a></h4><ul><li>Server Events <ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#redis-serverevents" target="_blank" rel="noopener noreferrer">Redis ServerEvents</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#c-serverevents-client" target="_blank" rel="noopener noreferrer">C# ServerEvents Client</a></li></ul></li><li>Redis <ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#redis-pubsub-server" target="_blank" rel="noopener noreferrer">Redis Pub/Sub Server</a></li></ul></li><li>AppSettings <ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#first-class-appsettings" target="_blank" rel="noopener noreferrer">First-class AppSettings</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#appsettings-are-now-writable" target="_blank" rel="noopener noreferrer">Writable AppSettings API</a></li></ul></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#metadata-pages" target="_blank" rel="noopener noreferrer">Metadata Pages</a></li><li>Authentication <ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#web-sudo" target="_blank" rel="noopener noreferrer">WebSudo</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#auth-events" target="_blank" rel="noopener noreferrer">Auth Events</a></li></ul></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#ormlite" target="_blank" rel="noopener noreferrer">OrmLite</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#text" target="_blank" rel="noopener noreferrer">Text</a></li><li>Community <ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/release-notes.md#servicestack-miniprofiler-toolkit" target="_blank" rel="noopener noreferrer">ServiceStack MiniProfiler Toolkit</a></li></ul></li></ul><h2 id="redis-serverevents" tabindex="-1">Redis ServerEvents <a class="header-anchor" href="#redis-serverevents" aria-hidden="true">#</a></h2><p>One limitation the default <code>MemoryServerEvents</code> implementation has is being limited for use within a single App Server where all client connections are maintained. This is no longer a limitation with the new <strong>Redis ServerEvents back-end</strong> which utilizes a distributed redis-server back-end to provide a scale-out option capable of serving fan-out/load-balanced App Servers. If you&#39;re familiar with SignalR, this is akin to <a href="http://www.asp.net/signalr/overview/signalr-20/performance-and-scaling/scaleout-with-redis" target="_blank" rel="noopener noreferrer">SignalR&#39;s scaleout with Redis back-end</a>.</p><p><code>RedisServerEvents</code> is a drop-in replacement for the built-in <code>MemoryServerEvents</code> that&#39;s effectively a transparent implementation detail, invisible to Server or Client API&#39;s where both implementations even <a href="https://github.com/ServiceStack/ServiceStack/blob/b9eb34eb80ff64fa1171d2f7f29ef359c3580eed/tests/ServiceStack.WebHost.Endpoints.Tests/ServerEventTests.cs#L169-L189" target="_blank" rel="noopener noreferrer">share the same integration Tests</a>.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/gap/Chat/redis-scaleout.png" alt="Redis ServerEvents Scale Out"></p><h3 id="enabling-redisserver-events" tabindex="-1">Enabling RedisServer Events <a class="header-anchor" href="#enabling-redisserver-events" aria-hidden="true">#</a></h3><p>As a drop-in replacement it can easily be configured with just a few lines of code, as seen in the updated Chat App which can run on either <a href="https://github.com/ServiceStackApps/Chat/blob/326617e88272d7cc0a8b7513272cf055378957e2/src/Chat/Global.asax.cs#L46-L54" target="_blank" rel="noopener noreferrer">Memory or Redis ServerEvents providers</a>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> redisHost <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;RedisHost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>redisHost <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PooledRedisClientManager</span><span class="token punctuation">(</span>redisHost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServerEvents<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisServerEvents</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServerEvents<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The above configuration will use Redis ServerEvents if there&#39;s a <code>RedisHost</code> <strong>appSetting</strong> in Chat&#39;s <a href="https://github.com/ServiceStackApps/Chat/blob/326617e88272d7cc0a8b7513272cf055378957e2/src/Chat/Web.config#L21" target="_blank" rel="noopener noreferrer">Web.config</a>:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>RedisHost<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost:6379<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h3 id="cross-platform-memory-and-redis-serverevent-enabled-chat-exe" tabindex="-1">Cross-platform Memory and Redis ServerEvent Enabled Chat.exe <a class="header-anchor" href="#cross-platform-memory-and-redis-serverevent-enabled-chat-exe" aria-hidden="true">#</a></h3><p>To showcase Redis ServerEvents in action, we&#39;ve prepared a stand-alone <a href="https://github.com/ServiceStack/ServiceStack.Gap" target="_blank" rel="noopener noreferrer">ServiceStack.Gap</a> version of <a href="http://chat.netcore.io" target="_blank" rel="noopener noreferrer">Chat</a> compiled down into a single <strong>Chat.exe</strong> that can run on either Windows and OSX with Mono which can be downloaded from:</p><h3 id="chat-zip-1-2mb" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack.Gap/raw/master/deploy/Chat.zip" target="_blank" rel="noopener noreferrer">Chat.zip</a> (1.2MB) <a class="header-anchor" href="#chat-zip-1-2mb" aria-hidden="true">#</a></h3><p><a href="https://github.com/ServiceStack/ServiceStack.Gap/raw/master/deploy/Chat.zip" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/release-notes/redis-server-events.gif" alt="Redis ServerEvents Preview"></a></p><blockquote><p>As Chat only runs on <strong>2 back-end Services</strong>, it fits well within <a href="https://servicestack.net/download#free-quotas" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s Free Quota&#39;s</a> which can be further customized and enhanced without a commercial license.</p></blockquote><p>Running <strong>Chat.exe</strong> without any arguments will run Chat using the default <strong>Memory ServerEvents</strong>. This can be changed to use <strong>Redis ServerEvents</strong> by <a href="https://github.com/ServiceStack/ServiceStack.Gap/blob/master/src/Chat/Chat/appsettings.txt#L5" target="_blank" rel="noopener noreferrer">un-commenting this line in appsettings.txt</a>:</p><div class="language-"><pre><code>#redis localhost
</code></pre></div><p>This will require a <strong>redis-server</strong> running on <code>localhost</code>. If you don&#39;t have redis yet, <a href="https://github.com/ServiceStack/redis-windows" target="_blank" rel="noopener noreferrer">download redis-server for Windows</a>.</p><p>Alternatively you can specify which <strong>port</strong> to run Chat on and change it to use Redis ServerEvents by specifying the <strong>redis</strong> instance it should connect to on the command-line with:</p><div class="language-"><pre><code>Chat.exe /port=1337 /redis=localhost
</code></pre></div><p>Also included in <code>Chat.zip</code> are <a href="https://github.com/ServiceStack/ServiceStack.Gap/blob/master/src/Chat/build/test-fanout-redis-events.bat" target="_blank" rel="noopener noreferrer">test-fanout-redis-events.bat</a> and equivalent <a href="https://github.com/ServiceStack/ServiceStack.Gap/blob/master/src/Chat/build/test-fanout-redis-events.sh" target="_blank" rel="noopener noreferrer">test-fanout-redis-events.sh</a> helper scripts for <strong>spawning multiple versions of Chat.exe</strong> on different ports (and backgrounds) for <strong>Windows or OSX</strong>, showing how multiple clients are able to send messages to each other via Redis whilst being subscribed to different HTTP Servers:</p><div class="language-"><pre><code>START Chat.exe /port=1337 /redis=localhost
START Chat.exe /port=2337 /redis=localhost /background=http://bit.ly/1oQqhtm
START Chat.exe /port=3337 /redis=localhost /background=http://bit.ly/1yIJOBH
</code></pre></div><p>This script was used to create the animated gif above to launch <strong>3 self-hosting instances of Chat.exe</strong> running on <strong>different ports</strong>, all connected to each other via Redis. This enables some interesting peer-to-peer scenarios where users are able to run a network of (CPU/resource isolated) decentralized stand-alone HTTP Servers on their local machines, but can still communicate with each other via redis.</p><h2 id="c-serverevents-client" tabindex="-1">C# ServerEvents Client <a class="header-anchor" href="#c-serverevents-client" aria-hidden="true">#</a></h2><p>Like ServiceStack&#39;s other <a href="/csharp-client.html">C# Service Clients</a>, the new <code>ServerEventsClient</code> is a <a href="https://github.com/ServiceStackApps/HelloMobile" target="_blank" rel="noopener noreferrer">portable library</a> contained in the <code>ServiceStack.Client</code> NuGet package:</p><div class="language-"><pre><code>PM&gt; Install-Package ServiceStack.Client
</code></pre></div><p>And like the Service Clients it requires the <code>BaseUri</code> of your ServiceStack instance as well as an optional <code>channel</code> for the client to subscribe to:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerEventsClient</span><span class="token punctuation">(</span><span class="token string">&quot;http://chat.netcore.io&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">channel</span><span class="token punctuation">:</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="managed-connection" tabindex="-1">Managed Connection <a class="header-anchor" href="#managed-connection" aria-hidden="true">#</a></h3><p>The <strong>C# ServerEvent Client</strong> is a managed .NET client with feature parity with the <a href="https://github.com/ServiceStackApps/Chat#client-bindings---ss-utilsjs" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s JavaScript client</a> that <strong>auto-reconnects</strong> when a connection is lost, <strong>sends periodic heartbeats</strong> to maintain an active subscription as well as <strong>auto-unregistering</strong> once the client stops listening for messages, or gets disposed.</p><h3 id="handling-server-events" tabindex="-1">Handling Server Events <a class="header-anchor" href="#handling-server-events" aria-hidden="true">#</a></h3><p>Unlike other C# clients, the ServerEvents Client is mainly reactive in that it&#39;s primarily waiting for Server Events to be initiated from a remote server instead of the typical scenario in which requests are initiated by clients. To maximize utility, there are a number of different API&#39;s to receive and process messages:</p><h3 id="assigning-callback-handlers" tabindex="-1">Assigning Callback Handlers <a class="header-anchor" href="#assigning-callback-handlers" aria-hidden="true">#</a></h3><p>One way to receive messages (useful in long-running clients) is to assign handlers for each of the different events that are fired. This example shows how to capture all the different events a Client can receive:</p><div class="language-csharp"><pre><code><span class="token class-name">ServerEventConnect</span> connectMsg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> msgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ServerEventMessage<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> commands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ServerEventMessage<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerEventsClient</span><span class="token punctuation">(</span>baseUri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    OnConnect <span class="token operator">=</span> e <span class="token operator">=&gt;</span> connectMsg <span class="token operator">=</span> e<span class="token punctuation">,</span>
    OnCommand <span class="token operator">=</span> commands<span class="token punctuation">.</span>Add<span class="token punctuation">,</span>
    OnMessage <span class="token operator">=</span> msgs<span class="token punctuation">.</span>Add<span class="token punctuation">,</span>
    OnException <span class="token operator">=</span> errors<span class="token punctuation">.</span>Add<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Once the Client is configured, calling <code>Start()</code> will start listening for messages and calling <code>Stop()</code> or <code>Dispose()</code> will cancel the background HTTP connection and stop it listening for server events.</p><h3 id="customizing-metadata-sent-to-clients" tabindex="-1">Customizing Metadata sent to clients <a class="header-anchor" href="#customizing-metadata-sent-to-clients" aria-hidden="true">#</a></h3><p>As ServerEvents have deep integration with the rest of ServiceStack we&#39;re able to offer <a href="https://github.com/ServiceStack/ServiceStack/blob/71b51d231d1ddb2ba7da39613e216ab75fd181c0/src/ServiceStack.Client/ServerEventsClient.cs#L14-L44" target="_blank" rel="noopener noreferrer">Typed Messages</a> containing the users <code>UserAuthId</code>, <code>DisplayName</code> and <code>ProfileUrl</code> of the users avatar when it&#39;s available. The typed messages also offer an extensible <code>Dictionary&lt;string,string&gt; Meta</code> collection for maintaining custom metadata that can be sent to clients by appending to them in the ServerEventsFeature hooks, which can be defined when registering <code>ServerEventsFeature</code>:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerEventsFeature</span> <span class="token punctuation">{</span> 
    <span class="token comment">// private Connect args</span>
    OnConnect <span class="token operator">=</span> <span class="token punctuation">(</span>subscription<span class="token punctuation">,</span>httpReq<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">AppendTo</span><span class="token punctuation">(</span>subscription<span class="token punctuation">.</span>Meta<span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment">// public Join/Leave args</span>
    OnCreated <span class="token operator">=</span> <span class="token punctuation">(</span>subscription<span class="token punctuation">,</span>httpReq<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">AppendTo</span><span class="token punctuation">(</span>subscription<span class="token punctuation">.</span>Meta<span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="using-c-async-await-friendly-api-s" tabindex="-1">Using C# Async/Await friendly API&#39;s <a class="header-anchor" href="#using-c-async-await-friendly-api-s" aria-hidden="true">#</a></h3><p>Depending on your use-case, if you only want to use the ServerEvent Client for a short-time to listen for predictable responses (i.e. waiting for a Server callback on a pending request) you can alternatively use the Task-based API&#39;s letting you to participate in C# async/await workflows:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerEventsClient</span><span class="token punctuation">(</span>baseUri<span class="token punctuation">,</span> channel<span class="token operator">=</span><span class="token string">&quot;Home&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Wait to receive onConnect event</span>
<span class="token class-name">ServerEventConnect</span> connectMsg <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Wait to receive onJoin command event</span>
<span class="token class-name">ServerEventCommand</span> joinMsg <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">WaitForNextCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Hold a future task to get notified once a msg has been received</span>
<span class="token class-name">Task<span class="token punctuation">&lt;</span>ServerEventMessage<span class="token punctuation">&gt;</span></span> msgTask <span class="token operator">=</span> client1<span class="token punctuation">.</span><span class="token function">WaitForNextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Send a Web Service Request using the built-in JsonServiceClient</span>
client<span class="token punctuation">.</span>ServiceClient<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostChatToChannel</span> <span class="token punctuation">{</span>
    Channel <span class="token operator">=</span> client<span class="token punctuation">.</span>Channel<span class="token punctuation">,</span>     <span class="token comment">// The channel we&#39;re listening on</span>
    From <span class="token operator">=</span> client<span class="token punctuation">.</span>SubscriptionId<span class="token punctuation">,</span> <span class="token comment">// SubscriptionId Populated after Connect() </span>
    Message <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Wait till we receive the chat Msg event we sent earlier</span>
<span class="token class-name">ServerEventMessage</span> msg <span class="token operator">=</span> <span class="token keyword">await</span> msgTask<span class="token punctuation">;</span>
</code></pre></div><p>The above example showcases the <strong>3 Task-based API&#39;s</strong> available:</p><ol><li><code>Connect()</code> wait till receiving confirmation of a successful event subscription</li><li><code>WaitForNextCommand()</code> wait for the next <code>onJoin</code> or <code>onLeave</code> subscription events</li><li><code>WaitForNextMessage()</code> wait for the next message published to the channel</li></ol><p>The <code>ServiceClient</code> property lets you access a <code>JsonServiceClient</code> that&#39;s pre-configured with the clients <code>BaseUri</code> so that is primed for Sending Web Service Requests with.</p><p>After the ServerEvent Client has connected, the <code>ConnectionInfo</code> property is populated with the typed <code>ServerEventConnect</code> response.</p><h3 id="message-event-handlers" tabindex="-1">Message Event Handlers <a class="header-anchor" href="#message-event-handlers" aria-hidden="true">#</a></h3><p>The above examples show generic API&#39;s for receiving any type of message, but just like in the JavaScript client, more fine-grained API&#39;s are available for handling specific message types.</p><p>The <code>Handlers</code> dictionary is akin to the JavaScript Client&#39;s <a href="https://github.com/ServiceStackApps/Chat#global-event-handlers" target="_blank" rel="noopener noreferrer">Global Event Handlers</a> which specify lambda&#39;s to be executed when messages are sent with the <code>cmd.*</code> selector:</p><div class="language-csharp"><pre><code>client<span class="token punctuation">.</span>Handlers<span class="token punctuation">[</span><span class="token string">&quot;chat&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>client<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> chatMsg <span class="token operator">=</span> msg<span class="token punctuation">.</span>Json<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ChatMessage<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Deserialize JSON string to typed DTO</span>
    <span class="token string">&quot;Received &#39;{0}&#39; from &#39;{1}&#39;&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>chatMsg<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> chatMsg<span class="token punctuation">.</span>FromName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Roughly translates to the equivalent JavaScript below:</p><div class="language-javascript"><pre><code><span class="token function">$</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleServerEvents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    handlers<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">chat</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Received &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">&quot; from &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>fromName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where both methods handle the <code>ChatMessage</code> sent with the <code>cmd.chat</code> selector.</p><h3 id="named-receivers" tabindex="-1">Named Receivers <a class="header-anchor" href="#named-receivers" aria-hidden="true">#</a></h3><p>Whilst handlers provide a light way to handle loose-typed messages, there&#39;s a more structured and typed option that works similar to ServiceStack&#39;s <code>IService</code> classes but are used to instead handle typed Server Event Messages.</p><p>To be able to handle messages with your own classes, get them to implement the <code>IReceiver</code> empty marker interface:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IReceiver</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NoSuchMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> selector<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Whilst primarily a marker interface, <code>IReceiver</code> does include a <code>NoSuchMethod</code> API to be able to handle messages sent with a unknown selector <strong>target</strong> that doesn&#39;t match any defined method or property.</p><p><strong>Named Receivers</strong> are equivalent to <a href="https://github.com/ServiceStackApps/Chat#receivers" target="_blank" rel="noopener noreferrer">Receivers</a> in the JavaScript client which can be assigned to handle all messages sent to a receiver with the selector format:</p><div class="language-"><pre><code>{receiver}.{target}
</code></pre></div><p>A Named Receiver can be registered with the API below:</p><div class="language-csharp"><pre><code>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterNamedReceiver</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestNamedReceiver<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will forward all messages with a <code>test.*</code> selector to an instance of the <code>TestNamedReceiver</code> Type</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestNamedReceiver</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServerEventReceiver</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FooMethod</span><span class="token punctuation">(</span><span class="token class-name">CustomType</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// void return type</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">CustomType</span> <span class="token function">BarMethod</span><span class="token punctuation">(</span><span class="token class-name">CustomType</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>        
        <span class="token keyword">return</span> request<span class="token punctuation">;</span> <span class="token comment">// works with any return type, which are ignored</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">CustomType</span> BazSetter <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// Auto populate properties</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NoSuchMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> selector<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> msg <span class="token operator">=</span> <span class="token punctuation">(</span>ServerEventMessage<span class="token punctuation">)</span>message<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> nonExistentMethodCustomType <span class="token operator">=</span> msg<span class="token punctuation">.</span>Json<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This is roughly equivalent to the following JavaScript code:</p><div class="language-javascript"><pre><code><span class="token function">$</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleServerEvents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    receivers<span class="token operator">:</span> <span class="token punctuation">{</span>
        test<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">FooMethod</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function-variable function">BarMethod</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            BazSetter<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>The <a href="https://github.com/ServiceStack/ServiceStack/blob/68c7159037e7cf2a519d482b7dae524ca073da20/src/ServiceStack.Client/ServerEventsClient.Receiver.cs#L16-L28" target="_blank" rel="noopener noreferrer">ServerEventReceiver</a> is a convenient base class that in addition to implementing <code>IReceiver</code> interface, gets injected with the <code>Client</code> as well as additional context about the raw message available in <code>base.Request</code>.</p></blockquote><h4 id="unknown-message-handling" tabindex="-1">Unknown Message Handling <a class="header-anchor" href="#unknown-message-handling" aria-hidden="true">#</a></h4><p>One difference in the JavaScript client is that messages with <strong>unknown</strong> targets are assigned as properties on the <code>test</code> receiver, e.g <code>test.QuxTarget = {..}</code>.</p><h3 id="sending-messages-to-named-receivers" tabindex="-1">Sending messages to Named Receivers <a class="header-anchor" href="#sending-messages-to-named-receivers" aria-hidden="true">#</a></h3><p>Once registered, an instance of <code>TestNamedReceiver</code> will process messages sent with a <code>test.*</code> selector. The example below shows how to send a DTO to each of <code>TestNamedReceiver</code> defined methods and properties:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEventServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IServerEvents</span> ServerEvents <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CustomType</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ServerEvents<span class="token punctuation">.</span><span class="token function">NotifyChannel</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.FooMethod&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ServerEvents<span class="token punctuation">.</span><span class="token function">NotifyChannel</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.BarMethod&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ServerEvents<span class="token punctuation">.</span><span class="token function">NotifyChannel</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.BazSetter&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ServerEvents<span class="token punctuation">.</span><span class="token function">NotifyChannel</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.QuxTarget&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="life-cycle-of-receivers" tabindex="-1">Life-cycle of Receivers <a class="header-anchor" href="#life-cycle-of-receivers" aria-hidden="true">#</a></h3><p>Similar to <strong>Services</strong> in ServiceStack, each message is processed with an instance of the Receiver that&#39;s resolved from <code>ServerEventsClient.Resolver</code> which by default uses the <a href="https://github.com/ServiceStack/ServiceStack/blob/ec0226b97227048c3bd7c24667a71e7af7e1ff31/src/ServiceStack.Client/ServerEventsClient.Receiver.cs#L30-L36" target="_blank" rel="noopener noreferrer">NewInstanceResolver</a> to execute messages using a new instance of the Receiver Type:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewInstanceResolver</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IResolver</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">TryResolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This can be changed to re-use the same instance by assigning a <a href="https://github.com/ServiceStack/ServiceStack/blob/ec0226b97227048c3bd7c24667a71e7af7e1ff31/src/ServiceStack.Client/ServerEventsClient.Receiver.cs#L38-L46" target="_blank" rel="noopener noreferrer">SingletonInstanceResolver</a> instead:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstanceResolver</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IResolver</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> Cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">TryResolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Cache<span class="token punctuation">.</span><span class="token function">GetOrAdd</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type <span class="token operator">=&gt;</span> type<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

client<span class="token punctuation">.</span>Resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SingletonInstanceResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>We can also have it resolve instances from your preferred IOC. Here&#39;s an example showing how to register all Receiver Types, auto-wire them with any custom dependencies, and instruct the client to resolve instances from our IOC:</p><div class="language-csharp"><pre><code><span class="token comment">// Register all Receivers:</span>
client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterNamedReceiver</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestNamedReceiver<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>

<span class="token comment">// Register all dependencies used in a new Funq.Container:</span>
<span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Dependency<span class="token punctuation">,</span> IDependency<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Go through an auto-wire all Registered Receiver Types with Funq:</span>
container<span class="token punctuation">.</span><span class="token function">RegisterAutoWiredTypes</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>ReceiverTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Change the client to resolve receivers from the new Funq Container:</span>
client<span class="token punctuation">.</span>Resolver <span class="token operator">=</span> container<span class="token punctuation">;</span>
</code></pre></div><p>We can assign <code>Funq.Container</code> directly as it already implements the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Configuration/IResolver.cs" target="_blank" rel="noopener noreferrer">IResolver</a> interface, whilst you can re-use the existing IOC <strong>Container Adapters</strong> to <a href="/ioc.html#use-another-ioc-container">enable support for other IOCs</a>.</p><h3 id="the-global-receiver" tabindex="-1">The Global Receiver <a class="header-anchor" href="#the-global-receiver" aria-hidden="true">#</a></h3><p>Whilst Named Receivers are used to handle messages sent to a specific namespaced selector, the client also supports registering a <strong>Global Receiver</strong> for handling messages sent with the special <code>cmd.*</code> selector.</p><h4 id="handling-messages-with-the-default-selector" tabindex="-1">Handling Messages with the Default Selector <a class="header-anchor" href="#handling-messages-with-the-default-selector" aria-hidden="true">#</a></h4><p>All <code>IServerEvents</code> Notify API&#39;s inlcudes <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/ServerEventsFeature.cs#L743-L771" target="_blank" rel="noopener noreferrer">overloads for sending messages without a selector</a> that by convention will take the format <code>cmd.{TypeName}</code>.</p><p>These events can be handled with a Global Receiver <strong>based on Message type</strong>, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalReceiver</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServerEventReceiver</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">SetterType</span> AnyNamedProperty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AnyNamedMethod</span><span class="token punctuation">(</span><span class="token class-name">CustomType</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterReceiver</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GlobalReceiver<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will be called when messages are sent without a selector, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IServerEvents</span> ServerEvents <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ServerEvents<span class="token punctuation">.</span><span class="token function">NotifyChannel</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomType</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ServerEvents<span class="token punctuation">.</span><span class="token function">NotifyChannel</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SetterType</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>As Global Receivers handle other messages sent with the <code>cmd.*</code> selector and can be re-used as a named receiver, we can define a single class to handle all the different custom messages sent in <a href="http://chat.netcore.io" target="_blank" rel="noopener noreferrer">chat.netcore.io</a> App, E.g:</p><div class="language-"><pre><code>cmd.chat Hi
cmd.announce This is your captain speaking...
cmd.toggle#channels
css.background-image url(https://servicestack.net/img/bg.jpg)
...
</code></pre></div><p>The above messages can all be handled with the Receiver below:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaScriptReceiver</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServerEventReceiver</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Chat</span><span class="token punctuation">(</span><span class="token class-name">ChatMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Announce</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BackgroundImage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> cssRule<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterNamedReceiver</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>JavaScriptReceiver<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterNamedReceiver</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>JavaScriptReceiver<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>As seen above the <strong>target</strong> names are <strong>case-insensitive</strong> and <code>-</code> are collapsed to cater for JavaScript/CSS naming conventions.</p><h2 id="servicestack-redis" tabindex="-1">ServiceStack.Redis <a class="header-anchor" href="#servicestack-redis" aria-hidden="true">#</a></h2><h3 id="redis-pub-sub-server" tabindex="-1">Redis Pub/Sub Server <a class="header-anchor" href="#redis-pub-sub-server" aria-hidden="true">#</a></h3><p>To power RedisServerEvents we&#39;ve extracted the managed Pub/Sub long-running message-loop originally built for <a href="/redis-mq.html">Redis MQ</a> and encapsulated it into a re-usable class that can be used independently for handling messages published to specific <a href="http://redis.io/commands#pubsub" target="_blank" rel="noopener noreferrer">Redis Pub/Sub</a> channels.</p><p><code>RedisPubSubServer</code> processes messages in a managed background thread that <strong>automatically reconnects</strong> when the redis-server connection fails and works like an independent background Service that can be stopped and started on command.</p><p>The public API is captured in the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisPubSubServer.cs" target="_blank" rel="noopener noreferrer">IRedisPubSubServer</a> interface:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisPubSubServer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">IRedisClientsManager</span> ClientsManager <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// What Channels it&#39;s subscribed to</span>
    <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Channels <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Run once on initial StartUp</span>
    <span class="token return-type class-name">Action</span> OnInit <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Called each time a new Connection is Started</span>
    <span class="token return-type class-name">Action</span> OnStart <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Invoked when Connection is broken or Stopped</span>
    <span class="token return-type class-name">Action</span> OnStop <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Invoked after Dispose()</span>
    <span class="token return-type class-name">Action</span> OnDispose <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Fired when each message is received</span>
    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> OnMessage <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Fired after successfully subscribing to the specified channels</span>
    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> OnUnSubscribe <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Called when an exception occurs </span>
    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span> OnError <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Called before attempting to Failover to a new redis master</span>
    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>IRedisPubSubServer<span class="token punctuation">&gt;</span></span> OnFailover <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> KeepAliveRetryAfterMs <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// The Current Time for RedisServer</span>
    <span class="token return-type class-name">DateTime</span> CurrentServerTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Current Status: Starting, Started, Stopping, Stopped, Disposed</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Different life-cycle stats</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetStatsDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Subscribe to specified Channels and listening for new messages</span>
    <span class="token return-type class-name">IRedisPubSubServer</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Close active Connection and stop running background thread</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Stop than Start</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>To use <code>RedisPubSubServer</code>, initialize it with the channels you want to subscribe to and assign handlers for each of the events you want to handle. At a minimum you&#39;ll want to handle <code>OnMessage</code>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> clientsManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PooledRedisClientManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> redisPubSub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisPubSubServer</span><span class="token punctuation">(</span>clientsManager<span class="token punctuation">,</span> <span class="token string">&quot;channel-1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;channel-2&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        OnMessage <span class="token operator">=</span> <span class="token punctuation">(</span>channel<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Received &#39;{0}&#39; from &#39;{1}&#39;&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> channel<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Calling <code>Start()</code> after it&#39;s initialized will get it to start listening and processing any messages published to the subscribed channels.</p><h2 id="app-settings" tabindex="-1"><a href="/appsettings.html">App Settings</a> <a class="header-anchor" href="#app-settings" aria-hidden="true">#</a></h2><p>For many years our solution against using .NET&#39;s complex XML configuration for App configuration is to store structured configuration in the <strong>Web.config</strong> appSettings which thanks to the <a href="/jsv-format.html">JSV format</a> makes it easy to read and write structured data from a single string value, e.g:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>String<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>List<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A,B,C,D,E<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Dict<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A:1,B:2,C:3<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Poco<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{Foo:Bar}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>This can be easily parsed into C# types with the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Configuration/IAppSettings.cs" target="_blank" rel="noopener noreferrer">IAppSettings</a> API:</p><div class="language-csharp"><pre><code><span class="token class-name">IAppSettings</span> settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;Int&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">defaultValue</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">GetList</span><span class="token punctuation">(</span><span class="token string">&quot;List&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> valuesMap <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">GetDictionary</span><span class="token punctuation">(</span><span class="token string">&quot;Dict&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MyConfig</span> config <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;Poco&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfig</span> <span class="token punctuation">{</span> Foo <span class="token operator">=</span> <span class="token string">&quot;Baz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Like other ServiceStack providers, <code>IAppSettings</code> is a clean interface with multiple providers letting you easily change or override where you want to source your App configuration from:</p><ul><li><strong>DictionarySettings</strong> - Maintain settings in an in-memory Dictionary</li><li><strong>TextFileSettings</strong> - Maintain settings in a plain-text file</li><li><strong>OrmLiteAppSettings</strong> - Maintain settings in any RDBMS <code>Config</code> table</li></ul><p>We take advantage of this in our <a href="https://github.com/ServiceStackApps/Chat" target="_blank" rel="noopener noreferrer">public OSS projects</a> when we want to override <a href="https://github.com/ServiceStackApps/HttpBenchmarks/blob/master/src/BenchmarksAnalyzer/Global.asax.cs#L29-L32" target="_blank" rel="noopener noreferrer">public appSettings with production settings</a> or in our <a href="https://github.com/ServiceStack/ServiceStack.Gap" target="_blank" rel="noopener noreferrer">stand-alone Applications</a> by allowing us to ship our applications with more end-user friendly <strong>plain-text config file</strong> whose defaults are embedded in the stand-alone <strong>.exe</strong>, exporting it if it doesn&#39;t exist - letting us achieve a single, portable <strong>.exe</strong> that can be xcopy&#39;ed and run as-is.</p><h3 id="first-class-appsettings" tabindex="-1">First class AppSettings <a class="header-anchor" href="#first-class-appsettings" aria-hidden="true">#</a></h3><p>After proving its value over the years we&#39;ve decided to make it a first-class property on <code>IAppHost.AppSettings</code> which defaults to looking at .NET&#39;s App/Web.config&#39;s.</p><p>The new <a href="https://github.com/ServiceStack/ServiceStack.Gap/raw/master/deploy/Chat.zip" target="_blank" rel="noopener noreferrer">Chat.zip</a> App explores different ways AppSettings can be used:</p><p>If there&#39;s an existing <code>appsettings.txt</code> file where the <strong>.exe</strong> is run it will use that, otherwise it falls back to <strong>Web.config</strong> appSettings:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;Chat&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token type-expression class-name">ServerEventsServices</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> customSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token string">&quot;appsettings.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    AppSettings <span class="token operator">=</span> customSettings<span class="token punctuation">.</span>Exists
        <span class="token punctuation">?</span> <span class="token punctuation">(</span>IAppSettings<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFileSettings</span><span class="token punctuation">(</span>customSettings<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>As a normal property in your AppHost, AppSettings can be accessed directly in <code>AppHost.Configure()</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token class-name"><span class="token keyword">var</span></span> redisHost <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;RedisHost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>redisHost <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServerEvents<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisServerEvents</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PooledRedisClientManager</span><span class="token punctuation">(</span>redisHost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServerEvents<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Inside your services or IOC dependencies, like any other auto-wired dependency:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerEventsServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IAppSettings</span> AppSettings <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">PostRawToChannel</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>IsAuthenticated <span class="token operator">&amp;&amp;</span> AppSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;LimitRemoteControlToAuthenticatedUsers&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpError</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>Forbidden<span class="token punctuation">,</span> <span class="token string">&quot;You must be authenticated to use remote control.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre></div><p>Directly within Razor views:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span>@AppSettings.<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;background&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/img/bg.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>As well as outside ServiceStack, via the <code>HostContext</code> static class:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> redisHost <span class="token operator">=</span> HostContext<span class="token punctuation">.</span>AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="appsettings-are-now-writable" tabindex="-1">AppSettings are now writable <a class="header-anchor" href="#appsettings-are-now-writable" aria-hidden="true">#</a></h3><p>A new <code>Set()</code> API was added to <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Configuration/IAppSettings.cs" target="_blank" rel="noopener noreferrer">IAppSettings</a> letting you save any serializable property that works for all providers:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAppSettings</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

AppSettings<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Poco&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfig</span> <span class="token punctuation">{</span> Foo <span class="token operator">=</span> <span class="token string">&quot;Baz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In providers that support writable configuration natively like <code>OrmLiteAppSettings</code> and <code>DictionarySettings</code>, the settings get written through to the underlying provider. For read-only providers like Web.config&#39;s <code>AppSettings</code> or <code>TextFileSettings</code> a <strong>shadowed</strong> cache is kept that works similar to prototypal shadowing in JavaScript where if a property doesn&#39;t exist, setting a property will be stored on the top-level object instance which also takes precedence on subsequent property access.</p><h2 id="metadata-pages" tabindex="-1"><a href="/metadata-page.html">Metadata Pages</a> <a class="header-anchor" href="#metadata-pages" aria-hidden="true">#</a></h2><p>The metadata pages have been expanded to include some of <a href="/swagger-api.html#swagger-attributes">Swagger API Attribute annotations</a> which now shows the parameters for the Request and Response DTO&#39;s as well as any other DTO&#39;s used in each metadata operation page:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/release-notes/metadata-swagger-api.png" alt="Metadata Type Info"></p><p>When annotated the Description also shows any <strong>allowable Enum values</strong> or <strong>range limits</strong> when provided.</p><h4 id="htmlformat" tabindex="-1">HtmlFormat <a class="header-anchor" href="#htmlformat" aria-hidden="true">#</a></h4><p>The humanize feature in <a href="/html5reportformat.html">Auto HtmlFormat</a> for splitting JoinedCase words with spaces can be disabled for all pages with:</p><div class="language-csharp"><pre><code>HtmlFormat<span class="token punctuation">.</span>Humanize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre></div><p>Or on adhoc pages by adding <code>#dehumanize</code> hash param.</p><h2 id="authentication" tabindex="-1"><a href="/authentication-and-authorization.html">Authentication</a> <a class="header-anchor" href="#authentication" aria-hidden="true">#</a></h2><h3 id="web-sudo" tabindex="-1">Web Sudo <a class="header-anchor" href="#web-sudo" aria-hidden="true">#</a></h3><p>A common UX in some websites is to add an extra layer of protection for <strong>super protected</strong> functionality by getting users to re-confirm their password verifying it&#39;s still them using the website, common in places like confirming a financial transaction.</p><p><strong>WebSudo</strong> (by <a href="https://github.com/tvjames" target="_blank" rel="noopener noreferrer">@tvjames</a>) is a new feature similar in spirit requiring users to re-authenticate when accessing Services annotated with the <code>[WebSudoRequired]</code> attribute. To make use of WebSudo, first register the plugin:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebSudoFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can then apply WebSudo behavior to existing services by annotating them with <code>[WebSudoRequired]</code>:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">WebSudoRequired</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequiresWebSudoService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">RequiresWebSudo</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> request<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Once enabled this will throw a <strong>402 Web Sudo Required</strong> HTTP Error the first time the service is called:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> requiresWebSudo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequiresWebSudo</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Send</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RequiresWebSudoResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>requiresWebSudo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//throws</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WebServiceException</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//re-authenticate</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>requiresWebSudo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//success!</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Re-authenticating afterwards will allow access to the WebSudo service.</p><h3 id="auth-events" tabindex="-1">Auth Events <a class="header-anchor" href="#auth-events" aria-hidden="true">#</a></h3><p>In order to enable functionality like <strong>WebSudo</strong> we&#39;ve added additional hooks into the Authentication process with <code>IAuthEvents</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthEvents</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnRegistered</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> httpReq<span class="token punctuation">,</span> <span class="token class-name">IAuthSession</span> session<span class="token punctuation">,</span> <span class="token class-name">IServiceBase</span> registrationService<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnAuthenticated</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> httpReq<span class="token punctuation">,</span> <span class="token class-name">IAuthSession</span> session<span class="token punctuation">,</span> <span class="token class-name">IServiceBase</span> authService<span class="token punctuation">,</span> 
        <span class="token class-name">IAuthTokens</span> tokens<span class="token punctuation">,</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> authInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnLogout</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> httpReq<span class="token punctuation">,</span> <span class="token class-name">IAuthSession</span> session<span class="token punctuation">,</span> <span class="token class-name">IServiceBase</span> authService<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCreated</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> httpReq<span class="token punctuation">,</span> <span class="token class-name">IAuthSession</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>These are the same authentication hooks that were previously only available when creating a <strong>Custom UserSession</strong> by inheriting <a href="/sessions.html#session-events">AuthUserSession</a>. The new AuthEvents API provide a loose-typed way where plugins can tap into the same hooks by registering it with <code>AuthFeature.AuthEvents</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSudoFeature</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span><span class="token punctuation">,</span> <span class="token class-name">IAuthEvents</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token class-name">IAppHost</span> appHost<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
        <span class="token class-name"><span class="token keyword">var</span></span> authFeature <span class="token operator">=</span> appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        authFeature<span class="token punctuation">.</span>AuthEvents<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Add implementations on \`IAuthEvents\` handlers</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCreated</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> httpReq<span class="token punctuation">,</span> <span class="token class-name">IAuthSession</span> session<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div><p>An alternative way for accessing <code>IAuthEvents</code> is to register it like a normal dependency, e.g:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LogAuthEvents<span class="token punctuation">,</span>IAuthEvents<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>To simplify custom implementations you can inherit from the empty concrete <a href="https://github.com/ServiceStack/ServiceStack/blob/7eb3a34a2e545a54c2591665328c16c5d398d37a/src/ServiceStack/Auth/AuthEvents.cs#L18-L25" target="_blank" rel="noopener noreferrer">AuthEvents</a> and choose to only implement the callbacks you&#39;re interested in, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAuthEvents</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthEvents</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ILog</span> Log <span class="token operator">=</span> LogManager<span class="token punctuation">.</span><span class="token function">GetLogger</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LogAuthEvents</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnLogout</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> httpReq<span class="token punctuation">,</span> <span class="token class-name">IAuthSession</span> session<span class="token punctuation">,</span> <span class="token class-name">IServiceBase</span> authService<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Log<span class="token punctuation">.</span><span class="token function">DebugFormat</span><span class="token punctuation">(</span><span class="token string">&quot;User #{0} {1} has logged out&quot;</span><span class="token punctuation">,</span> session<span class="token punctuation">.</span>UserAuthId<span class="token punctuation">,</span> session<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="ormlite" tabindex="-1">OrmLite <a class="header-anchor" href="#ormlite" aria-hidden="true">#</a></h2><ul><li>Added new <code>db.ColumnLazy</code> API for lazily fetching a column of data</li><li>Added <code>db.TableExists&lt;T&gt;</code> for a typed API to detect whether a table exists</li><li>Added <code>INamingStrategy.GetSequenceName()</code> to <a href="http://stackoverflow.com/a/25611452/85785" target="_blank" rel="noopener noreferrer">override how sequence names in Oracle are generated</a></li><li>Upgraded PostgreSql Provider to <strong>Npgsql 2.2.0</strong> and Sqlite to <strong>Sqlite.Core 1.0.93.0</strong></li></ul><h2 id="text" tabindex="-1">Text <a class="header-anchor" href="#text" aria-hidden="true">#</a></h2><ul><li>Added <code>JsConfig.ParsePrimitiveIntegerTypes</code> and <code>JsConfig.ParsePrimitiveFloatingPointTypes</code> to <a href="https://github.com/ServiceStack/ServiceStack.Text/pull/428" target="_blank" rel="noopener noreferrer">change preferences on what primitive numeric types should be converted to</a>.</li><li>Added <code>JsConfig.IgnoreAttributesNamed</code> to <a href="https://github.com/ServiceStack/ServiceStack.Text/commit/3b9972fbd61ce000f9af72d74d79b30eb0d2f45b" target="_blank" rel="noopener noreferrer">change what attributes are used to ignore properties</a></li><li>Added <a href="https://github.com/ServiceStack/ServiceStack.Text/commit/d41d7fb879d68e5a4ccb529e3cc6ed7d3ce937a2" target="_blank" rel="noopener noreferrer">string.CountOccurancesOf() extension method</a></li><li>Added <a href="https://github.com/ServiceStack/ServiceStack.Text/commit/b07cf033d7b4735b0249850769b119be0c857b9d" target="_blank" rel="noopener noreferrer">Image MimeTypes</a></li></ul><h2 id="community" tabindex="-1">Community <a class="header-anchor" href="#community" aria-hidden="true">#</a></h2><h2 id="servicestack-miniprofiler-toolkit" tabindex="-1"><a href="https://bitbucket.org/migajek/miniprofilingtoolkit" target="_blank" rel="noopener noreferrer">ServiceStack MiniProfiler Toolkit</a> <a class="header-anchor" href="#servicestack-miniprofiler-toolkit" aria-hidden="true">#</a></h2><p>From the wider ServiceStack Community, <a href="https://plus.google.com/u/0/+Micha%C5%82Gajek/auto" target="_blank" rel="noopener noreferrer">Micha\u0142 Gajek</a> has developed an alternative analyzer of ServiceStack&#39;s MiniProfiler results in a comprehensive UI that allows deep introspection of your running Services. From the Project&#39;s description:</p><h3 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-hidden="true">#</a></h3><p>This project intends to provide tools for collecting &amp; analyzing profiling results of ServiceStack-based apps. Not only this makes profiling possible in the scenario when no built-in web-frontend is available (like Single Page Applications), but also has several advantages over it:</p><ul><li>collects &amp; persists the results</li><li>allows the &quot;background&quot; profiling (example: production environment)</li><li>it&#39;s better to analyze large amounts of collected profiling results, not just focusing on single execution timings</li><li>helps finding time-consuming queries</li></ul><h3 id="screenshots" tabindex="-1">Screenshots <a class="header-anchor" href="#screenshots" aria-hidden="true">#</a></h3><p><img src="http://i.imgur.com/Ybpx4xg.png" alt=""></p><p><img src="http://i.imgur.com/BA4Mc68.png" alt=""></p><p><img src="http://i.imgur.com/US4Gk6s.png" alt=""></p><p><img src="http://i.imgur.com/bILdbQc.png" alt=""></p><h3 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-hidden="true">#</a></h3><div class="language-"><pre><code>PM&gt; Install-Package Migajek.MiniProfiling.ServiceStack.RemoteStorage
</code></pre></div><h3 id="register-the-plugin" tabindex="-1">Register the Plugin: <a class="header-anchor" href="#register-the-plugin" aria-hidden="true">#</a></h3><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Migajek<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>ServiceStackProfiler<span class="token punctuation">.</span>MiniProfilingToolkit</span><span class="token punctuation">(</span><span class="token string">&quot;http://url/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ProjectName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>__VP_STATIC_END__`,175),o=[p];function c(i,l,r,u,k,d){return a(),s("div",null,o)}var v=n(t,[["render",c]]);export{h as __pageData,v as default};
