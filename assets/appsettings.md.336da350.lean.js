import{_ as n,c as s,o as a,a as t}from"./app.14440598.js";const m='{"title":"Configuration & AppSettings","description":"","frontmatter":{"slug":"appsettings","title":"Configuration & AppSettings"},"headers":[{"level":3,"title":"Example Usage","slug":"example-usage"},{"level":2,"title":"Multi AppSettings","slug":"multi-appsettings"},{"level":3,"title":"Example Usage","slug":"example-usage-1"},{"level":3,"title":"Multi AppSettings Builder","slug":"multi-appsettings-builder"},{"level":2,"title":"OrmLite AppSettings","slug":"ormlite-appsettings"},{"level":3,"title":"Usage","slug":"usage"},{"level":2,"title":"EnvironmentVariableSettings","slug":"environmentvariablesettings"},{"level":2,"title":"TextFileSettings","slug":"textfilesettings"},{"level":3,"title":"Example Usage","slug":"example-usage-2"},{"level":3,"title":"TextFile Format","slug":"textfile-format"},{"level":3,"title":"Extract key / value settings from text file","slug":"extract-key-value-settings-from-text-file"},{"level":2,"title":"DictionarySettings","slug":"dictionarysettings"},{"level":3,"title":"SimpleAppSettings","slug":"simpleappsettings"},{"level":2,"title":"DynamoDbAppSettings","slug":"dynamodbappsettings"},{"level":2,"title":"First class AppSettings","slug":"first-class-appsettings"},{"level":2,"title":"AppSettings are Writable","slug":"appsettings-are-writable"},{"level":2,"title":"ServiceStack.Configuration.Consul","slug":"servicestack-configuration-consul"}],"relativePath":"appsettings.md","lastUpdated":1634495307610}',e={},p=t(`__VP_STATIC_START__<p>Instead of building verbose nested XML configSection classes our preference is to instead store structured configuration in Web.config&#39;s <code>&lt;appSetting/&gt;</code> which can still express rich config graphs but in a much more human-friendly and manageable way.</p><p>ServiceStack&#39;s pluggable <code>IAppSettings</code> API is a cleaner alternative for storing your Application structured configuration, providing a high-level API to read your Web.config&#39;s <code>&lt;appSetting/&gt;</code> values into a <code>List</code>, <code>Dictionary</code> or your own clean Custom POCO Types using the human friendly <a href="/jsv-format.html">JSV format</a>.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAppSettings</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAllKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Exists</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetList</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetDictionary</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name">T</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Benefits over existing Configuration API include the ability to store rich data structures in appSettings values, more succinct access to typed data and since its an interface it&#39;s decoupled from .NET Configuration classes and can easily be swapped to source your configuration from an different sources without a rewrite, e.g. from a text file or central DB.</p><h3 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-hidden="true">#</a></h3><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LastUpdated<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>01/01/2012 12:00:00<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>AllowedUsers<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Tom,Mick,Harry<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>RedisConfig<span class="token punctuation">&quot;</span></span> 
         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{Host:localhost,Port:6379,Database:1,Timeout:10000}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Reading the above configuration in code:</p><div class="language-csharp"><pre><code><span class="token class-name">IAppSettings</span> appSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DateTime</span> lastUpdate <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;LastUpdated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> allowedUsers <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">GetList</span><span class="token punctuation">(</span><span class="token string">&quot;AllowedUsers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RedisConfig</span> redisConf <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RedisConfig<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;RedisConf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//use default value if no config exists</span>
<span class="token class-name"><span class="token keyword">var</span></span> searchUrl <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;SearchUrl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://www.google.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><p>The last default value provides a convenient way to maintain workable default options in code (allowing re-use in Unit/Integration tests) whilst still being overridable in the <strong>Web.config</strong> when you need to.</p><h2 id="multi-appsettings" tabindex="-1">Multi AppSettings <a class="header-anchor" href="#multi-appsettings" aria-hidden="true">#</a></h2><p>The <code>MultiAppSettings</code> AppSettings provider enables reading configuration from multiple configuration sources.</p><h3 id="example-usage-1" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage-1" aria-hidden="true">#</a></h3><p>The example below creates a cascading configuration that first checks Environment variables, then looks in a local <code>~/appsettings.txt</code> plain-text file before falling back to <code>Web.config</code>:</p><div class="language-csharp"><pre><code>AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiAppSettings</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnvironmentVariableSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFileSettings</span><span class="token punctuation">(</span><span class="token string">&quot;~/appsettings.txt&quot;</span><span class="token punctuation">.</span><span class="token function">MapHostAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="multi-appsettings-builder" tabindex="-1">Multi AppSettings Builder <a class="header-anchor" href="#multi-appsettings-builder" aria-hidden="true">#</a></h3><p>An alternative is to use <code>MultiAppSettingsBuilder</code> if you prefer to use a fluent discoverable API:</p><div class="language-csharp"><pre><code>AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiAppSettingsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddAppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddDictionarySettings</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;override&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;setting&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddEnvironmentalVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddTextFile</span><span class="token punctuation">(</span><span class="token string">&quot;~/path/to/settings.txt&quot;</span><span class="token punctuation">.</span><span class="token function">MapProjectPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="ormlite-appsettings" tabindex="-1">OrmLite AppSettings <a class="header-anchor" href="#ormlite-appsettings" aria-hidden="true">#</a></h2><p><code>OrmLiteAppSettings</code> provides an alternative read/write API that lets you maintain your applications configuration in any <a href="https://github.com/ServiceStack/ServiceStack.OrmLite/#download" target="_blank" rel="noopener noreferrer">RDBMS back-end OrmLite supports</a>. It works like a mini Key/Value database in which can store any serializable value against any key which is maintained into the simple Id/Value <code>ConfigSettings</code> table.</p><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><p>Registration just uses an OrmLite DB Factory, e.g:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteAppSettings</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Create the ConfigSettings table if it doesn&#39;t exist</span>
container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrmLiteAppSettings<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><p>It then can be accessed like any <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Common.Tests/Configuration/AppSettingsTests.cs" target="_blank" rel="noopener noreferrer">AppSetting APIs</a>. The example below reads the <code>MyConfig</code> POCO stored at <code>config</code> otherwise use default value if it doesn&#39;t exist:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfig</span> <span class="token punctuation">{</span> Key <span class="token operator">=</span> <span class="token string">&quot;DefaultValue&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In addition to the AppSettings read-only API&#39;s, it also supports writing config values , e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> latestStats <span class="token operator">=</span> appSettings<span class="token punctuation">.</span><span class="token function">GetOrCreate</span><span class="token punctuation">(</span><span class="token string">&quot;stats&quot;</span><span class="token punctuation">,</span> 
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> statsProvider<span class="token punctuation">.</span><span class="token function">GetLatest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="environmentvariablesettings" tabindex="-1">EnvironmentVariableSettings <a class="header-anchor" href="#environmentvariablesettings" aria-hidden="true">#</a></h2><p>The new <code>EnvironmentVariableSettings</code> AppSettings provider to source configuration from Environment variables:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> appSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnvironmentVariableSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="textfilesettings" tabindex="-1">TextFileSettings <a class="header-anchor" href="#textfilesettings" aria-hidden="true">#</a></h2><p>The <code>TextFileSettings</code> lets you read your Applications configuration in a plain-text file, which can easily be overridden with custom environment settings as part of the CI deployment process, providing a nice alternative to custom Web.config configurations.</p><h3 id="example-usage-2" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage-2" aria-hidden="true">#</a></h3><p>To use just provide the path to the plain-text file that contains the app-settings:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> appSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFileSettings</span><span class="token punctuation">(</span><span class="token string">&quot;~/app.settings&quot;</span><span class="token punctuation">.</span><span class="token function">MapHostAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="textfile-format" tabindex="-1">TextFile Format <a class="header-anchor" href="#textfile-format" aria-hidden="true">#</a></h3><p>Each appSetting is on a new line with the <strong>Key</strong> and <strong>Value</strong> separated by a space:</p><div class="language-"><pre><code>{Key} {Value}\\n
</code></pre></div><blockquote><p>The delimiter can be changed in the constructor e.g. <code>new TextFileSettings(path,delimiter:&quot;: &quot;);</code></p></blockquote><h3 id="extract-key-value-settings-from-text-file" tabindex="-1">Extract key / value settings from text file <a class="header-anchor" href="#extract-key-value-settings-from-text-file" aria-hidden="true">#</a></h3><p>Under the hood TextFileSettings uses the ParseKeyValueText extension method to extract key / value data from a string, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> configText <span class="token operator">=</span> <span class="token string">@&quot;
# comments starting with &#39;#&#39; and blank lines are ignored

StringKey string value
IntKey 42
ListKey A,B,C,D,E
DictionaryKey A:1,B:2,C:3,D:4,E:5
PocoKey {Foo:Bar,Key:Value}&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> configMap <span class="token operator">=</span> 
    configText<span class="token punctuation">.</span><span class="token function">ParseKeyValueText</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">delimiter</span><span class="token punctuation">:</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="dictionarysettings" tabindex="-1">DictionarySettings <a class="header-anchor" href="#dictionarysettings" aria-hidden="true">#</a></h2><p>When combined with the existing <code>DictionarySettings</code>, enables a rich, simple and clean alternative to .NET&#39;s App.config config section for reading structured configuration into clean data structures, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name">IAppSettings</span> settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DictionarySettings</span><span class="token punctuation">(</span>configMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;StringKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;IntKey&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">defaultValue</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">GetList</span><span class="token punctuation">(</span><span class="token string">&quot;ListKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> valuesMap <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">GetDictionary</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MyConfig</span> config <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfig</span> <span class="token punctuation">{</span> Key <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="simpleappsettings" tabindex="-1">SimpleAppSettings <a class="header-anchor" href="#simpleappsettings" aria-hidden="true">#</a></h3><p><code>SimpleAppSettings</code> is an alternative Dictionary-based provider that only requires a dependency to <code>ServiceStack.Common</code>, e.g:</p><div class="language-csharp"><pre><code>AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SimpleAppSettings</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;EnableFeature.1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;AllowedUsers&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tom,Mick,Harry&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> enableFeature1 <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;EnableFeature.1&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">defaultValue</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> enableFeature2 <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;EnableFeature.2&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">defaultValue</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> allowedUsers <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetList</span><span class="token punctuation">(</span><span class="token string">&quot;AllowedUsers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="dynamodbappsettings" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack/blob/master/docs/2015/release-notes.md#dynamodbappsettings" target="_blank" rel="noopener noreferrer">DynamoDbAppSettings</a> <a class="header-anchor" href="#dynamodbappsettings" aria-hidden="true">#</a></h2><p>Storing production config in DynamoDB reduces the effort for maintaining production settings decoupled from source code. Here <code>DynamoDbAppSettings</code> is registered first in a <code>MultiAppSettings</code> collection it checks entries in the DynamoDB <code>ConfigSetting</code> Table first before falling back to local <strong>Web.config</strong> appSettings:</p><div class="language-csharp"><pre><code><span class="token preprocessor property">#<span class="token directive keyword">if</span> !DEBUG</span>
    AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiAppSettings</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamoDbAppSettings</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoDynamo</span><span class="token punctuation">(</span>awsDb<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">initSchema</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fallback to Web.confg</span>
<span class="token preprocessor property">#<span class="token directive keyword">endif</span></span>
</code></pre></div><h2 id="first-class-appsettings" tabindex="-1">First class AppSettings <a class="header-anchor" href="#first-class-appsettings" aria-hidden="true">#</a></h2><p>After proving its value over the years we&#39;ve decided to make it a first-class property on <code>IAppHost.AppSettings</code> which defaults to looking at .NET&#39;s App/Web.config&#39;s.</p><p>The new <a href="https://github.com/ServiceStack/ServiceStack.Gap/raw/master/deploy/Chat.zip" target="_blank" rel="noopener noreferrer">Chat.zip</a> App explores different ways AppSettings can be used:</p><p>If there&#39;s an existing <code>appsettings.txt</code> file where the <strong>.exe</strong> is run it will use that, otherwise it falls back to <strong>Web.config</strong> appSettings:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;Chat&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token type-expression class-name">ServerEventsServices</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> customSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token string">&quot;appsettings.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    AppSettings <span class="token operator">=</span> customSettings<span class="token punctuation">.</span>Exists
        <span class="token punctuation">?</span> <span class="token punctuation">(</span>IAppSettings<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFileSettings</span><span class="token punctuation">(</span>customSettings<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>As a normal property in your AppHost, AppSettings can be accessed directly in <code>AppHost.Configure()</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token class-name"><span class="token keyword">var</span></span> redisHost <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;RedisHost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>redisHost <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServerEvents<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisServerEvents</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PooledRedisClientManager</span><span class="token punctuation">(</span>redisHost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServerEvents<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Inside your services or IOC dependencies, like any other auto-wired dependency:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerEventsServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IAppSettings</span> AppSettings <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">PostRawToChannel</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>IsAuthenticated <span class="token operator">&amp;&amp;</span> AppSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;LimitRemoteControlToAuthenticatedUsers&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpError</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>Forbidden<span class="token punctuation">,</span> <span class="token string">&quot;You must be authenticated to use remote control.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre></div><p>Directly within Razor views:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span>@AppSettings.<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;background&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/img/bg.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>As well as outside ServiceStack, via the <code>HostContext</code> static class:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> redisHost <span class="token operator">=</span> HostContext<span class="token punctuation">.</span>AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="appsettings-are-writable" tabindex="-1">AppSettings are Writable <a class="header-anchor" href="#appsettings-are-writable" aria-hidden="true">#</a></h2><p>A new <code>Set()</code> API was added to <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Configuration/IAppSettings.cs" target="_blank" rel="noopener noreferrer">IAppSettings</a> letting you save any serializable property that works for all providers:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAppSettings</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

AppSettings<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Poco&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfig</span> <span class="token punctuation">{</span> Foo <span class="token operator">=</span> <span class="token string">&quot;Baz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In providers that support writable configuration natively like <code>OrmLiteAppSettings</code> and <code>DictionarySettings</code>, the settings get written through to the underlying provider. For read-only providers like Web.config&#39;s <code>AppSettings</code> or <code>TextFileSettings</code> a <strong>shadowed</strong> cache is kept that works similar to prototypal shadowing in JavaScript where if a property doesn&#39;t exist, setting a property will be stored on the top-level object instance which also takes precedence on subsequent property access.</p><h1 id="iconfiguration" tabindex="-1">IConfiguration <a class="header-anchor" href="#iconfiguration" aria-hidden="true">#</a></h1><p>To create AppSettings from IConfiguration object</p><div class="language-csharp"><pre><code>AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetCoreAppSettings</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h1 id="community-appsettings" tabindex="-1">Community AppSettings <a class="header-anchor" href="#community-appsettings" aria-hidden="true">#</a></h1><h2 id="servicestack-configuration-consul" tabindex="-1"><a href="https://github.com/MacLeanElectrical/servicestack-configuration-consul" target="_blank" rel="noopener noreferrer">ServiceStack.Configuration.Consul</a> <a class="header-anchor" href="#servicestack-configuration-consul" aria-hidden="true">#</a></h2><p>An implementation of IAppSettings that uses <a href="http://Consul.io" target="_blank" rel="noopener noreferrer">Consul.io</a> key/value store as backing storage</p>__VP_STATIC_END__`,73),o=[p];function c(i,l,u,r,k,d){return a(),s("div",null,o)}var h=n(e,[["render",c]]);export{m as __pageData,h as default};
