import{_ as e,c as t,o as r,a}from"./app.14440598.js";const b='{"title":"v4.0.06 Release Notes","description":"","frontmatter":{"title":"v4.0.06 Release Notes","slug":"v4-0-06"},"headers":[{"level":2,"title":"Portable Class Library Clients!","slug":"portable-class-library-clients"},{"level":3,"title":"Improved SOAP Support","slug":"improved-soap-support"}],"relativePath":"releases/v4.0.06.md","lastUpdated":1634495308430}',o={},s=a('<h2 id="portable-class-library-clients" tabindex="-1">Portable Class Library Clients! <a class="header-anchor" href="#portable-class-library-clients" aria-hidden="true">#</a></h2><p>The biggest feature of this release is the release of the new Portable Client NuGet packages:</p><p><a href="https://github.com/ServiceStackApps/HelloMobile" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/release-notes/hello-pcl.png" alt="Portable Class Library Support"></a></p><ul><li>ServiceStack.Interfaces.Pcl <ul><li>PCL Profiles: iOS, Android, Windows8, .NET 4.5, Silverlight5, WP8</li></ul></li><li>ServiceStack.Client.Pcl <ul><li>PCL Profiles: iOS, Android, Windows8, .NET 4.5</li><li>Custom builds: Silverlight 5</li></ul></li><li>ServiceStack.Text.Pcl <ul><li>PCL Profiles: iOS, Android, Windows8, .NET 4.5</li><li>Custom builds: Silverlight 5</li></ul></li></ul><p>This now allows sharing binaries between the above platforms. To illustrate this a new <a href="https://github.com/ServiceStackApps/HelloMobile" target="_blank" rel="noopener noreferrer">Hello Repository</a> was created to show how to use the same portable class libraries and DTO&#39;s across the different client platforms above.</p><h4 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a></h4><p>Adding PCL support to the client libraries involved a lot of internal re-factoring which caused a few external user-facing changes:</p><ul><li>The <code>IDbConnectionFactory</code> and <code>IHasDbConnection</code> interfaces referencing System.Data was moved to ServiceStack.Common</li><li>Properties exposing the concrete <code>NameValueCollection</code> are now behind an <code>INameValueCollection</code> interface</li><li>Dynamic classes like <code>DynamicJson</code> have been moved under the <code>ServiceStack</code> namespace</li></ul><h3 id="improved-soap-support" tabindex="-1">Improved SOAP Support <a class="header-anchor" href="#improved-soap-support" aria-hidden="true">#</a></h3><p>For maximum compatibility with different SOAP clients, SOAP Exceptions are now treated as &quot;Soft HTTP Errors&quot; where exceptions are automatically converted to a <strong>200 OK</strong> but returns the original Status Code in the <code>X-Status</code> HTTP Response header or <code>X-Status</code> SOAP Header.</p><p>Errors can be detected by looking at the X-Status headers or by checking the <strong>ResponseStatus.ErrorCode</strong> property on the Response DTO. This is transparently handled in ServiceStack&#39;s built-in SoapClients which automatically converts Response Errors into populated C# WebServiceExceptions, retaining the same behavior of ServiceStack&#39;s other typed clients, as seen in <a href="https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/AlwaysThrowsService.cs#L162" target="_blank" rel="noopener noreferrer">WebServicesTests</a>.</p><p>IHttpRequest.OperationName now reports the Request DTO name for SOAP requests as well, which it gets from the SOAPAction HTTP Header in SOAP 1.1 requests or the <strong>Action</strong> SOAP Header for SOAP 1.2 Requests.</p>',12),i=[s];function l(n,c,p,d,h,u){return r(),t("div",null,i)}var g=e(o,[["render",l]]);export{b as __pageData,g as default};
