import{_ as n,c as s,o as a,a as t}from"./app.14440598.js";const y='{"title":"Reflection Utils","description":"","frontmatter":{"title":"Reflection Utils","slug":"reflection-utils"},"headers":[{"level":2,"title":"Dynamically adding Attributes","slug":"dynamically-adding-attributes"},{"level":3,"title":"Convert into different Types","slug":"convert-into-different-types"},{"level":3,"title":"Call any method dynamically","slug":"call-any-method-dynamically"},{"level":3,"title":"Call any constructor dynamically","slug":"call-any-constructor-dynamically"},{"level":3,"title":"Converting Instances from an Object Dictionary","slug":"converting-instances-from-an-object-dictionary"},{"level":3,"title":"Dynamically Populate Instances","slug":"dynamically-populate-instances"},{"level":2,"title":"Fast Reflection APIs","slug":"fast-reflection-apis"}],"relativePath":"reflection-utils.md","lastUpdated":1634495308426}',e={},p=t(`<p>Most of ServiceStack&#39;s libraries relies on the high-performance reusable utilities in ServiceStack.Text to power many of its features.</p><h2 id="dynamically-adding-attributes" tabindex="-1">Dynamically adding Attributes <a class="header-anchor" href="#dynamically-adding-attributes" aria-hidden="true">#</a></h2><p>Many of ServiceStack features are lit up by decorating Request DTOs or Service Implementations with Attributes, In ServiceStack these attributes can also be dynamically added using the <code>.AddAttributes()</code> Extension method which enables an auto dynamic Fluent API for programmatically enabling behavior without needing to learn an alternative API for each feature, e.g. We can use this to add Custom Routes, <a href="/auth-restricting-services.html">Restrict Services</a> and add <a href="/filter-attributes.html">Filter Attributes</a> dynamically with:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostBase</span></span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyRequest</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddAttributes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RouteAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;/myrequest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddAttributes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RouteAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;/myrequest/{UniqueId}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddAttributes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RestrictAttribute</span><span class="token punctuation">(</span>RequestAttributes<span class="token punctuation">.</span>Json<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddAttributes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyRequestFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyPoco</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddAttributes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataContractAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>MyPoco<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddAttributes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataMemberAttribute</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Surname&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Most Configuration in ServiceStack should be maintained in <code>Configure()</code> but as Services are auto-registered before <code>AppHost.Configure()</code> is called, Route attributes need to be added before this happens like in the AppHost Constructor or before <code>new AppHost().Init()</code></p></div><h3 id="convert-into-different-types" tabindex="-1">Convert into different Types <a class="header-anchor" href="#convert-into-different-types" aria-hidden="true">#</a></h3><p>Underlying <a href="/auto-mapping.html">ServiceStack&#39;s AutoMapping support</a> is the <code>object.ConvertTo&lt;T&gt;</code> extension method which is able to convert any Type into a different Type, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">double</span></span> two <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConvertTo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It&#39;s a highly versatile feature were its able to co-erce into different types as expected, e.g. strings into Value and serialized complex Reference Types, between different number types, between different C# collections, etc.</p><h3 id="call-any-method-dynamically" tabindex="-1">Call any method dynamically <a class="header-anchor" href="#call-any-method-dynamically" aria-hidden="true">#</a></h3><p>One of the features in <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">#Script</a> is being able to call any .NET method dynamically with unknown types at runtime which it does using the <code>MethodInfo.GetInvoker()</code> extension method which returns a cached compiled delegate that&#39;s able to genericize access to any .NET method by transforming <code>MethodInfo</code> into the <code>MethodInvoker</code> delegate signature below:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">MethodInvoker</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> instance<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>As an example lets call the simple method below dynamically:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">TransformDouble</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Target <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">TransformDouble</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> target<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Target <span class="token operator">=</span> target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Target <span class="token operator">+</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>First use Reflection to resolve the <code>Add</code> method then call the <code>GetInvoker()</code> extension method to resolve a cached <code>MethodInvoker</code> delegate:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> method <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TransformDouble</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Add&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">add</span> <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">GetInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Now we&#39;re able to to call the <code>add</code> method on any <code>TransformDouble</code> instance, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">object</span></span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TransformDouble</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token comment">//= 3.0</span>
</code></pre></div><p>If the argument types the method signature it calls the method directly, otherwise it calls <code>ConvertTo&lt;T&gt;</code> above to transform the parameter into the method argument type. So we can call the same <code>add</code> invoker with an <code>int</code> or a <code>string</code> argument and it will return the same value despite the method only being defined to accept a <code>double</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token function">invoker</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">//= 3.0</span>
<span class="token function">invoker</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span> <span class="token comment">//= 3.0</span>
</code></pre></div><h3 id="call-any-constructor-dynamically" tabindex="-1">Call any constructor dynamically <a class="header-anchor" href="#call-any-constructor-dynamically" aria-hidden="true">#</a></h3><p>In a similar way of how we can genericize any method we can also genericize any Constructor in the same way using the <code>ConstructorInfo.GetActivator()</code> extension method which returns a cached compiled delegate for any object constructor, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> ctor <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TransformDouble</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> activator <span class="token operator">=</span> ctor<span class="token punctuation">.</span><span class="token function">GetActivator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Likewise we can use the <code>activator</code> to create new instances of <code>TransformDouble</code> with different runtime types, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">(</span><span class="token punctuation">(</span>TransformDouble<span class="token punctuation">)</span><span class="token function">acivator</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Target <span class="token comment">//= 1.0</span>

<span class="token punctuation">(</span><span class="token punctuation">(</span>TransformDouble<span class="token punctuation">)</span><span class="token function">acivator</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Target   <span class="token comment">//= 1.0</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span>TransformDouble<span class="token punctuation">)</span><span class="token function">acivator</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Target <span class="token comment">//= 1.0</span>
</code></pre></div><h3 id="converting-instances-from-an-object-dictionary" tabindex="-1">Converting Instances from an Object Dictionary <a class="header-anchor" href="#converting-instances-from-an-object-dictionary" aria-hidden="true">#</a></h3><p>The <code>ToObjectDictionary</code> and <code>FromObjectDictionary</code> extension methods lets you convert instances into a loosely-typed Object Dictionary where it can be dynamically accessed and manipulated before being used to create and populate an instance of any type, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> map <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">MergeIntoObjectDictionary</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> Initial <span class="token operator">=</span> <span class="token string">&quot;Z&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">[</span><span class="token string">&quot;DisplayName&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string">&quot;FirstName&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> map<span class="token punctuation">[</span><span class="token string">&quot;Initial&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> map<span class="token punctuation">[</span><span class="token string">&quot;LastName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> employee <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromObjectDictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Employee<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

employee<span class="token punctuation">.</span>DisplayName <span class="token comment">//= John Z Doe</span>
</code></pre></div><p>Or use it to populate a late-bound type:</p><div class="language-csharp"><pre><code><span class="token class-name">Type</span> managerType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Manager</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> manager <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">FromObjectDictionary</span><span class="token punctuation">(</span>managerType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="dynamically-populate-instances" tabindex="-1">Dynamically Populate Instances <a class="header-anchor" href="#dynamically-populate-instances" aria-hidden="true">#</a></h3><p>Being able to treat Types as Object Dictionaries allows us to easily apply generic behavior to POCOs that would be otherwise be tedious like we could create a generic method to ensure that all string properties are trimmed with:</p><div class="language-csharp"><pre><code><span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">TrimStrings</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> instance<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> updateStrings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    instance<span class="token punctuation">.</span><span class="token function">ToObjectDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">string</span></span> strValue <span class="token operator">&amp;&amp;</span> strValue<span class="token punctuation">?.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> trimmed <span class="token operator">=</span> strValue<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>strValue <span class="token operator">!=</span> trimmed<span class="token punctuation">)</span> <span class="token comment">// Only include types that need updating</span>
                updateStrings<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> trimmed<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    updateStrings<span class="token punctuation">.</span><span class="token function">PopulateInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token function">TrimStrings</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot; John &quot;</span><span class="token punctuation">,</span> Initial <span class="token operator">=</span> <span class="token string">&quot;Z&quot;</span><span class="token punctuation">,</span> LastName <span class="token operator">=</span> <span class="token string">&quot; Doe &quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>All Reflection APIs make use of the Fast Reflection APIs below so in addition to convenience they also offer great performance.</p><h2 id="fast-reflection-apis" tabindex="-1">Fast Reflection APIs <a class="header-anchor" href="#fast-reflection-apis" aria-hidden="true">#</a></h2><p>The Reflection functionality is consolidated behind a formal API which includes multiple cascading implementations so it&#39;s able to use the fastest implementation available in <a href="https://github.com/ServiceStackApps/HelloMobile#portable-class-library-support" target="_blank" rel="noopener noreferrer">each supported platform</a>, i.e. for most .NET platforms we use the Reflection.Emit implementations when possible, when not available it falls back to using Compiled Expression trees, then finally falling back to using a Reflection-based implementation.</p><p>This functionality is available using the <code>CreateGetter()</code> and <code>CreateSetter()</code> extension methods on both <code>PropertyInfo</code> or <code>FieldInfo</code> which you may find useful if you&#39;d like to get better performance when populating runtime types dynamically.</p><p>The API examples below showcases the different APIs available:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> runtimeType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">object</span></span> instance <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PropertyInfo</span> pi <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idSetter <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token function">CreateSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idGetter <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token function">CreateGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token function">idSetter</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idValue <span class="token operator">=</span> <span class="token function">idGetter</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>To squeeze out a bit more performance you can create a generic delegate to avoid some boxing/casting with:</p><div class="language-csharp"><pre><code><span class="token class-name">MyType</span> instance <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idSetter <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateSetter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idGetter <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateGetter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>All APIs also have field equivalents:</p><div class="language-csharp"><pre><code><span class="token class-name">FieldInfo</span> fi <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idSetter <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">CreateSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idGetter <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">CreateGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>Create*</code> APIs above creates the compiled delegates which need to be cached to avoid the compilation penalty on subsequent usages. The <code>TypeProperties&lt;T&gt;</code> and <code>TypeFields&lt;T&gt;</code> classes offers fast cached access to these setters/getters which compiles all the <strong>public</strong> properties or fields on a per Type basis.</p><p>Some examples of using these classes:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> runtimeType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> instance <span class="token operator">=</span> runtimeType<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> typeProps <span class="token operator">=</span> TypeProperties<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>runtimeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Equivalent to:</span>
<span class="token comment">//  typeProps = TypeProperties&lt;MyType&gt;.Instance;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> idAccessor <span class="token operator">=</span> typeProps<span class="token punctuation">.</span><span class="token function">GetAccessor</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
propAccessor<span class="token punctuation">.</span><span class="token function">PublicSetter</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idValue <span class="token operator">=</span> propAccessor<span class="token punctuation">.</span><span class="token function">PublicGetter</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Alternatively you can access property getters / setters individually:</p><div class="language-csharp"><pre><code>typeProps<span class="token punctuation">.</span><span class="token function">GetPublicSetter</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> idValue <span class="token operator">=</span> typeProps<span class="token punctuation">.</span><span class="token function">GetPublicGetter</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Whilst <code>TypeFields&lt;T&gt;</code> does the same for a Types <strong>public fields</strong> which is also able to work around the copy semantics of ValueTypes (typically lost when boxing) by utilizing the <code>ref</code> APIs below where we can use this to populate C# 7&#39;s new Value Tuples with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> typeFields <span class="token operator">=</span> TypeFields<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token punctuation">(</span><span class="token keyword">string</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> oTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> item1Accessor <span class="token operator">=</span> typeFields<span class="token punctuation">.</span><span class="token function">GetAccessor</span><span class="token punctuation">(</span><span class="token string">&quot;Item1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> item2Accessor <span class="token operator">=</span> typeFields<span class="token punctuation">.</span><span class="token function">GetAccessor</span><span class="token punctuation">(</span><span class="token string">&quot;Item2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
item1Accessor<span class="token punctuation">.</span><span class="token function">PublicSetterRef</span><span class="token punctuation">(</span><span class="token keyword">ref</span> oTuple<span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item2Accessor<span class="token punctuation">.</span><span class="token function">PublicSetterRef</span><span class="token punctuation">(</span><span class="token keyword">ref</span> oTuple<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name"><span class="token keyword">var</span></span> tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>oTuple<span class="token punctuation">;</span>
tuple<span class="token punctuation">.</span>s <span class="token comment">//= bar</span>
tuple<span class="token punctuation">.</span>i <span class="token comment">//= 2</span>
</code></pre></div>`,50),o=[p];function c(l,u,i,r,k,d){return a(),s("div",null,o)}var h=n(e,[["render",c]]);export{y as __pageData,h as default};
