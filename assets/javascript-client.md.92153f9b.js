import{_ as n,c as s,o as e,a}from"./app.14440598.js";const g='{"title":"JavaScript Client","description":"","frontmatter":{"slug":"javascript-client","title":"JavaScript Client"},"headers":[{"level":3,"title":"Using JavaScript Typed DTOs in Web Apps","slug":"using-javascript-typed-dtos-in-web-apps"},{"level":3,"title":"Rich intelli-sense support","slug":"rich-intelli-sense-support"},{"level":3,"title":"CDN Resources","slug":"cdn-resources"},{"level":3,"title":"Using TypeScript JsonServiceClient in npm projects","slug":"using-typescript-jsonserviceclient-in-npm-projects"},{"level":3,"title":"jQuery JsonServiceClient","slug":"jquery-jsonserviceclient"},{"level":3,"title":"Using jQuery Ajax APIs:","slug":"using-jquery-ajax-apis"},{"level":2,"title":"JSV Service Client","slug":"jsv-service-client"}],"relativePath":"javascript-client.md","lastUpdated":1634495308422}',t={},o=a(`<p>Whilst you can use any of the multitude of Ajax libraries to consume ServiceStack&#39;s pure JSON REST APIs, leveraging the <a href="/typescript-add-servicestack-reference.html">integrated TypeScript</a> support still offers the best development UX for calling ServiceStack&#39;s JSON APIs in JavaScript where you can use the TypeScript <code>JsonServiceClient</code> with <a href="/typescript-add-servicestack-reference.html#typescript-serviceclient">TypeScript Add ServiceStack Reference</a> DTO&#39;s to get the same productive end-to-end Typed APIs available in ServiceStack&#39;s Typed .NET Clients, e.g:</p><div class="language-ts"><pre><code><span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Name<span class="token operator">:</span> <span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="using-javascript-typed-dtos-in-web-apps" tabindex="-1">Using JavaScript Typed DTOs in Web Apps <a class="header-anchor" href="#using-javascript-typed-dtos-in-web-apps" aria-hidden="true">#</a></h3><p>To get started quickly you can use the <code>init</code> <a href="/mix-tool.html">mix gist</a> to create an empty .NET 5 project:</p><pre><code>$ mkdir ProjectName &amp;&amp; cd ProjectName
$ x mix init
</code></pre><p>That uses the built-in <code>@servicestack/client</code> library&#39;s <code>JsonServiceClient</code> in a dependency-free Web Page:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/mix/init.png" alt=""></p><p>With a single command you can update your App&#39;s TypeScript DTOs, compile them to JavaScript &amp; move them to <code>/wwwroot</code>:</p><pre><code>$ npm run dtos
</code></pre><p>To use them in your Web Page create a basic UMD loader and include the UMD <code>@servicestack/client</code> library &amp; <code>dtos.js</code>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span> __esModule<span class="token operator">:</span><span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> module <span class="token operator">=</span> <span class="token punctuation">{</span> exports<span class="token operator">:</span>exports <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> exports<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> window<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/servicestack-client.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/dtos.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>We can then import the library and DTO types in the global namespace to use them directly:</p><div class="language-js"><pre><code>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> exports<span class="token punctuation">)</span> <span class="token comment">//import</span>

<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="rich-intelli-sense-support" tabindex="-1">Rich intelli-sense support <a class="header-anchor" href="#rich-intelli-sense-support" aria-hidden="true">#</a></h3><p>Even pure HTML/JS Apps that don&#39;t use TypeScript or any external dependencies will still benefit from the Server generated <code>dtos.ts</code> and <code>servicestack-client.d.ts</code> definitions as Smart IDEs like <a href="https://www.jetbrains.com/rider/" target="_blank" rel="noopener noreferrer">Rider</a> can make use of them to provide a rich productive development UX on both the built-in <code>/js/servicestack-client.js</code> library:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/mix/init-rider-ts-client.png" alt=""></p><p>As well as your App&#39;s server generated DTOs:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/mix/init-rider-ts-dto.png" alt=""></p><p>Including their typed partial constructors:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/mix/init-rider-ts-dto-props.png" alt=""></p><p>So even simple Apps without complex bundling solutions or external dependencies can still benefit from a rich typed authoring experience without any additional build time or tooling complexity.</p><h3 id="cdn-resources" tabindex="-1">CDN Resources <a class="header-anchor" href="#cdn-resources" aria-hidden="true">#</a></h3><p>An CDN alternative to using the <code>@servicestack/client</code> built into <code>ServiceStack.dll</code> is to reference it from <a href="http://unpkg.com" target="_blank" rel="noopener noreferrer">unpkg.com</a>:</p><ul><li><a href="https://unpkg.com/@servicestack/client" target="_blank" rel="noopener noreferrer">https://unpkg.com/@servicestack/client</a></li></ul><p>If needed for IDE intelli-sense, the TypeScript definition for the <code>@servicestack/client</code> is available from:</p><ul><li><a href="https://unpkg.com/@servicestack/client/dist/index.d.ts" target="_blank" rel="noopener noreferrer">https://unpkg.com/@servicestack/client/dist/index.d.ts</a></li></ul><p>The npm-free <a href="/templates-lite.html">Vue and React lite Templates</a> are some examples that makes use of the stand-alone <code>@servicestack/client</code> libraries.</p><h3 id="using-typescript-jsonserviceclient-in-npm-projects" tabindex="-1">Using TypeScript JsonServiceClient in npm projects <a class="header-anchor" href="#using-typescript-jsonserviceclient-in-npm-projects" aria-hidden="true">#</a></h3><p>The <a href="https://www.npmjs.com/package/@servicestack/client" target="_blank" rel="noopener noreferrer">/@servicestack/client</a> follows the recommended guidance for TypeScript modules which doesn&#39;t bundle any TypeScript <code>.ts</code> source files, just the generated <a href="https://unpkg.com/@servicestack/client" target="_blank" rel="noopener noreferrer">index.js</a> and <a href="https://unpkg.com/@servicestack/client@1.0.31/dist/index.d.ts" target="_blank" rel="noopener noreferrer">index.d.ts</a> Type definitions which can be imported the same way in both JavaScript and TypeScript npm projects as any other module, e.g:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> JsonServiceClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/client&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>Which can then be used with the generated DTOs from your API at <a href="https://techstacks.io/types/typescript" target="_blank" rel="noopener noreferrer">/types/typescript</a> that can either be downloaded and saved to a local file e.g. <code>dtos.ts</code> or preferably downloaded using the <a href="/dotnet-tool.html">x dotnet tool</a> to download the DTOs of a remote ServiceStack API with:</p><pre><code>$ npm install -g @servicestack/cli


$ dotnet tool install --global x 
$ x typescript http://yourdomain.org
</code></pre><p>For JavaScript projects that haven&#39;t configured transpilation of TypeScript, you&#39;ll need to use TypeScript to generate the <code>dtos.js</code> JavaScript version which can be used instead:</p><pre><code>$ tsc dtos.ts 
</code></pre><p>Use the <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener noreferrer">--module compiler flag</a> if needing to generate a specific module version, e.g:</p><pre><code>$ tsc -m ES6 dtos.ts
</code></pre><p>The generated <code>dtos.js</code> can then be used with the <code>JsonServiceClient</code> to provide a succinct Typed API:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GetConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dtos&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GetConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="updating-dtos" tabindex="-1">Updating DTOs <a class="header-anchor" href="#updating-dtos" aria-hidden="true">#</a></h4><p>To update your generated DTOs when your server API changes, run <code>x typescript</code> or its shorter <code>x ts</code> alias without any arguments:</p><pre><code>$ x ts
</code></pre><p>Which will update to the latest version of <code>dtos.ts</code>. This can be easily automated with an [npm script][5], e.g:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dtos&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cd path/to/dtos &amp;&amp; x ts &amp;&amp; tsc -m ES6 dtos.ts&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which will let you update and compile the dtos with:</p><pre><code>$ npm run dtos
</code></pre><p>The [TechStacks][6] (Vue/Nuxt) and [React Native Mobile App][7] (React) are examples of JavaScript-only projects using the TypeScript <code>JsonServiceClient</code> in this way.</p><h3 id="jquery-jsonserviceclient" tabindex="-1">jQuery JsonServiceClient <a class="header-anchor" href="#jquery-jsonserviceclient" aria-hidden="true">#</a></h3><p>We also provide our older jQuery JsonServiceClient which mimics the <a href="/clients-overview.html">.NET Clients</a> in functionality that we make use of in our <a href="http://www.servicestack.net/RedisAdminUI/AjaxClient/" target="_blank" rel="noopener noreferrer">Redis Admin UI</a> and suitable for use when needing to support older browsers without W3C&#39;s fetch or a polyfill:</p><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/v5.4/lib/js/JsonServiceClient.js" target="_blank" rel="noopener noreferrer">JsonServiceClient.js</a> - Pure JavaScript client</li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/v5.4/lib/js/JsonServiceClient.closure.js" target="_blank" rel="noopener noreferrer">JsonServiceClient.closure.js</a> - a <a href="https://developers.google.com/closure/" target="_blank" rel="noopener noreferrer">Google Closure</a> enabled version of the client allowing compilation and bundling within a Closure project</li></ul><p>Although most dynamic languages like JavaScript already include support for HTTP and JSON where in most cases it&#39;s easier to just use the libraries already provided. Here are a couple of examples from <a href="http://todos.netcore.io" target="_blank" rel="noopener noreferrer">Backbones Todos</a> and <a href="http://redisstackoverflow.netcore.io" target="_blank" rel="noopener noreferrer">Redis StackOverflow</a> that uses jQuery to talk to back-end ServiceStack JSON services:</p><h3 id="using-jquery-ajax-apis" tabindex="-1">Using jQuery Ajax APIs: <a class="header-anchor" href="#using-jquery-ajax-apis" aria-hidden="true">#</a></h3><div class="language-javascript"><pre><code>$<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost/Backbone.Todo/todos&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">todos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>todos<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;questions&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  UserId<span class="token operator">:</span> authUser<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Title<span class="token operator">:</span> title<span class="token punctuation">,</span> Content<span class="token operator">:</span> body<span class="token punctuation">,</span> Tags<span class="token operator">:</span> dtoTags 
<span class="token punctuation">}</span><span class="token punctuation">,</span> refresh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="jsv-service-client" tabindex="-1">JSV Service Client <a class="header-anchor" href="#jsv-service-client" aria-hidden="true">#</a></h2><p>In our pursuit to provide the fastest end-to-end communication we&#39;ve also developed a JsvServiceClient in JavaScript that uses the <a href="https://github.com/ServiceStackV3/mythz_blog/blob/master/pages/176.md" target="_blank" rel="noopener noreferrer">fast JSV Format</a>:</p><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/v5.4.1/lib/js/JSV.js" target="_blank" rel="noopener noreferrer">JsvServiceClient.js</a></li></ul><p>JSV is marginally faster than <strong>safe JSON</strong> in modern browsers (marginally slower than Eval) but because of the poor JS and String Performance in IE7/8 it performs over <strong>20x</strong> slower than IE&#39;s native <code>eval()</code>.</p>`,56),p=[o];function c(r,i,l,u,d,k){return e(),s("div",null,p)}var m=n(t,[["render",c]]);export{g as __pageData,m as default};
