import{_ as s,c as a,o as e,a as n,b as t}from"./app.14440598.js";const f=`{"title":"TypeScript Add ServiceStack Reference","description":"","frontmatter":{"slug":"typescript-add-servicestack-reference","title":"TypeScript Add ServiceStack Reference"},"headers":[{"level":3,"title":"React Native JsonServiceClient","slug":"react-native-jsonserviceclient"},{"level":3,"title":"First class development experience","slug":"first-class-development-experience"},{"level":3,"title":"Ideal Typed Message-based API","slug":"ideal-typed-message-based-api"},{"level":3,"title":"Supports JavaScript only Environments","slug":"supports-javascript-only-environments"},{"level":2,"title":"TypeScript ServiceClient","slug":"typescript-serviceclient"},{"level":3,"title":"@servicestack/client","slug":"servicestack-client"},{"level":3,"title":"TypeScript Ambient Interface Definitions or Concrete Types","slug":"typescript-ambient-interface-definitions-or-concrete-types"},{"level":2,"title":"Simple command-line utilities for TypeScript","slug":"simple-command-line-utilities-for-typescript"},{"level":3,"title":"Installation","slug":"installation"},{"level":3,"title":"Adding a ServiceStack Reference","slug":"adding-a-servicestack-reference"},{"level":3,"title":"Updating a ServiceStack Reference","slug":"updating-a-servicestack-reference"},{"level":3,"title":"Updating all TypeScript DTOs","slug":"updating-all-typescript-dtos"},{"level":3,"title":"npm tools","slug":"npm-tools"},{"level":2,"title":"Add TypeScript Reference","slug":"add-typescript-reference"},{"level":3,"title":"Change Default Server Configuration","slug":"change-default-server-configuration"},{"level":3,"title":"Customize DTO Type generation","slug":"customize-dto-type-generation"},{"level":3,"title":"Emit custom code","slug":"emit-custom-code"},{"level":3,"title":"Update ServiceStack Reference","slug":"update-servicestack-reference"},{"level":3,"title":"TypeScript Reference Example","slug":"typescript-reference-example"},{"level":3,"title":"Making Typed API Requests","slug":"making-typed-api-requests"},{"level":3,"title":"Partial Constructors","slug":"partial-constructors"},{"level":3,"title":"Sending additional arguments with Typed API Requests","slug":"sending-additional-arguments-with-typed-api-requests"},{"level":3,"title":"Making API Requests with URLs","slug":"making-api-requests-with-urls"},{"level":3,"title":"Raw Data Responses","slug":"raw-data-responses"},{"level":3,"title":"TypeScript Nullable properties","slug":"typescript-nullable-properties"},{"level":3,"title":"Authenticating using Basic Auth","slug":"authenticating-using-basic-auth"},{"level":3,"title":"Authenticating using Credentials","slug":"authenticating-using-credentials"},{"level":3,"title":"Authenticating using JWT","slug":"authenticating-using-jwt"},{"level":3,"title":"Authenticating using an API Key","slug":"authenticating-using-an-api-key"},{"level":3,"title":"Transparently handle 401 Unauthorized Responses","slug":"transparently-handle-401-unauthorized-responses"},{"level":3,"title":"Automatically refresh Access Tokens","slug":"automatically-refresh-access-tokens"},{"level":2,"title":"DTO Customization Options","slug":"dto-customization-options"},{"level":3,"title":"Change Default Server Configuration","slug":"change-default-server-configuration-1"},{"level":3,"title":"GlobalNamespace","slug":"globalnamespace"},{"level":3,"title":"ExportAsTypes","slug":"exportastypes"},{"level":3,"title":"MakePropertiesOptional","slug":"makepropertiesoptional"},{"level":3,"title":"AddResponseStatus","slug":"addresponsestatus"},{"level":3,"title":"AddImplicitVersion","slug":"addimplicitversion"},{"level":3,"title":"IncludeTypes","slug":"includetypes"},{"level":3,"title":"ExcludeTypes","slug":"excludetypes"},{"level":3,"title":"DefaultImports","slug":"defaultimports"},{"level":2,"title":"TypeScript Interface Definitions","slug":"typescript-interface-definitions"},{"level":3,"title":"Referencing TypeScript DTO's","slug":"referencing-typescript-dto-s"},{"level":3,"title":"Angular HTTP Client","slug":"angular-http-client"},{"level":3,"title":"ss-utils.js","slug":"ss-utils-js"},{"level":3,"title":"ServerEvents Client","slug":"serverevents-client"},{"level":2,"title":"ServiceStackIDEA plugin","slug":"servicestackidea-plugin"},{"level":3,"title":"TypeScript Support","slug":"typescript-support"}],"relativePath":"typescript-add-servicestack-reference.md","lastUpdated":1634495308454}`,p={},o=n('',4),c=t("iframe",{width:"896",height:"525",src:"https://www.youtube.com/embed/T3KTDPdovOw",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""},null,-1),i=n(`__VP_STATIC_START__<h3 id="first-class-development-experience" tabindex="-1">First class development experience <a class="header-anchor" href="#first-class-development-experience" aria-hidden="true">#</a></h3><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer">TypeScript</a> has become a core part of our overall recommended solution for Web Apps that&#39;s integrated into all ServiceStackVS&#39;s <a href="https://github.com/ServiceStack/ServiceStackVS" target="_blank" rel="noopener noreferrer">React and Aurelia Single Page App VS.NET Templates</a> offering a seamless development experience with access to advanced ES6 features like modules, classes and arrow functions whilst still being able to target most web browsers with its down-level ES5 support. TypeScript also goes beyond ES6 with optional Type Annotations enabling better tooling support and compiler type feedback than what&#39;s possible in vanilla ES6 - invaluable when scaling large JavaScript codebases.</p><h3 id="ideal-typed-message-based-api" tabindex="-1">Ideal Typed Message-based API <a class="header-anchor" href="#ideal-typed-message-based-api" aria-hidden="true">#</a></h3><p>The TypeScript <code>JsonServiceClient</code> available in the <a href="https://www.npmjs.com/package/@servicestack/client" target="_blank" rel="noopener noreferrer">@servicestack/client npm package</a> enables the same productive, typed API development experience available in our other 1st-class supported client platforms.</p><p>ServiceStack embeds additional type hints in each Request DTO in order to achieve the ideal typed, message-based API. You can see an example of this is below which shows how to create a C# Gist in <a href="http://gistlyn.com" target="_blank" rel="noopener noreferrer">Gislyn</a> after adding a ServiceStack Reference to <code>gistlyn.com</code> and installing the <a href="https://www.npmjs.com/package/@servicestack/client" target="_blank" rel="noopener noreferrer">@servicestack/client</a> npm package:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> JsonServiceClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;servicestack-client&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StoreGist<span class="token punctuation">,</span> GithubFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Gistlyn.dtos&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&quot;http://gistlyn.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StoreGist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GithubFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span>filename <span class="token operator">=</span> <span class="token string">&quot;main.cs&quot;</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&#39;var greeting = &quot;Hi, from TypeScript!&quot;;&#39;</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span>files <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">]</span><span class="token operator">:</span> file <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// r:StoreGistResponse</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">New C# Gist was created with id: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>r<span class="token punctuation">.</span>gist<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://gistlyn.com?gist=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>r<span class="token punctuation">.</span>gist<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create Gist: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>responseStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where the <code>r</code> param in the returned <code>then()</code> Promise callback is typed to <code>StoreGistResponse</code> DTO Type.</p><h3 id="supports-javascript-only-environments" tabindex="-1">Supports JavaScript only Environments <a class="header-anchor" href="#supports-javascript-only-environments" aria-hidden="true">#</a></h3><p>Despite generating Typed TypeScript DTOs, the generic <code>JsonServiceClient</code> and generated TypeScript DTOs can also be utilized in JavaScript-Only development environments like <a href="https://youtu.be/T3KTDPdovOw" target="_blank" rel="noopener noreferrer">React Native</a> or in the <a href="/templates-nuxt.html">Nuxt Templates</a> which doesn&#39;t use TypeScript in its build, but can be easily integrated by adding an npm script to using the <a href="/dotnet-tool.html">dotnet tools</a> to generate the DTOs and the global <code>typescript</code> npm tool to compile it into the module we want, which in React Native projects would look like:</p><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dtos&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cd src/shared &amp;&amp; x typescript &amp;&amp; tsc -m ES6 dtos.ts&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="umd-servicestack-client" tabindex="-1">UMD @servicestack/client <a class="header-anchor" href="#umd-servicestack-client" aria-hidden="true">#</a></h4><p>npm-free JavaScript Web Apps can use the <a href="/servicestack-client-umd.html">built-in UMD @servicestack/client</a> in <strong>ServiceStack.dll</strong> to call ServiceStack Services without any external dependencies.</p><h2 id="typescript-serviceclient" tabindex="-1">TypeScript ServiceClient <a class="header-anchor" href="#typescript-serviceclient" aria-hidden="true">#</a></h2><p>The <code>@servicestack/client</code> is a clean &quot;jQuery-free&quot; implementation based on JavaScript&#39;s new <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener noreferrer">Fetch API standard</a>, utilizing the <a href="https://www.npmjs.com/package/isomorphic-fetch" target="_blank" rel="noopener noreferrer">isomorphic-fetch</a> implementation so it can be used in both JavaScript client web apps as well as node.js server projects.</p><h3 id="servicestack-client" tabindex="-1"><a href="https://www.npmjs.com/package/@servicestack/client" target="_blank" rel="noopener noreferrer">@servicestack/client</a> <a class="header-anchor" href="#servicestack-client" aria-hidden="true">#</a></h3><p>The easiest way to use TypeScript with ServiceStack is to start with one of <a href="https://github.com/ServiceStack/ServiceStackVS" target="_blank" rel="noopener noreferrer">ServiceStackVS TypeScript projects</a>.</p><p>Other TypeScript or ES6 projects can install <code>@servicestack/client</code> from npm with:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> @servicestack/client
</code></pre></div><p>See <a href="/javascript-client.html">JavaScript Client</a> for how to use <code>JsonServiceClient</code> in non-npm or non TypeScript projects.</p><h4 id="enabling-typescript-async-await" tabindex="-1">Enabling TypeScript async/await <a class="header-anchor" href="#enabling-typescript-async-await" aria-hidden="true">#</a></h4><p>To make API requests using TypeScript&#39;s async/await feature you&#39;ll need to create a TypeScript <code>tsconfig.json</code> config file that imports ES6 promises and W3C fetch definitions with:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dom&quot;</span> <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="typescript-ambient-interface-definitions-or-concrete-types" tabindex="-1">TypeScript Ambient Interface Definitions or Concrete Types <a class="header-anchor" href="#typescript-ambient-interface-definitions-or-concrete-types" aria-hidden="true">#</a></h3><p>You can get both concrete types and interface definitions for your Services at the following routes:</p><ul><li><a href="https://techstacks.io/types/typescript" target="_blank" rel="noopener noreferrer">/types/typescript</a> - for generating concrete types</li><li><a href="https://techstacks.io/types/typescript.d" target="_blank" rel="noopener noreferrer">/types/typescript.d</a> - for generating ambient interface definitions</li></ul><h2 id="simple-command-line-utilities-for-typescript" tabindex="-1">Simple command-line utilities for TypeScript <a class="header-anchor" href="#simple-command-line-utilities-for-typescript" aria-hidden="true">#</a></h2><p>The <a href="/dotnet-tool.html">dotnet tools</a> include built in support for generating TypeScript references from the command-line:</p><h3 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h3><div class="language-bash"><pre><code>$ dotnet tool <span class="token function">install</span> --global x 
</code></pre></div><h3 id="adding-a-servicestack-reference" tabindex="-1">Adding a ServiceStack Reference <a class="header-anchor" href="#adding-a-servicestack-reference" aria-hidden="true">#</a></h3><p>To Add a TypeScript ServiceStack Reference just call <code>x typescript</code> with the URL of a remote ServiceStack instance:</p><div class="language-bash"><pre><code>$ x typescript https://techstacks.io
</code></pre></div><p>Result:</p><div class="language-"><pre><code>Saved to: dtos.ts
</code></pre></div><p>Calling <code>x typescript</code> with just a URL will save the DTOs using the Host name, you can override this by specifying a FileName as the 2nd argument:</p><div class="language-bash"><pre><code>$ x typescript https://techstacks.io Tech
</code></pre></div><p>Result:</p><div class="language-"><pre><code>Saved to: Tech.dtos.ts
</code></pre></div><h3 id="updating-a-servicestack-reference" tabindex="-1">Updating a ServiceStack Reference <a class="header-anchor" href="#updating-a-servicestack-reference" aria-hidden="true">#</a></h3><p>To Update an existing ServiceStack Reference, call <code>x typescript</code> with the Filename:</p><div class="language-bash"><pre><code>$ x typescript dtos.ts
</code></pre></div><p>Result:</p><div class="language-"><pre><code>Updated: dtos.ts
</code></pre></div><p>Which will update the File with the latest TypeScript Server DTOs from <a href="https://techstacks.io" target="_blank" rel="noopener noreferrer">techstacks.io</a>. You can also customize how DTOs are generated by uncommenting the <a href="https://docs.servicestack.net/typescript-add-servicestack-reference#dto-customization-options" target="_blank" rel="noopener noreferrer">TypeScript DTO Customization Options</a> and updating them again.</p><h3 id="updating-all-typescript-dtos" tabindex="-1">Updating all TypeScript DTOs <a class="header-anchor" href="#updating-all-typescript-dtos" aria-hidden="true">#</a></h3><p>Calling <code>x typescript</code> without any arguments will update all TypeScript DTOs in the current directory:</p><div class="language-bash"><pre><code>$ x typescript
</code></pre></div><p>Result:</p><div class="language-"><pre><code>Updated: Tech.dtos.ts
Updated: dtos.ts
</code></pre></div><h3 id="npm-tools" tabindex="-1">npm tools <a class="header-anchor" href="#npm-tools" aria-hidden="true">#</a></h3><p>The <code>x</code> dotnet tools require .NET Core installed, a pure npm-based alternative is to install the <a href="https://github.com/ServiceStack/servicestack-cli" target="_blank" rel="noopener noreferrer">@servicestack/cli</a> npm package containing the <code>typescript-ref</code> (or wrist-friendly <code>ts-ref</code> alias) commands which can be used instead of <code>x typescript</code>.</p><h2 id="add-typescript-reference" tabindex="-1">Add TypeScript Reference <a class="header-anchor" href="#add-typescript-reference" aria-hidden="true">#</a></h2><p>The easiest way to <a href="/add-servicestack-reference.html">Add a ServiceStack Reference</a> to your project is to <strong>right-click</strong> on a folder to bring up <a href="/create-your-first-webservice.html">ServiceStackVS&#39;s</a><a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> context-menu item, then click on <code>Add -&gt; TypeScript Reference...</code>. This opens a dialog where you can add the url of the ServiceStack instance you want to typed DTO&#39;s for, as well as the name of the DTO source file that&#39;s added to your project.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/servicestackvs/add-typescript-reference-js.png" alt="Add ServiceStack Reference"></p><p>After clicking OK, the servers DTO&#39;s are added to the project, yielding an instant typed API:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/servicestackvs/add-typescript-reference-dtos.png" alt="TypeScript native types"></p><h3 id="change-default-server-configuration" tabindex="-1">Change Default Server Configuration <a class="header-anchor" href="#change-default-server-configuration" aria-hidden="true">#</a></h3><p>The above defaults are also overridable on the ServiceStack Server by modifying the default config on the <code>NativeTypesFeature</code> Plugin, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> nativeTypes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NativeTypesFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nativeTypes<span class="token punctuation">.</span>MetadataTypesConfig<span class="token punctuation">.</span>MakeVirtual <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre></div><h3 id="customize-dto-type-generation" tabindex="-1">Customize DTO Type generation <a class="header-anchor" href="#customize-dto-type-generation" aria-hidden="true">#</a></h3><p>Additional TypeScript specific customization can be statically configured like <code>PreTypeFilter</code>, <code>InnerTypeFilter</code> &amp; <code>PostTypeFilter</code> (available in all languages) can be used to inject custom code in the generated DTOs output.</p><p>Use the <code>PreTypeFilter</code> to generate source code before and after a Type definition, e.g. this will append the <code>[Validate]</code> attribute on non enum &amp; interface types:</p><div class="language-csharp"><pre><code>TypeScriptGenerator<span class="token punctuation">.</span>PreTypeFilter <span class="token operator">=</span> <span class="token punctuation">(</span>sb<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span>IsEnum<span class="token punctuation">.</span><span class="token function">GetValueOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">.</span>IsInterface<span class="token punctuation">.</span><span class="token function">GetValueOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">&quot;@Validate()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>InnerTypeFilter</code> gets invoked just after the Type Definition which can be used to generate common members for all Types and interfaces, e.g:</p><div class="language-csharp"><pre><code>TypeScriptGenerator<span class="token punctuation">.</span>InnerTypeFilter <span class="token operator">=</span> <span class="token punctuation">(</span>sb<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">&quot;id:string = \`\${Math.random()}\`.substring(2);&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>There&#39;s also <code>PrePropertyFilter</code> &amp; <code>PostPropertyFilter</code> for generating source before and after properties, e.g:</p><div class="language-csharp"><pre><code>TypeScriptGenerator<span class="token punctuation">.</span>PrePropertyFilter <span class="token operator">=</span> <span class="token punctuation">(</span>sb <span class="token punctuation">,</span> prop<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">&quot;@IsInt()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="emit-custom-code" tabindex="-1">Emit custom code <a class="header-anchor" href="#emit-custom-code" aria-hidden="true">#</a></h3><p>To enable greater flexibility when generating complex Typed DTOs, you can use <code>[Emit{Language}]</code> attributes to generate code before each type or property.</p><p>These attributes can be used to generate different attributes or annotations to enable client validation for different validation libraries in different languages, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">EmitTypeScript</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;@Validate()&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">EmitCode</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Lang<span class="token punctuation">.</span>TypeScript <span class="token operator">|</span> Lang<span class="token punctuation">.</span>Swift <span class="token operator">|</span> Lang<span class="token punctuation">.</span>Dart<span class="token punctuation">,</span> <span class="token string">&quot;// App User&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">EmitTypeScript</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;@IsNotEmpty()&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@IsEmail()&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">EmitCode</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Lang<span class="token punctuation">.</span>Swift <span class="token operator">|</span> Lang<span class="token punctuation">.</span>Dart<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token string">&quot;@isNotEmpty()&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@isEmail()&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which will generate <code>[EmitTypeScript]</code> code in TypeScript DTOs:</p><div class="language-typescript"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Validate</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// App User</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">IReturn<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsEmail</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>init<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>Object <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">createResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;User&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Whilst the generic <code>[EmitCode]</code> attribute lets you emit the same code in multiple languages with the same syntax.</p><h3 id="update-servicestack-reference" tabindex="-1">Update ServiceStack Reference <a class="header-anchor" href="#update-servicestack-reference" aria-hidden="true">#</a></h3><p>If your server has been updated and you want to update the client DTOs, simply <strong>right-click</strong> on the DTO file within <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> and select <strong>Update ServiceStack Reference</strong> for <strong>ServiceStackVS</strong> to download a fresh update.</p><h3 id="typescript-reference-example" tabindex="-1">TypeScript Reference Example <a class="header-anchor" href="#typescript-reference-example" aria-hidden="true">#</a></h3><p>Lets walk through a simple example to see how we can use ServiceStack&#39;s TypeScript DTO annotations in our JavaScript clients. Firstly we&#39;ll need to add a TypeScript Reference to the remote ServiceStack Service by <strong>right-clicking</strong> on your project and clicking on <code>Add &gt; TypeScript Reference...</code> (as seen in the above screenshot).</p><p>This will import the remote Services dtos into your local project which looks similar to:</p><div class="language-ts"><pre><code><span class="token comment">/* Options:
Date: 2016-08-11 22:23:24
Version: 4.061
Tip: To override a DTO option, remove &quot;//&quot; prefix before updating
BaseUrl: https://techstacks.io

//GlobalNamespace: 
//MakePropertiesOptional: True
//AddServiceStackTypes: True
//AddResponseStatus: False
//AddImplicitVersion: 
//AddDescriptionAsComments: True
//IncludeTypes: 
//ExcludeTypes: 
//DefaultImports: 
*/</span>

<span class="token comment">// @Route(&quot;/technology/{Slug}&quot;)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GetTechnology</span> <span class="token keyword">implements</span> <span class="token class-name">IReturn<span class="token operator">&lt;</span>GetTechnologyResponse<span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
    Slug<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">createResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GetTechnologyResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;GetTechnology&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GetTechnologyResponse</span>
<span class="token punctuation">{</span>
    Created<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    Technology<span class="token operator">:</span> Technology<span class="token punctuation">;</span>
    TechnologyStacks<span class="token operator">:</span> TechnologyStack<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    ResponseStatus<span class="token operator">:</span> ResponseStatus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In keeping with idiomatic style of local <code>.ts</code> sources, generated types are not wrapped within a module by default. This lets you reference the types you want directly using normal import destructuring syntax:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GetTechnology<span class="token punctuation">,</span> GetTechnologyResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dtos&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>Or import all Types into your preferred variable namespace with:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dtos <span class="token keyword">from</span> <span class="token string">&#39;./dtos&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dtos</span><span class="token punctuation">.</span><span class="token function">GetTechnology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Or if preferred, you can instead have the types declared in a module by specifying a <code>GlobalNamespace</code>:</p><div class="language-ts"><pre><code><span class="token comment">/* Options:
...

GlobalNamespace: dtos
*/</span>
</code></pre></div><p>Looking at the types we&#39;ll notice the DTO&#39;s are plain TypeScript Types with any .NET attributes added in comments using AtScript&#39;s proposed <a href="https://docs.google.com/document/d/11YUzC-1d0V1-Q3V0fQ7KSit97HnZoKVygDxpWzEYW0U/mobilebasic?viewopt=127" target="_blank" rel="noopener noreferrer">meta-data annotations format</a>. This lets you view helpful documentation about your DTO&#39;s like the different custom routes available for each Request DTO.</p><p>By default DTO properties are optional but can be made a required field by annotating the .NET property with the <code>[Required]</code> attribute or by uncommenting <code>MakePropertiesOptional: False</code> in the header comments which instead defaults to using required properties.</p><p>Properties always reflect to match the remote servers JSON Serialization configuration, i.e. will use <strong>camelCase</strong> properties when the <code>AppHost</code> is configured with:</p><div class="language-csharp"><pre><code>JsConfig<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Config</span> <span class="token punctuation">{</span> TextCase <span class="token operator">=</span> TextCase<span class="token punctuation">.</span>CamelCase <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="making-typed-api-requests" tabindex="-1">Making Typed API Requests <a class="header-anchor" href="#making-typed-api-requests" aria-hidden="true">#</a></h3><p>Making API Requests in TypeScript is the same as all other <a href="/clients-overview.html">ServiceStack&#39;s Service Clients</a> by sending a populated Request DTO using a <code>JsonServiceClient</code> which returns typed Response DTO.</p><p>So the only things we need to make any API Request is the <code>JsonServiceClient</code> from the <code>@servicestack/client</code> package and any DTO&#39;s we&#39;re using from generated TypeScript ServiceStack Reference, e.g:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> JsonServiceClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@servicestack/client&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GetTechnology <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dtos&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://techstacks.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetTechnology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span>Slug <span class="token operator">=</span> <span class="token string">&quot;ServiceStack&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// typed to GetTechnologyResponse</span>
cont tech <span class="token operator">=</span> r<span class="token punctuation">.</span>Technology<span class="token punctuation">;</span>           <span class="token comment">// typed to Technology</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tech<span class="token punctuation">.</span>Name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tech<span class="token punctuation">.</span>VendorName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tech<span class="token punctuation">.</span>ProductUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tech<span class="token punctuation">.</span>Name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> TechStacks:</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>TechnologyStacks<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="partial-constructors" tabindex="-1">Partial Constructors <a class="header-anchor" href="#partial-constructors" aria-hidden="true">#</a></h3><p>All TypeScript Reference DTOs also includes support for <strong>Partial Constructors</strong> making them much nicer to populate using object initializer syntax we&#39;re used to in C#, so instead of:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span>provider <span class="token operator">=</span> <span class="token string">&#39;credentials&#39;</span>
request<span class="token punctuation">.</span>userName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">;</span>
request<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">;</span>
request<span class="token punctuation">.</span>rememberMe <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rememberMe<span class="token punctuation">;</span>
<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can populate DTOs with object literal syntax without any loss of TypeScript&#39;s Type Safety benefits:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    provider<span class="token operator">:</span> <span class="token string">&#39;credentials&#39;</span><span class="token punctuation">,</span>
    userName<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>
    rememberMe<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rememberMe<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="sending-additional-arguments-with-typed-api-requests" tabindex="-1">Sending additional arguments with Typed API Requests <a class="header-anchor" href="#sending-additional-arguments-with-typed-api-requests" aria-hidden="true">#</a></h3><p>Many AutoQuery Services utilize <a href="/autoquery-rdbms.html#implicit-conventions">implicit conventions</a> to query fields that aren&#39;t explicitly defined on AutoQuery Request DTOs, these can be queried by specifying additional arguments with the typed Request DTO, e.g:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FindTechStacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> r <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">{</span> VendorName<span class="token operator">:</span> <span class="token string">&quot;ServiceStack&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// typed to QueryResponse&lt;TechnologyStack&gt;</span>
</code></pre></div><h3 id="making-api-requests-with-urls" tabindex="-1">Making API Requests with URLs <a class="header-anchor" href="#making-api-requests-with-urls" aria-hidden="true">#</a></h3><p>In addition to making Typed API Requests you can also call Services using relative or absolute urls, e.g:</p><div class="language-ts"><pre><code>client<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>GetTechnologyResponse<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;/technology/ServiceStack&quot;</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>GetTechnologyResponse<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;https://techstacks.io/technology/ServiceStack&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// https://techstacks.io/technology?Slug=ServiceStack</span>
client<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>GetTechnologyResponse<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;/technology&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> Slug<span class="token operator">:</span> <span class="token string">&quot;ServiceStack&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre></div><p>as well as POST Request DTOs to custom urls:</p><div class="language-ts"><pre><code>client<span class="token punctuation">.</span><span class="token function">postToUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/custom-path&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token punctuation">{</span> Slug<span class="token operator">:</span> <span class="token string">&quot;ServiceStack&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">putToUrl</span><span class="token punctuation">(</span><span class="token string">&quot;http://example.org/custom-path&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="raw-data-responses" tabindex="-1">Raw Data Responses <a class="header-anchor" href="#raw-data-responses" aria-hidden="true">#</a></h3><p>The <code>JsonServiceClient</code> also supports Raw Data responses like <code>string</code> and <code>byte[]</code> which also get a Typed API once declared on Request DTOs using the <code>IReturn&lt;T&gt;</code> marker:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReturnString</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReturnBytes</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>Which can then be accessed as normal, with their Response typed to a JavaScript <code>string</code> or <code>Uint8Array</code> for raw <code>byte[]</code> responses:</p><div class="language-ts"><pre><code><span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReturnString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> data<span class="token operator">:</span>Uint8Array <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReturnBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="typescript-nullable-properties" tabindex="-1">TypeScript Nullable properties <a class="header-anchor" href="#typescript-nullable-properties" aria-hidden="true">#</a></h3><p>The default TypeScript generated for a C# DTO like:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> OptionalValue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Text <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Will render the DTO with optional properties:</p><div class="language-csharp"><pre><code>export <span class="token keyword">class</span> <span class="token class-name">Data</span>
<span class="token punctuation">{</span>
    <span class="token comment">// @Required()</span>
    <span class="token keyword">public</span> <span class="token keyword">value</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>

    <span class="token keyword">public</span> optionalValue<span class="token punctuation">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>
    <span class="token keyword">public</span> text<span class="token punctuation">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>init<span class="token punctuation">?</span><span class="token punctuation">:</span> Partial<span class="token operator">&lt;</span>Data<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>Object <span class="token keyword">as</span> <span class="token class-name">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This behavior can be changed to emit nullable properties instead with:</p><div class="language-csharp"><pre><code>TypeScriptGenerator<span class="token punctuation">.</span>UseNullableProperties <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><p>Where it will instead emit nullable properties:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Data</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> optionalValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>init<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Data<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>Object <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If finer-grained customization is needed to control which type and property should be nullable, you can use the customizable <code>TypeScriptGenerator</code> filters (which <code>UseNullableProperties</code> defaults to):</p><div class="language-csharp"><pre><code>TypeScriptGenerator<span class="token punctuation">.</span>IsPropertyOptional <span class="token operator">=</span> <span class="token punctuation">(</span>generator<span class="token punctuation">,</span> type<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

TypeScriptGenerator<span class="token punctuation">.</span>PropertyTypeFilter <span class="token operator">=</span> <span class="token punctuation">(</span>gen<span class="token punctuation">,</span> type<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
    gen<span class="token punctuation">.</span><span class="token function">GetPropertyType</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> isNullable<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;|null&quot;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="authenticating-using-basic-auth" tabindex="-1">Authenticating using Basic Auth <a class="header-anchor" href="#authenticating-using-basic-auth" aria-hidden="true">#</a></h3><p>Basic Auth support is implemented in <code>JsonServiceClient</code> and follows the same API made available in the C# Service Clients where the <code>userName/password</code> properties can be set individually, e.g:</p><div class="language-ts"><pre><code><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>userName <span class="token operator">=</span> user<span class="token punctuation">;</span>
client<span class="token punctuation">.</span>password <span class="token operator">=</span> pass<span class="token punctuation">;</span>

<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecureRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Or use <code>client.setCredentials()</code> to have them set both together.</p><h3 id="authenticating-using-credentials" tabindex="-1">Authenticating using Credentials <a class="header-anchor" href="#authenticating-using-credentials" aria-hidden="true">#</a></h3><p>Alternatively you can authenticate using userName/password credentials by <a href="https://docs.servicestack.net/typescript-add-servicestack-reference#add-typescript-reference" target="_blank" rel="noopener noreferrer">adding a TypeScript Reference</a> to your remote ServiceStack Instance and sending a populated <code>Authenticate</code> Request DTO, e.g:</p><div class="language-ts"><pre><code><span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span>provider <span class="token operator">=</span> <span class="token string">&quot;credentials&quot;</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>
request<span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
request<span class="token punctuation">.</span>rememberMe <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This will populate the <code>JsonServiceClient</code> with <a href="https://docs.servicestack.net/sessions#cookie-session-ids" target="_blank" rel="noopener noreferrer">Session Cookies</a> which will transparently be sent on subsequent requests to make authenticated requests.</p><h3 id="authenticating-using-jwt" tabindex="-1">Authenticating using JWT <a class="header-anchor" href="#authenticating-using-jwt" aria-hidden="true">#</a></h3><p>Use the <code>bearerToken</code> property to Authenticate with a <a href="https://docs.servicestack.net/jwt-authprovider" target="_blank" rel="noopener noreferrer">ServiceStack JWT Provider</a> using a JWT Token:</p><div class="language-ts"><pre><code>client<span class="token punctuation">.</span>bearerToken <span class="token operator">=</span> jwtToken<span class="token punctuation">;</span>
</code></pre></div><p>Alternatively you can use a <a href="https://docs.servicestack.net/jwt-authprovider#refresh-tokens" target="_blank" rel="noopener noreferrer">Refresh Token</a> instead:</p><div class="language-ts"><pre><code>client<span class="token punctuation">.</span>refreshToken <span class="token operator">=</span> refreshToken<span class="token punctuation">;</span>
</code></pre></div><h3 id="authenticating-using-an-api-key" tabindex="-1">Authenticating using an API Key <a class="header-anchor" href="#authenticating-using-an-api-key" aria-hidden="true">#</a></h3><p>Use the <code>bearerToken</code> property to Authenticate with an <a href="/api-key-authprovider.html">API Key</a>:</p><div class="language-ts"><pre><code>client<span class="token punctuation">.</span>bearerToken <span class="token operator">=</span> apiKey<span class="token punctuation">;</span>
</code></pre></div><h3 id="transparently-handle-401-unauthorized-responses" tabindex="-1">Transparently handle 401 Unauthorized Responses <a class="header-anchor" href="#transparently-handle-401-unauthorized-responses" aria-hidden="true">#</a></h3><p>If the server returns a 401 Unauthorized Response either because the client was Unauthenticated or the configured Bearer Token or API Key used had expired or was invalidated, you can use <code>onAuthenticationRequired</code> callback to re-configure the client before automatically retrying the original request, e.g:</p><div class="language-ts"><pre><code>client<span class="token punctuation">.</span><span class="token function-variable function">onAuthenticationRequired</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> authClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span>authBaseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    authClient<span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>
    authClient<span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> authClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>bearerToken <span class="token operator">=</span> response<span class="token punctuation">.</span>bearerToken<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//Automatically retries requests returning 401 Responses with new bearerToken</span>
<span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Secured</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="automatically-refresh-access-tokens" tabindex="-1">Automatically refresh Access Tokens <a class="header-anchor" href="#automatically-refresh-access-tokens" aria-hidden="true">#</a></h3><p>With the <a href="https://docs.servicestack.net/jwt-authprovider#refresh-tokens" target="_blank" rel="noopener noreferrer">Refresh Token support in JWT</a> you can use the <code>refreshToken</code> property to instruct the Service Client to automatically fetch new JWT Tokens behind the scenes before automatically retrying failed requests due to invalid or expired JWTs, e.g:</p><div class="language-ts"><pre><code><span class="token comment">//Authenticate to get new Refresh Token</span>
<span class="token keyword">const</span> authClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span>authBaseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
authClient<span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>
authClient<span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
<span class="token keyword">const</span> authResponse <span class="token operator">=</span> <span class="token keyword">await</span> authClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Configure client with RefreshToken</span>
client<span class="token punctuation">.</span>refreshToken <span class="token operator">=</span> authResponse<span class="token punctuation">.</span>RefreshToken<span class="token punctuation">;</span>

<span class="token comment">//Call authenticated Services and clients will automatically retrieve new JWT Tokens as needed</span>
<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Secured</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Use the <code>refreshTokenUri</code> property when refresh tokens need to be sent to a different ServiceStack Server, e.g:</p><div class="language-ts"><pre><code>client<span class="token punctuation">.</span>refreshToken <span class="token operator">=</span> refreshToken<span class="token punctuation">;</span>
client<span class="token punctuation">.</span>refreshTokenUri <span class="token operator">=</span> authBaseUrl <span class="token operator">+</span> <span class="token string">&quot;/access-token&quot;</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="dto-customization-options" tabindex="-1">DTO Customization Options <a class="header-anchor" href="#dto-customization-options" aria-hidden="true">#</a></h2><p>In most cases you&#39;ll just use the generated TypeScript DTO&#39;s as-is, however you can further customize how the DTO&#39;s are generated by overriding the default options.</p><p>The header in the generated DTO&#39;s show the different options TypeScript native types support with their defaults. Default values are shown with the comment prefix of <code>//</code>. To override a value, remove the <code>//</code> and specify the value to the right of the <code>:</code>. Any uncommented value will be sent to the server to override any server defaults.</p><p>The DTO comments allows for customizations for how DTOs are generated. The default options that were used to generate the DTO&#39;s are repeated in the header comments of the generated DTOs, options that are preceded by a TypeScript comment <code>//</code> are defaults from the server, any uncommented value will be sent to the server to override any server defaults.</p><div class="language-ts"><pre><code><span class="token comment">/* Options:
Date: 2018-05-01 08:09:43
Version: 5.10
Tip: To override a DTO option, remove &quot;//&quot; prefix before updating
BaseUrl: https://techstacks.io

//GlobalNamespace: 
//MakePropertiesOptional: True
//AddServiceStackTypes: True
//AddResponseStatus: False
//AddImplicitVersion: 
//AddDescriptionAsComments: True
//IncludeTypes: 
//ExcludeTypes: 
//DefaultImports: 
*/</span>
</code></pre></div><p>We&#39;ll go through and cover each of the above options to see how they affect the generated DTO&#39;s:</p><h3 id="change-default-server-configuration-1" tabindex="-1">Change Default Server Configuration <a class="header-anchor" href="#change-default-server-configuration-1" aria-hidden="true">#</a></h3><p>The above defaults are also overridable on the ServiceStack Server by modifying the default config on the <code>NativeTypesFeature</code> Plugin, e.g:</p><div class="language-csharp"><pre><code><span class="token comment">//Server example in CSharp</span>
<span class="token class-name"><span class="token keyword">var</span></span> nativeTypes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NativeTypesFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nativeTypes<span class="token punctuation">.</span>MetadataTypesConfig<span class="token punctuation">.</span>GlobalNamespace <span class="token operator">=</span> <span class="token string">&quot;dtos&quot;</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre></div><p>We&#39;ll go through and cover each of the above options to see how they affect the generated DTO&#39;s:</p><h3 id="globalnamespace" tabindex="-1">GlobalNamespace <a class="header-anchor" href="#globalnamespace" aria-hidden="true">#</a></h3><p>Changes the name of the module that contain the generated TypeScript definitions:</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">module</span> dtos
<span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="exportastypes" tabindex="-1">ExportAsTypes <a class="header-anchor" href="#exportastypes" aria-hidden="true">#</a></h3><p>Changes whether types should be generated as ambient interface definitions or exported as concrete Types:</p><div class="language-ts"><pre><code><span class="token keyword">module</span> dtos
<span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IReturnVoid</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="makepropertiesoptional" tabindex="-1">MakePropertiesOptional <a class="header-anchor" href="#makepropertiesoptional" aria-hidden="true">#</a></h3><p>Changes whether the default of whether each property is optional or not:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Answer</span>
<span class="token punctuation">{</span>
    AnswerId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    Owner<span class="token operator">:</span> User<span class="token punctuation">;</span>
    IsAccepted<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    Score<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    LastActivityDate<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    LastEditDate<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    CreationDate<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    QuestionId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="addresponsestatus" tabindex="-1">AddResponseStatus <a class="header-anchor" href="#addresponsestatus" aria-hidden="true">#</a></h3><p>Automatically add a <code>ResponseStatus</code> property on all Response DTO&#39;s, regardless if it wasn&#39;t already defined:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">GetAnswers</span> <span class="token keyword">extends</span> <span class="token class-name">IReturn<span class="token operator">&lt;</span>GetAnswersResponse<span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token operator">...</span>
    ResponseStatus<span class="token operator">:</span> ResponseStatus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="addimplicitversion" tabindex="-1">AddImplicitVersion <a class="header-anchor" href="#addimplicitversion" aria-hidden="true">#</a></h3><p>Lets you specify the Version number to be automatically populated in all Request DTO&#39;s sent from the client:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">GetAnswers</span> <span class="token keyword">extends</span> <span class="token class-name">IReturn<span class="token operator">&lt;</span>GetAnswersResponse<span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
    Version<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">//1</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This lets you know what Version of the Service Contract that existing clients are using making it easy to implement ServiceStack&#39;s <a href="http://stackoverflow.com/a/12413091/85785" target="_blank" rel="noopener noreferrer">recommended versioning strategy</a>.</p><h3 id="includetypes" tabindex="-1">IncludeTypes <a class="header-anchor" href="#includetypes" aria-hidden="true">#</a></h3><p>Is used as a Whitelist to specify only the types you would like to have code-generated:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: GetTechnology,GetTechnologyResponse
</code></pre></div><p>Will only generate <code>GetTechnology</code> and <code>GetTechnologyResponse</code> DTO&#39;s:</p><div class="language-csharp"><pre><code>export <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">class</span></span> GetTechnology <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
export <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">class</span></span> GetTechnologyResponse <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><h4 id="include-generic-types" tabindex="-1">Include Generic Types <a class="header-anchor" href="#include-generic-types" aria-hidden="true">#</a></h4><p>Use .NET&#39;s Type Name to include Generic Types, i.e. the Type name separated by the backtick followed by the number of generic arguments, e.g:</p><div class="language-"><pre><code>IncludeTypes: IReturn\`1,MyPair\`2
</code></pre></div><h4 id="include-request-dto-and-its-dependent-types" tabindex="-1">Include Request DTO and its dependent types <a class="header-anchor" href="#include-request-dto-and-its-dependent-types" aria-hidden="true">#</a></h4><p>You can include a Request DTO and all its dependent types with a <code>.*</code> suffix on the Request DTO, e.g:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: GetTechnology.*
</code></pre></div><p>Which will include the <code>GetTechnology</code> Request DTO, the <code>GetTechnologyResponse</code> Response DTO and all Types that they both reference.</p><h4 id="include-all-types-within-a-c-namespace" tabindex="-1">Include All Types within a C# namespace <a class="header-anchor" href="#include-all-types-within-a-c-namespace" aria-hidden="true">#</a></h4><p>If your DTOs are grouped into different namespaces they can be all included using the <code>/*</code> suffix, e.g:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: MyApp.ServiceModel.Admin/*
</code></pre></div><p>This will include all DTOs within the <code>MyApp.ServiceModel.Admin</code> C# namespace.</p><h4 id="include-all-services-in-a-tag-group" tabindex="-1">Include All Services in a Tag Group <a class="header-anchor" href="#include-all-services-in-a-tag-group" aria-hidden="true">#</a></h4><p>Services <a href="/api-design.html#group-services-by-tag">grouped by Tag</a> can be used in the <code>IncludeTypes</code> where tags can be specified using braces in the format <code>{tag}</code> or <code>{tag1,tag2,tag3}</code>, e.g:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: {web,mobile}
</code></pre></div><p>Or individually:</p><div class="language-"><pre><code>/* Options:
IncludeTypes: {web},{mobile}
</code></pre></div><h3 id="excludetypes" tabindex="-1">ExcludeTypes <a class="header-anchor" href="#excludetypes" aria-hidden="true">#</a></h3><p>Is used as a Blacklist to specify which types you would like excluded from being generated:</p><div class="language-"><pre><code>/* Options:
ExcludeTypes: GetTechnology,GetTechnologyResponse
</code></pre></div><p>Will exclude <code>GetTechnology</code> and <code>GetTechnologyResponse</code> DTOs from being generated.</p><h3 id="defaultimports" tabindex="-1">DefaultImports <a class="header-anchor" href="#defaultimports" aria-hidden="true">#</a></h3><p>The <code>Symbol:module</code> short-hand syntax can be used for specifying additional imports in your generated TypeScript DTOs, e.g:</p><div class="language-ts"><pre><code><span class="token comment">/* Options:
...
DefaultImports: Symbol:module,Zip:./ZipValidator
*/</span>
</code></pre></div><p>Which will generate the popular import form of:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Symbol <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Zip <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ZipValidator&quot;</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="typescript-interface-definitions" tabindex="-1">TypeScript Interface Definitions <a class="header-anchor" href="#typescript-interface-definitions" aria-hidden="true">#</a></h2><p>By checking <strong>Only TypeScript Definitions</strong> check-box on the dialog when Adding a TypeScript Reference you can instead import Types as a <a href="http://www.typescriptlang.org/Handbook#writing-dts-files" target="_blank" rel="noopener noreferrer">TypeScript declaration file</a> (.d.ts).</p><p>TypeScript declarations are just pure static type annotations, i.e. they don&#39;t generate any code or otherwise have any effect on runtime behavior. This makes them useful as a non-invasive drop-in into existing JavaScript code where it&#39;s just used to provide type annotations on existing JavaScript objects, letting you continue using your existing data types and ajax libraries.</p><h3 id="referencing-typescript-dto-s" tabindex="-1">Referencing TypeScript DTO&#39;s <a class="header-anchor" href="#referencing-typescript-dto-s" aria-hidden="true">#</a></h3><p>Once added to your project, use <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a>&#39;s JavaScript doc comments to reference the TypeScript definitions in your <code>.ts</code> scripts. The example below shows how to use the above TypeScript definitions to create a typed Request/Response utilizing jQuery&#39;s Ajax API to fire off a new Ajax request on every keystroke:</p><div class="language-xml"><pre><code>/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reference</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dtos.d.ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
...

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txtHello<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-keyup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sayHello<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
bindHandlers({
    sayHello: function () {
        var request: dtos.Hello = {};
        request.title = &quot;Dr&quot;;
        request.name = this.value;
        
        $.getJSON(createUrl(&quot;/hello/{Name}&quot;, request), request, 
            function (r: HelloResponse) {
                $(&quot;#result&quot;).html(r.result);
            });
    }
});
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Here we&#39;re using the built-in <code>createUrl()</code> servicestack client API to create the url for the <strong>GET</strong> HTTP Request using the Route definition for the API you want to call and the Request DTO which results in:</p><div class="language-"><pre><code>/hello/World?title=Dr
</code></pre></div><p>We&#39;re also able to use the <code>HelloResponse</code> type definition to take advantage of typed DTO compile time safety in TypeScript code bases.</p><h3 id="angular-http-client" tabindex="-1">Angular HTTP Client <a class="header-anchor" href="#angular-http-client" aria-hidden="true">#</a></h3><p>Likewise you can use <code>createUrl()</code> to utilize Angular&#39;s built-in Rx-enabled HTTP Client with ServiceStack\u2019s ambient TypeScript declarations when utilizing Angular&#39;s built-in dependencies is preferable.</p><p>ServiceStack\u2019s ambient TypeScript interfaces are leveraged to enable a Typed that lets you reuse your APIs Route definitions (emitted in comments above each Request DTO) to provide a pleasant UX for making API calls using Angular&#39;s HTTP Client:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createUrl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@servicestack/client&#39;</span><span class="token punctuation">;</span>
<span class="token operator">...</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>HelloResponse<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">createUrl</span><span class="token punctuation">(</span><span class="token string">&#39;/hello/{Name}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> r<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="ss-utils-js" tabindex="-1">ss-utils.js <a class="header-anchor" href="#ss-utils-js" aria-hidden="true">#</a></h3><p>Likewise if using <a href="/ss-utils-js.html">ss-utils.js</a> you can use the <code>$.ss.createUrl()</code> API for the same functionality, e.g:</p><div class="language-js"><pre><code><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bindHandlers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> request<span class="token operator">:</span> dtos<span class="token punctuation">.</span>Hello <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;Dr&quot;</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        
        $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>ss<span class="token punctuation">.</span><span class="token function">createUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/{Name}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> 
            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token operator">:</span> dtos<span class="token punctuation">.</span>HelloResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which results in a HTTP GET request with the expected Url:</p><div class="language-"><pre><code>/hello/World?title=Dr
</code></pre></div><h3 id="serverevents-client" tabindex="-1"><a href="/typescript-server-events-client.html">ServerEvents Client</a> <a class="header-anchor" href="#serverevents-client" aria-hidden="true">#</a></h3><p>The <a href="/typescript-server-events-client.html">TypeScript ServerEventClient</a> is an idiomatic port of ServiceStack&#39;s <a href="/csharp-server-events-client.html">C# Server Events Client</a> in native TypeScript providing a productive client to consume ServiceStack&#39;s <a href="/server-events.html">real-time Server Events</a> that can be used in both TypeScript Web and node.js server applications.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> channels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerEventsClient</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> channels<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    handlers<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">onConnect</span><span class="token operator">:</span> <span class="token punctuation">(</span>sub<span class="token operator">:</span>ServerEventConnect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// Successful SSE connection</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;You&#39;ve connected! welcome &quot;</span> <span class="token operator">+</span> sub<span class="token punctuation">.</span>displayName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">onJoin</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span>ServerEventJoin<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// User has joined subscribed channel</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome, &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>displayName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">onLeave</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span>ServerEventLeave<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// User has left subscribed channel</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>displayName <span class="token operator">+</span> <span class="token string">&quot; has left the building&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span>ServerEventUpdate<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// User&#39;s subscribed channels have changed</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>displayName <span class="token operator">+</span> <span class="token string">&quot; channels subscription were updated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>        
        <span class="token function-variable function">onMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span>ServerEventMessage<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// Invoked for each other message</span>
        <span class="token comment">//... Register custom handlers</span>
        CustomMessage<span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span>CustomMessage<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// Handle CustomMessage Request DTO</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    receivers<span class="token operator">:</span> <span class="token punctuation">{</span> 
        <span class="token comment">//... Register any receivers</span>
        tv<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">watch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// Handle &#39;tv.watch {url}&#39; messages </span>
                <span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#tv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;youtu.be&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token function">splitOnLast</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> templates<span class="token punctuation">.</span>youtube<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> templates<span class="token punctuation">.</span>generic<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function-variable function">off</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment">// Hanndle &#39;tv.off&#39; messages</span>
                <span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#tv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
                el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When publishing a DTO Type for your Server Events message, your clients will be able to benefit from the generated DTOs in <a href="/typescript-add-servicestack-reference.html">TypeScript ServiceStack References</a>.</p><h2 id="servicestackidea-plugin" tabindex="-1">ServiceStackIDEA plugin <a class="header-anchor" href="#servicestackidea-plugin" aria-hidden="true">#</a></h2><img align="right" src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/servicestackidea/supported-ides.png"> ServiceStackIDEA is a plugin for JetBrains IntelliJ based IDEs to simplify development of client applications for ServiceStack services with integrated support for Add ServiceStack Reference feature. <p>ServiceStackIDEA now supports many of the most popular JetBrains IDEs including:</p><ul><li>WebStorm, RubyMine, PhpStorm &amp; PyCharm <ul><li>TypeScript</li></ul></li><li>IntelliJ <ul><li>Java, Kotlin and TypeScript</li></ul></li></ul><h3 id="typescript-support" tabindex="-1">TypeScript Support <a class="header-anchor" href="#typescript-support" aria-hidden="true">#</a></h3><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/servicestackidea/webstorm-add-typescript.png" alt=""></p><p>By right clicking on any folder in your Project explorer, you can add a TypeScript reference by simply providing any based URL of your ServiceStack server.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/7474c03bdb0ea1982db2e7be57567ad1b8a4ad38/img/servicestackidea/add-typescript-ref.png" alt=""></p><p>Once this file as been added to your project, you can update your service DTOs by right clicking <code>Update ServiceStack Reference</code> or using the light bulb action (<code>Alt+Enter</code> by default).</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/servicestackidea/webstorm-update-typescript.png" alt=""></p><p>This now means you can integrate with a ServiceStack service easily from your favorite JetBrains IDE when working with TypeScript!</p><h4 id="install-servicestack-idea-from-the-plugin-repository" tabindex="-1">Install ServiceStack IDEA from the Plugin repository <a class="header-anchor" href="#install-servicestack-idea-from-the-plugin-repository" aria-hidden="true">#</a></h4><p>The ServiceStack IDEA is now available to install directly from within a supported IDE Plugins Repository, to Install Go to:</p><ol><li><code>File -&gt; Settings...</code> Main Menu Item</li><li>Select <strong>Plugins</strong> on left menu then click <strong>Browse repositories...</strong> at bottom</li><li>Search for <strong>ServiceStack</strong> and click <strong>Install plugin</strong></li><li>Restart to load the installed ServiceStack IDEA plugin</li></ol><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/servicestackidea/android-plugin-download.gif" alt=""></p>__VP_STATIC_END__`,241),l=[o,c,i];function r(u,k,d,h,g,y){return e(),a("div",null,l)}var v=s(p,[["render",r]]);export{f as __pageData,v as default};
