import{_ as t,c as e,o as p,a,b as n,e as s}from"./app.14440598.js";const E='{"title":"JavaScript Utils","description":"","frontmatter":{"slug":"js-utils","title":"JavaScript Utils"},"headers":[{"level":3,"title":"Install","slug":"install"},{"level":3,"title":"Eval","slug":"eval"},{"level":3,"title":"JavaScript Expressions","slug":"javascript-expressions"},{"level":3,"title":"Helper Types","slug":"helper-types"}],"relativePath":"js-utils.md","lastUpdated":1634495308422}',o={},c=a('<p>The ServiceStack.Text JSON Serializers are only designed for serializing Typed POCOs, but you can still use it to <a href="https://github.com/ServiceStack/ServiceStack.Text#supports-dynamic-json" target="_blank" rel="noopener noreferrer">deserialize dynamic JSON</a> but you&#39;d need to specify the Type to deserialize into on the call-site otherwise the value would be returned as a string.</p><p>A more flexible approach to read any arbitrary JavaScript or JSON data structures is to use the high-performance and memory efficient JSON utils in <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">#Script</a> implementation of JavaScript.</p><h3 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-hidden="true">#</a></h3><p>The <code>#Script</code> JSON and JS Utils are available from the <a href="https://www.nuget.org/packages/ServiceStack.Common" target="_blank" rel="noopener noreferrer">ServiceStack.Common</a> NuGet package:</p>',4),i=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Common" Version="5.*" />')]),s(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),l=a(`<p>Which will enable access to the JSON API which preserves the Type which can be used to parse JavaScript or JSON literals:</p><div class="language-csharp"><pre><code>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>       <span class="token comment">//= int 1 </span>
JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;1.1&quot;</span><span class="token punctuation">)</span>     <span class="token comment">//= double 1.1</span>
JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;a&#39;&quot;</span><span class="token punctuation">)</span>     <span class="token comment">//= string &quot;a&quot;</span>
JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;{a:1}&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//= new Dictionary&lt;string, object&gt; { {&quot;a&quot;, 1 } }</span>
JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;[{a:1}]&quot;</span><span class="token punctuation">)</span> <span class="token comment">//= new List&lt;object&gt; { new Dictionary&lt;string, object&gt; { { &quot;a&quot;, 1 } } }</span>
</code></pre></div><p>It can be used to parse dynamic JSON and any primitive JavaScript data type. The inverse API of <code>JSON.stringify()</code> is also available.</p><h3 id="eval" tabindex="-1">Eval <a class="header-anchor" href="#eval" aria-hidden="true">#</a></h3><p>Eval is useful if you want to execute custom JavaScript functions, or if you want to have a text DSL or scripting language for executing custom logic or business rules you want to be able to change without having to compile or redeploy your App. It uses <a href="https://sharpscript.net/docs/sandbox" target="_blank" rel="noopener noreferrer">#Script Sandbox</a> which lets you evaluate the script within a custom scope that defines what functions and arguments it has access to, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomMethods</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptMethods</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span>
         <span class="token named-parameter punctuation">args</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;arg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token named-parameter punctuation">functions</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;arg&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>                                        <span class="token comment">//= &quot;value&quot;</span>
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;reverse(arg)&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>                               <span class="token comment">//= &quot;eulav&quot;</span>
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;3.itemsOf(arg.reverse().padRight(8, &#39;_&#39;))&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span> <span class="token comment">//= [&quot;eulav___&quot;, &quot;eulav___&quot;, &quot;eulav___&quot;]</span>

<span class="token comment">//= { a: [&quot;eulav___&quot;, &quot;eulav___&quot;, &quot;eulav___&quot;] }</span>
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;{a: 3.itemsOf(arg.reverse().padRight(8, &#39;_&#39;)) }&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>
</code></pre></div><h4 id="evaluating-dsl-s-within-a-custom-context" tabindex="-1">Evaluating DSL&#39;s within a custom Context <a class="header-anchor" href="#evaluating-dsl-s-within-a-custom-context" aria-hidden="true">#</a></h4><p><code>#Script</code> is useful for creating a late-bound sandboxed environment pre-configured with all functionality you want to enable access to without forcing implementation coupling in your project dependencies, e.g. you can enable binary serialization that all your project dependencies can use with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> person
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span>ReadOnlyMemory<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;serialize(target)&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where the <code>serialize()</code> method only needs to be registered once in the host project that creates the context that all your DSL&#39;s are executed within, the implementations of which can later be substituted without any changes to existing scripts or needing to change any package/Assembly references.</p><h3 id="javascript-expressions" tabindex="-1">JavaScript Expressions <a class="header-anchor" href="#javascript-expressions" aria-hidden="true">#</a></h3><p>The JavaScript Expressions support in ServiceStack follows the <a href="https://esprima.readthedocs.io/en/latest/syntax-tree-format.html" target="_blank" rel="noopener noreferrer">syntax tree used by Esprima</a>, JavaScript&#39;s leading lexical language parser for JavaScript, but adapted to suit C# conventions using PascalCase properties and each AST Type prefixed with <code>Js*</code> to avoid naming collisions with C#&#39;s LINQ Expression Types which often has the same name.</p><p>So Esprima&#39;s <a href="https://esprima.readthedocs.io/en/latest/syntax-tree-format.html#member-expression" target="_blank" rel="noopener noreferrer">MemberExpression</a> maps to <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Script/JsMemberExpression.cs" target="_blank" rel="noopener noreferrer">JsMemberExpression</a> in Templates.</p><p>In addition to adopting Esprima&#39;s AST data structures, #Script can also <a href="https://sharpscript.net/docs/expression-viewer#expression=1%20-%202%20%2B%203%20*%204%20%2F%205" target="_blank" rel="noopener noreferrer">emit the same serialized Syntax Tree</a> that Esprima generates from any AST Expression, e.g:</p><div class="language-csharp"><pre><code><span class="token comment">// Create AST from JS Expression</span>
<span class="token class-name">JsToken</span> expr <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;1 - 2 + 3 * 4 / 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Convert to Object Dictionary in Esprima&#39;s Syntax Tree Format</span>
<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> esprimaAst <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">ToJsAst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Serialize as Indented JSON</span>
esprimaAst<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IndentJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will display the same output as seen in the new <a href="https://sharpscript.net/docs/expression-viewer#expression=1%20-%202%20%2B%203%20*%204%20%2F%205" target="_blank" rel="noopener noreferrer">JS Expression Viewer</a>:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=1%20-%202%20%2B%203%20*%204%20%2F%205" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/expression-viewer.png" alt=""></a></p><p>From the AST output we can visualize how the different operator precedence is applied to an Expression. Expression viewer also lets us explore and evaluate different JavaScript Expressions with custom arguments:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=1%20%3C%202%20%26%26%20(t%20%7C%7C%203%20%3E%204)%20%26%26%20f&amp;t=true&amp;f=false" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/logical-expression.png" alt=""></a></p><p>An <a href="https://brendaneich.com/2012/04/the-infernal-semicolon/" target="_blank" rel="noopener noreferrer">abusage Brendan Eich regrets</a> that is enforced is limiting the <code>||</code> and <code>&amp;&amp;</code> binary operators to boolean expressions, which themselves always evaluate to a boolean value.</p><p>Instead to replicate <code>||</code> coalescing behavior on falsy values you can use C#&#39;s <code>??</code> null coalescing operator as seen in:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=a%20%3E%20(c%20%3F%3F%20b)%20%3F%20a%20%3A%20b&amp;a=1&amp;b=2" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/ternary-expression.png" alt=""></a></p><h4 id="lambda-expressions" tabindex="-1">Lambda Expressions <a class="header-anchor" href="#lambda-expressions" aria-hidden="true">#</a></h4><p>You can use lambda expressions in all functional filters:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=map(range(1%2Ccount)%2C%20x%20%3D%3E%20x%20*%20x)&amp;count=5" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/lambda-expression.png" alt=""></a></p><p>Using either normal lambda expression syntax:</p>`,26),r=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),s(),n("span",{class:"token variable"},"customers"),s(),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"zip"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"x"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"x"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Orders"),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"let"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"x"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token variable"},"x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token variable"},"x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"where"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"_"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Total"),s(),n("span",{class:"token punctuation"},"<"),s(),n("span",{class:"token number"},"500"),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"_"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"htmlDump"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),s(`
`)])])])],-1),u=n("p",null,[s("Or shorthand syntax for single argument lambda expressions which can instead use "),n("code",null,"=>"),s(" without brackets or named arguments where it will be implicitly assigned to the "),n("code",null,"it"),s(" binding:")],-1),k=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),s(),n("span",{class:"token variable"},"customers"),s(),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"zip"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Orders"),s(`
   `),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"let"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"}"),s(`
   `),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"where"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Total"),s(),n("span",{class:"token punctuation"},"<"),s(),n("span",{class:"token number"},"500"),s(`
   `),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"map"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"o"),s(`
   `),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"htmlDump"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),s(`
`)])])])],-1),d=n("p",null,[s("As it's results in more wrist-friendly and readable code, "),n("a",{href:"https://sharpscript.net/linq/projection-operators#linq15-selectmany---compound-from-2",target:"_blank",rel:"noopener noreferrer"},"most LINQ Examples"),s(" use the shorthand lambda expression syntax above.")],-1),h=n("h4",{id:"shorthand-properties",tabindex:"-1"},[s("Shorthand properties "),n("a",{class:"header-anchor",href:"#shorthand-properties","aria-hidden":"true"},"#")],-1),m=n("p",null,[s("Other language enhancements include support for "),n("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Syntax",target:"_blank",rel:"noopener noreferrer"},"JavaScript's shorthand property names"),s(":")],-1),g=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"name"),n("span",{class:"token punctuation"},","),n("span",{class:"token variable"},"age"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),s(`
`)])])]),n("p",null,"But like C# also lets you use member property names:"),n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),s(),n("span",{class:"token variable"},"people"),s(),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"let"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Age"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token variable"},"select"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Age"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),s(`
`)])])])],-1),v=a(`<h4 id="template-literals" tabindex="-1">Template Literals <a class="header-anchor" href="#template-literals" aria-hidden="true">#</a></h4><p>Many of ES6/7 features are also implemented like Template Literals:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=%60Hello%2C%20%24%7Bname%7D!%20%24%7Ba%20%3F%20pow(1%2B2%2Ca)%20%3A%20&#39;&#39;%7D%60&amp;name=&#39;World&#39;&amp;a=3" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/template-literals.png" alt=""></a></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Backtick quoted strings also adopt the same <a href="https://sharpscript.net/docs/syntax#template-literals" target="_blank" rel="noopener noreferrer">escaping behavior of JavaScript strings</a> whilst all other quoted strings preserve unescaped string values</p></div><h4 id="spread-operators" tabindex="-1">Spread Operators <a class="header-anchor" href="#spread-operators" aria-hidden="true">#</a></h4><p>Other advanced ES6/7 features supported include the object spread, array spread and argument spread operators:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=keys(%7B%20...a%2C%20c%3A3%2C%20...%7Bd%3A%204%7D%20%7D)&amp;a=%7B%20b%3A%202%20%7D" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/object-spread.png" alt=""></a></p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=%5B1%2C%20...%5Brange(2%2Cpow(...%5B3%2Ce%5D))%5D%2C%201%5D&amp;e=2" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/array-spread.png" alt=""></a></p><h4 id="bitwise-operators" tabindex="-1">Bitwise Operators <a class="header-anchor" href="#bitwise-operators" aria-hidden="true">#</a></h4><p>All JavaScript Bitwise operators are also supported:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=%5B3%251%2C%203%261%2C%203%7C1%2C%203%5E1%2C%203%3C%3C1%2C%203%20%3E%3E%201%2C%20~1%5D&amp;e=2" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/bitwise-operators.png" alt=""></a></p><p>Essentially Templates supports most JavaScript Expressions, not statements which are covered with <a href="https://sharpscript.net/docs/blocks" target="_blank" rel="noopener noreferrer">Templates Blocks support</a> or mutations using Assignment Expressions and Operators. All assignments still need to be explicitly performed through an <a href="https://sharpscript.net/docs/default-scripts#assignment" target="_blank" rel="noopener noreferrer">Assignment Filter</a>.</p><h4 id="evaluating-javascript-expressions" tabindex="-1">Evaluating JavaScript Expressions <a class="header-anchor" href="#evaluating-javascript-expressions" aria-hidden="true">#</a></h4><p>The built-in JavaScript expressions support is also useful outside of dynamic pages where they can be evaluated with <code>JS.eval()</code>:</p><div class="language-csharp"><pre><code>JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;pow(2,2) + pow(4,2)&quot;</span><span class="token punctuation">)</span> <span class="token comment">//= 20</span>
</code></pre></div><p>The difference over JavaScript&#39;s eval being that methods are calling <a href="https://sharpscript.net/docs/filters-reference" target="_blank" rel="noopener noreferrer">C# script methods</a> in a sandboxed context.</p><p>By default expressions are executed in an empty scope, but can also be executed within a custom scope which can be used to define the arguments expressions are evaluated with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">args</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;pow(a,2) + pow(b,2)&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span> <span class="token comment">//= 20</span>
</code></pre></div><p>Custom methods can also be introduced into the scope which can override existing filters by using the same name and args count, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">MyMethods</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptMethods</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> arg1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> arg2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arg1 <span class="token operator">/</span> arg2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">functions</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;pow(2,2) + pow(4,2)&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= 3</span>
</code></pre></div><p>An alternative to injecting arguments by scope is to wrap the expression in a lambda expression, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expr <span class="token operator">=</span> <span class="token punctuation">(</span>JsArrowFunctionExpression<span class="token punctuation">)</span>JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;(a,b) =&gt; pow(a,2) + pow(b,2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which can then be invoked with positional arguments by calling <code>Invoke()</code>, e.g:</p><div class="language-csharp"><pre><code>expr<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment">//= 20</span>
expr<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span> <span class="token comment">//= 3</span>
</code></pre></div><h4 id="parsing-js-expressions" tabindex="-1">Parsing JS Expressions <a class="header-anchor" href="#parsing-js-expressions" aria-hidden="true">#</a></h4><p>Evaluating JS expressions with <code>JS.eval()</code> is a wrapper around parsing the JS expression into an AST tree then evaluating it, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expr <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;pow(2,2) + pow(4,2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
expr<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= 20</span>
</code></pre></div><p>When needing to evaluate the same expression multiple times you can cache and execute the AST to save the cost of parsing the expression again.</p><h4 id="dsl-example" tabindex="-1">DSL example <a class="header-anchor" href="#dsl-example" aria-hidden="true">#</a></h4><p>If implementing a DSL containing multiple expressions as done in many of the <a href="https://sharpscript.net/docs/blocks" target="_blank" rel="noopener noreferrer">Block argument expressions</a> you can instead use the <code>ParseJsExpression()</code> extension method to return a literal Span advanced to past the end of the expression with the parsed AST token returned in an <code>out</code> parameter.</p><p>This is what the Each block implementation uses to parse its argument expression which can contain a number of LINQ-like expressions:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> literal <span class="token operator">=</span> <span class="token string">&quot;where c.Age == 27 take 1 + 2&quot;</span><span class="token punctuation">.</span><span class="token function">AsSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>literal<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;where &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">Advance</span><span class="token punctuation">(</span><span class="token string">&quot;where &quot;</span><span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#39;c.Age == 27 take 1 + 2&#39;</span>
    literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">ParseJsExpression</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token keyword">where</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39; take 1 + 2&#39;</span>
<span class="token punctuation">}</span>
literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">AdvancePastWhitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// &#39;take 1 + 2&#39;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>literal<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;take &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">Advance</span><span class="token punctuation">(</span><span class="token string">&quot;take &quot;</span><span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &#39;1 + 2&#39;</span>
    literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">ParseJsExpression</span><span class="token punctuation">(</span><span class="token keyword">out</span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Resulting in <code>where</code> populated with the <a href="https://sharpscript.net/docs/expression-viewer#expression=c.Age%20%3D%3D%2027&amp;c=%7B%20Age%3A27%20%7D" target="_blank" rel="noopener noreferrer">c.Age == 27</a> <code>BinaryExpression</code> and <code>take</code> with the <a href="https://sharpscript.net/docs/expression-viewer#expression=1%20%2B%202" target="_blank" rel="noopener noreferrer">1 + 2</a><code>BinaryExpression</code>.</p><h4 id="immutable-and-comparable" tabindex="-1">Immutable and Comparable <a class="header-anchor" href="#immutable-and-comparable" aria-hidden="true">#</a></h4><p>Unlike C#&#39;s LINQ Expressions which can&#39;t be compared for equality, #Script Expressions are both Immutable and Comparable which can be used in caches and compared to determine if 2 Expressions are equivalent, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsLogicalExpression</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsBinaryExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsIdentifier</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsGreaterThan<span class="token punctuation">.</span>Operator<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsLiteral</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    JsAnd<span class="token punctuation">.</span>Operator<span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsBinaryExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsIdentifier</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsLessThan<span class="token punctuation">.</span>Operator<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsLiteral</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

expr<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;a &gt; 1 &amp;&amp; b &lt; 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//= true</span>

expr<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsLogicalExpression</span><span class="token punctuation">(</span>
    JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;a &gt; 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsAnd<span class="token punctuation">.</span>Operator<span class="token punctuation">,</span> JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;b &lt; 2&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//= true</span>
</code></pre></div><p>Showing Expressions whether created programmatically, entirely from strings or any combination of both can be compared for equality and evaluated in the same way:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">args</span><span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

expr<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span> <span class="token comment">//= true</span>
</code></pre></div><h3 id="helper-types" tabindex="-1">Helper Types <a class="header-anchor" href="#helper-types" aria-hidden="true">#</a></h3><p>As scripting makes prevalent usage of Object Dictionaries and Key/Value pairs there&#39;s a couple of UX Friendly Generic collections to reduce boilerplate if you&#39;re repeatedly using these collections:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> objDict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectDictionary</span> <span class="token punctuation">{</span> <span class="token comment">//inherits Dictionary&lt;string,object&gt;</span>
    <span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> strDict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringDictionary</span> <span class="token punctuation">{</span> <span class="token comment">//inherits Dictionary&lt;string,string&gt;</span>
    <span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> kvps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePairs</span> <span class="token punctuation">{</span>
    KeyValuePairs<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    KeyValuePairs<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//instead of</span>
<span class="token class-name"><span class="token keyword">var</span></span> kvps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>`,41),b=[c,i,l,r,u,k,d,h,m,g,v];function f(w,y,x,S,q,_){return p(),e("div",null,b)}var T=t(o,[["render",f]]);export{E as __pageData,T as default};
