import{_ as n,c as s,o as a,a as t}from"./app.14440598.js";const g='{"title":"AutoQuery Service Data Source","description":"","frontmatter":{"slug":"autoquery-service","title":"AutoQuery Service Data Source"},"headers":[{"level":3,"title":"Register Data Sources","slug":"register-data-sources"},{"level":3,"title":"GetRockstarAlbums","slug":"getrockstaralbums"},{"level":3,"title":"GetGithubRepos","slug":"getgithubrepos"},{"level":3,"title":"Custom AutoQuery Data Implementation","slug":"custom-autoquery-data-implementation"},{"level":3,"title":"View Request Logs in AutoQuery Viewer","slug":"view-request-logs-in-autoquery-viewer"}],"relativePath":"autoquery-service.md","lastUpdated":1634495307610}',e={},p=t(`<p>The next step after <a href="/autoquery-memory.html">MemorySource</a> in querying for even richer result-sets, whether you want to add custom validation, access multiple dependencies, construct complex queries or other custom business logic, you can use a <strong>Service Source</strong> instead which lets you call a Service and use its Response as the dynamic Data Source that you can apply Auto Querying logic on.</p><p><code>ServiceSource</code> is very similar to <code>MemorySource</code> however instead of passing in the in-memory collection you want to query directly, you&#39;ll need to pass a <strong>Request DTO</strong> of the Service you want called instead. The response of the Service is then further queried just as if its results were passed into a MemorySource directly.</p><p>We&#39;ll illustrate with a few examples how to register and use ServiceSources, explore some of their capabilities and provide some examples of when you may want to use them below.</p><h3 id="register-data-sources" tabindex="-1">Register Data Sources <a class="header-anchor" href="#register-data-sources" aria-hidden="true">#</a></h3><p>The <code>UserLogin</code> ServiceSource shows you can just pass an empty Request DTO as-is to execute its Service. The <code>RockstarAlbum</code> and <code>GithubRepo</code> Service Sources are however leveraging the built-in <a href="/auto-mapping.html">Auto Mapping</a> to copy any matching properties from the AutoQuery Request DTO to the downstream <code>GetRockstarAlbums</code> and <code>GetGithubRepos</code> Request DTO&#39;s. Finally the responses for the <code>GithubRepo</code> Service is <strong>cached for 5 minutes</strong> so any subsequent matching requests end up querying the cached result set instead of re-executing the <code>GetGithubRepos</code> Service:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryDataFeature</span> <span class="token punctuation">{</span> MaxLimit <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">AddDataSource</span><span class="token punctuation">(</span>ctx <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ServiceSource</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserLogin<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTodaysUserActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token function">AddDataSource</span><span class="token punctuation">(</span>ctx <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ServiceSource</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RockstarAlbum<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Dto<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConvertTo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GetRockstarAlbums<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token function">AddDataSource</span><span class="token punctuation">(</span>ctx <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ServiceSource</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GithubRepo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>Dto<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConvertTo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GetGithubRepos<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        HostContext<span class="token punctuation">.</span>Cache<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The implementation of <code>GetTodaysUserActivity</code> Service uses an async OrmLite RDBMS call to get all User Logins within the last day, fetches the Live Activity data from Redis, then <a href="https://github.com/ServiceStack/ServiceStack.OrmLite#merge-disconnected-poco-result-sets" target="_blank" rel="noopener noreferrer">merges the disconnected POCO result sets</a> into the <code>UserLogin</code> POCO which it returns:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/useractivity/today&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryTodaysUserActivity</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>UserLogin<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>UserLogin<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetTodaysUserActivity</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> logins <span class="token operator">=</span> <span class="token keyword">await</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SelectAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserLogin<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LastLogin <span class="token operator">&gt;=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> activities <span class="token operator">=</span> Redis<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Activity<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logins<span class="token punctuation">.</span><span class="token function">Merge</span><span class="token punctuation">(</span>activities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> logins<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="getrockstaralbums" tabindex="-1">GetRockstarAlbums <a class="header-anchor" href="#getrockstaralbums" aria-hidden="true">#</a></h3><p>The <code>GetRockstarAlbums</code> Service shows an example of a calling an existing ad hoc DB Service executing an arbitrary custom Query. It uses the Request DTO Auto-Mapping at the <code>ServiceSource</code> registration to first copy any matching properties from the initial <code>QueryRockstarAlbums</code> Request DTO to populate a new <code>GetRockstarAlbums</code> instance which is what&#39;s used to execute the Service with.</p><p>In this way the <code>QueryRockstarAlbums</code> AutoQuery Service is essentially decorating the underlying <code>GetRockstarAlbums</code> Service giving it access to AutoQuery features where clients are able to apply further post-querying server logic to an existing Service implementation which now lets them filter, sort, select only a partial list of fields, include additional aggregate queries, etc.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryRockstarAlbums</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>RockstarAlbum<span class="token punctuation">&gt;</span></span></span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> IdBetween <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetRockstarAlbums</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RockstarAlbum<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>IdBetween <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        q<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">&gt;=</span> request<span class="token punctuation">.</span>IdBetween<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Id <span class="token operator">&lt;=</span> request<span class="token punctuation">.</span>IdBetween<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        q<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> request<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetRockstarAlbumsResponse</span> <span class="token punctuation">{</span> Results <span class="token operator">=</span> Db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>One thing to notice is that ServiceSource still works whether the results are wrapped in a Response DTO instead of a naked <code>IEnumerable&lt;RockstarAlbum&gt;</code> collection. This is transparently supported as <code>ServiceSource</code> will use the first matching <code>IEnumerable&lt;T&gt;</code> property for Services that don&#39;t return a collection.</p><p>It should be noted that decorating an existing OrmLite Service is rarely necessary as in most cases you&#39;ll be able to get by with just a simple AutoQuery RDBMS query as seen in the Service below which replaces the above 2 Services:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryRockstarAlbums</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryDb<span class="token punctuation">&lt;</span>RockstarAlbum<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><h3 id="getgithubrepos" tabindex="-1">GetGithubRepos <a class="header-anchor" href="#getgithubrepos" aria-hidden="true">#</a></h3><p>The final <code>GetGithubRepos</code> ServiceSource example shows an example of a slightly more complex implementation than a single 3rd Party API call where it adds custom validation logic and call different 3rd Party API Endpoints depending on user input:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryGithubRepo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>GithubRepo<span class="token punctuation">&gt;</span></span></span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> User <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Organization <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">GetGithubRepos</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>User <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>Organization <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> request<span class="token punctuation">.</span>User <span class="token operator">!=</span> <span class="token keyword">null</span>
        <span class="token punctuation">?</span> <span class="token interpolation-string"><span class="token string">$&quot;https://api.github.com/users/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>User</span><span class="token punctuation">}</span></span><span class="token string">/repos&quot;</span></span>
        <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">$&quot;https://api.github.com/orgs/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>Organization</span><span class="token punctuation">}</span></span><span class="token string">/repos&quot;</span></span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">GetJsonFromUrl</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">requestFilter</span><span class="token punctuation">:</span>req <span class="token operator">=&gt;</span> req<span class="token punctuation">.</span>UserAgent <span class="token operator">=</span> <span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>GithubRepo<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>A hidden feature ServiceSources are naturally able to take advantage of due to its behind-the-scenes usage of the new <a href="/service-gateway.html">Service Gateway</a> is that the exact code above could still function if the <code>QueryGithubRepo</code> AutoQuery Data Service and underlying <code>GetGithubRepos</code> Service were moved to different hosts \u{1F603}</p><h3 id="custom-autoquery-data-implementation" tabindex="-1">Custom AutoQuery Data Implementation <a class="header-anchor" href="#custom-autoquery-data-implementation" aria-hidden="true">#</a></h3><p>Just like you can <a href="/autoquery.html#custom-autoquery-implementations">Create a Custom implementation</a> in AutoQuery, you can do the same in AutoQuery Data by just defining an implementation for your AutoQuery Data Request DTO. But instead of <code>IAutoQueryDb</code> you&#39;d reference the <code>IAutoQueryData</code> dependency to construct and execute your custom AutoQuery Data query.</p><p>When overriding the default implementation of an AutoQuery Data Service you also no longer need to register a Data Source as you can specify the Data Source in-line when calling <code>AutoQuery.CreateQuery()</code>.</p><p>For our custom AutoQuery Data implementation we&#39;ll look at creating a useful Service which reads the daily CSV Request and Error Logs from the new <a href="/request-logger.html#csv-request-logger">CsvRequestLogger</a> and queries it by wrapping the POCO <code>RequestLogEntry</code> results into a <code>MemoryDataSource</code>:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/query/requestlogs&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/query/requestlogs/{Date}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryRequestLogs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>RequestLogEntry<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> Date <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> ViewErrors <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAutoQueryDataServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IAutoQueryData</span> AutoQuery <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">QueryRequestLogs</span> query<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> date <span class="token operator">=</span> query<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token function">GetValueOrDefault</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> logSuffix <span class="token operator">=</span> query<span class="token punctuation">.</span>ViewErrors <span class="token punctuation">?</span> <span class="token string">&quot;-errors&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> csvLogsFile <span class="token operator">=</span> VirtualFileSources<span class="token punctuation">.</span><span class="token function">GetFile</span><span class="token punctuation">(</span>
            <span class="token string">&quot;requestlogs/{0}-{1}/{0}-{1}-{2}{3}.csv&quot;</span><span class="token punctuation">.</span><span class="token function">Fmt</span><span class="token punctuation">(</span>
                date<span class="token punctuation">.</span>Year<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                date<span class="token punctuation">.</span>Month<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                date<span class="token punctuation">.</span>Day<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                logSuffix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>csvLogsFile <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> HttpError<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token string">&quot;No logs found on &quot;</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> logs <span class="token operator">=</span> csvLogsFile<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromCsv</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>RequestLogEntry<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> AutoQuery<span class="token punctuation">.</span><span class="token function">CreateQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Request<span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">db</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryDataSource<span class="token punctuation">&lt;</span>RequestLogEntry<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>logs<span class="token punctuation">,</span> query<span class="token punctuation">,</span> Request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> AutoQuery<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This Service now lets you query the Request Logs of any given day, letting you filter, page and sort through the Request Logs of the day. While we&#39;re at it, let&#39;s also create multiple Custom AutoQuery Data implementations to act as canonical smart links for the above Service:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/logs/today&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodayLogs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>RequestLogEntry<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/logs/today/errors&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodayErrorLogs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>RequestLogEntry<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/logs/yesterday&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YesterdayLogs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>RequestLogEntry<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/logs/yesterday/errors&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YesterdayErrorLogs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>RequestLogEntry<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>The implementations of which just delegates to <code>QueryRequestLogs</code> with the selected Date and whether or not to show just the error logs:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">TodayLogs</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">Any</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryRequestLogs</span> <span class="token punctuation">{</span> Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">TodayErrorLogs</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">Any</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryRequestLogs</span> <span class="token punctuation">{</span> Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">,</span> ViewErrors <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">YesterdayLogs</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">Any</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryRequestLogs</span> <span class="token punctuation">{</span> Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">YesterdayErrorLogs</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">Any</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryRequestLogs</span> <span class="token punctuation">{</span> Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ViewErrors <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="view-request-logs-in-autoquery-viewer" tabindex="-1">View Request Logs in <a href="https://github.com/ServiceStack/Admin" target="_blank" rel="noopener noreferrer">AutoQuery Viewer</a> <a class="header-anchor" href="#view-request-logs-in-autoquery-viewer" aria-hidden="true">#</a></h3><p>And with no more effort we can jump back to <code>/ss_admin/</code> and use <a href="https://github.com/ServiceStack/Admin" target="_blank" rel="noopener noreferrer">AutoQuery Viewer&#39;s</a> nice UI to quickly inspect Todays and Yesterdays Request and Error Logs \u{1F603}</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/release-notes/autoqueryviewer-csv-logs.png" alt=""></p>`,31),o=[p];function c(u,l,i,r,k,d){return a(),s("div",null,o)}var m=n(e,[["render",c]]);export{g as __pageData,m as default};
