import{_ as s,c as n,o as a,a as t}from"./app.14440598.js";const m='{"title":"Studio - User Management","description":"","frontmatter":{"slug":"studio-users","title":"Studio - User Management"},"headers":[{"level":2,"title":"User Admin Feature","slug":"user-admin-feature"},{"level":3,"title":"Studio User Management UI","slug":"studio-user-management-ui"},{"level":3,"title":"Admin User Services","slug":"admin-user-services"}],"relativePath":"studio-users.md","lastUpdated":1634495308450}',p={},e=t(`<p>A glimpse of the Studio&#39;s <strong>Users</strong> Module can be seen in the <a href="/autoquery-crud-bookings.html">Bookings CRUD demo</a> who utilizes it to create <strong>Employee</strong> and <strong>Manager</strong> users.</p><h2 id="user-admin-feature" tabindex="-1">User Admin Feature <a class="header-anchor" href="#user-admin-feature" aria-hidden="true">#</a></h2><p>The <code>AdminUsersFeature</code> provides Admin User Management APIs enabling remote programmatic access to your registered <a href="/authentication-and-authorization.html#user-auth-repository">User Auth Repository</a>, featuring:</p><ul><li>Works with existing <code>IUserAuthRepository</code> sync or async providers</li><li>Utilizes Progressive enhancement, e.g. search functionality utilizes <code>IQueryUserAuth</code> (if exists) performing a wildcard search over multiple fields, otherwise falls back to exact match on <code>UserName</code> or <code>Email</code></li><li>Supports managing Auth Repositories utilizing custom <code>UserAuth</code> data models</li><li>Flexible UI options for customizing which fields to include in Search Results and Create/Edit UIs</li><li>Rich Metadata aggregating only App-specific Roles &amp; Permissions defined in your App</li><li>User Events allow you to execute custom logic before &amp; after each Created/Updated/Deleted User</li></ul><p>User Admin Plugin is a lightweight API around Auth Repository APIs with no additional dependencies that can be registered with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AdminUsersFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="studio-user-management-ui" tabindex="-1">Studio User Management UI <a class="header-anchor" href="#studio-user-management-ui" aria-hidden="true">#</a></h3><p>Where Studio&#39;s compatibility-based API will only enable it for remote ServiceStack instances with the plugin enabled:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/studio/studio-home.png" alt=""></p><p>In the Users Module you&#39;ll need to Sign In as an <strong>Admin</strong> User to gain access which for new Apps created with <code>auth-db</code> mix script will only have the admin user:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/studio/studio-user-results.png" alt=""></p><p>That was created in the <a href="https://github.com/NetCoreApps/BookingsCrud/blob/main/Acme/Configure.AuthRepository.cs" target="_blank" rel="noopener noreferrer">Configure.AuthRepository.cs</a> Modular <a href="/modular-startup.html">Startup</a> script:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IAppHost</span> appHost<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> authRepo <span class="token operator">=</span> appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    authRepo<span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CreateUser</span><span class="token punctuation">(</span>authRepo<span class="token punctuation">,</span> <span class="token string">&quot;admin@email.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Admin User&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;p@55wOrd&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">roles</span><span class="token punctuation">:</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> RoleNames<span class="token punctuation">.</span>Admin <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token class-name">IAuthRepository</span> authRepo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> pass<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> roles<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>authRepo<span class="token punctuation">.</span><span class="token function">GetUserAuthByUserName</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> authRepo<span class="token punctuation">.</span><span class="token function">CreateUserAuth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppUser</span> <span class="token punctuation">{</span> Email <span class="token operator">=</span> email<span class="token punctuation">,</span> DisplayName <span class="token operator">=</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    authRepo<span class="token punctuation">.</span><span class="token function">AssignRoles</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> roles<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This screen allows you Search for &amp; edit existing users or create new Users. Both Create &amp; Edit forms will default to only showing the most common User Info fields for creating a new User:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/studio/bookings-crud-screenshot.png" alt=""></p><p>Whilst the Edit UI also lets you perform common actions like changing a Users Password, Locking Users and Assigning Roles &amp; Permissions which are auto populated from the Required &amp; Validation Roles/Permission Attributes used in your App:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/studio/studio-user-default-edit.png" alt=""></p><p>The fields in the Search Results and User forms can also be customized to suit your App. Lets say we want to use a custom <code>AppUser</code> class with a few additional fields, the <code>LastLoginIp</code> and <code>LastLoginDate</code> we&#39;ll want automatically populated using the <a href="https://github.com/NetCoreApps/BookingsCrud/blob/main/Acme/Configure.AuthRepository.cs" target="_blank" rel="noopener noreferrer">OnAuthenticated AuthEvent</a> whilst we want to add the users <code>Currency</code> to both the <code>IncludeUserAuthProperties</code> to include them in the Management forms and the <code>QueryUserAuthProperties</code> so they&#39;re returned in Search Results.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppUser</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">UserAuth</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastLoginIp <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> LastLoginDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Currency <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteAuthRepository<span class="token punctuation">&lt;</span>AppUser<span class="token punctuation">,</span> UserAuthDetails<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        UseDistinctRoleTables <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            

Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AdminUsersFeature</span> <span class="token punctuation">{</span>
    <span class="token comment">// Defaults to only allow &#39;Admin&#39; users to manage users</span>
    <span class="token comment">// AdminRole = RoleNames.Admin, </span>
    IncludeUserAuthProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>DisplayName<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>PhoneNumber<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>LockedDate<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>Currency<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    QueryUserAuthProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>Currency<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">nameof</span><span class="token punctuation">(</span>AppUser<span class="token punctuation">.</span>CreatedDate<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// Update denormalized data</span>
    OnAfterUpdateUser <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>newUser<span class="token punctuation">,</span> oldUser<span class="token punctuation">,</span> service<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newUser<span class="token punctuation">.</span>Email <span class="token operator">!=</span> oldUser<span class="token punctuation">.</span>Email<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> service<span class="token punctuation">.</span>Db<span class="token punctuation">.</span><span class="token function">UpdateOnlyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span> Email <span class="token operator">=</span> newUser<span class="token punctuation">.</span>Email <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">where</span><span class="token punctuation">:</span> q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>Id <span class="token operator">==</span> oldUser<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> service<span class="token punctuation">.</span>Db<span class="token punctuation">.</span><span class="token function">UpdateOnlyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Subscription</span> <span class="token punctuation">{</span> Email <span class="token operator">=</span> newUser<span class="token punctuation">.</span>Email <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">where</span><span class="token punctuation">:</span> q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>CustomerId <span class="token operator">==</span> oldUser<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>We also don&#39;t want to store any Address info on our Users so we&#39;ve excluded them in our field lists which will result in our Custom UI:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/studio/studio-user-customfields.png" alt=""></p><p>Our Custom Configuration makes use of custom event hooks for performing Custom App logic, in this case it uses the <code>OnAfterUpdateUser</code> event to update denormalized data when it detects a Users email has changed.</p><p>Alternatively you can prevent emails from being changed whilst still displaying them in the UI forms with an <code>OnBeforeUpdateUser</code> event:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AdminUsersFeature</span> <span class="token punctuation">{</span>
    <span class="token comment">// Disable Changing Email</span>
    OnBeforeUpdateUser <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>newUser<span class="token punctuation">,</span> oldUser<span class="token punctuation">,</span> service<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newUser<span class="token punctuation">.</span>Email <span class="token operator">!=</span> oldUser<span class="token punctuation">.</span>Email<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot change Email&quot;</span><span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>IUserAuth<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>There are <code>OnBefore</code>/<code>OnAfter</code> hooks for <code>Create</code>/<code>Update</code>/<code>Delete</code> User Events.</p><h3 id="admin-user-services" tabindex="-1">Admin User Services <a class="header-anchor" href="#admin-user-services" aria-hidden="true">#</a></h3><p>Of course user management isn&#39;t limited to Studio&#39;s UI as you can use the back-end APIs integrated within your own Apps. Here are all Admin Users DTOs containing everything needed to call its APIs from <a href="/csharp-client.html">.NET Service Clients</a>. These are contained within <strong>ServiceStack.Client</strong> so no additional dependencies are needed.</p><p>The APIs are fairly straight-forward with each DTO containing on the bare minimum Typed properties with all other UserAuth fields you want updated in the <code>UserAuthProperties</code> Dictionary. Whilst all User result-sets are returned in an unstructured Object Dictionary.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AdminUserBase</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMeta</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DisplayName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ProfileUrl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> UserAuthProperties <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Meta <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">AdminCreateUser</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AdminUserBase</span><span class="token punctuation">,</span> <span class="token class-name">IPost</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>AdminUserResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Roles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Permissions <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">AdminUpdateUser</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AdminUserBase</span><span class="token punctuation">,</span> <span class="token class-name">IPut</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>AdminUserResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> LockUser <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> UnlockUser <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> AddRoles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> RemoveRoles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> AddPermissions <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> RemovePermissions <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">AdminGetUser</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGet</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>AdminUserResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">AdminDeleteUser</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDelete</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>AdminDeleteUserResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminDeleteUserResponse</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHasResponseStatus</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ResponseStatus</span> ResponseStatus <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">AdminUserResponse</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHasResponseStatus</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> Result <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ResponseStatus</span> ResponseStatus <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">AdminQueryUsers</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGet</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>AdminUsersResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Query <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OrderBy <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Skip <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Take <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminUsersResponse</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHasResponseStatus</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> Results <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ResponseStatus</span> ResponseStatus <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,29),o=[e];function c(u,l,k,i,r,d){return a(),n("div",null,o)}var w=s(p,[["render",c]]);export{m as __pageData,w as default};
