import{_ as n,c as s,o as a,a as e}from"./app.14440598.js";const g='{"title":"CacheResponse Attribute","description":"","frontmatter":{"slug":"cacheresponse-attribute","title":"CacheResponse Attribute"},"headers":[{"level":3,"title":"Caching AutoQuery Services","slug":"caching-autoquery-services"},{"level":3,"title":"Server Cached and HTTP Caching enabled responses","slug":"server-cached-and-http-caching-enabled-responses"},{"level":3,"title":"Advanced CacheInfo Customization","slug":"advanced-cacheinfo-customization"}],"relativePath":"cacheresponse-attribute.md","lastUpdated":1634495307614}',t={},p=e(`__VP_STATIC_START__<p>The <code>[CacheResponse]</code> is a normal <a href="/filter-attributes.html">Request Filter Attribute</a> which can be added at the top-level of your Service class in which case it will cache the response of <strong>All</strong> Service implementations for <strong>60 seconds</strong>, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CacheResponse</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Duration <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachedServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetCustomer</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetCustomerOrders</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>It can also be applied individually on a single Service implementation:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CacheResponse</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Duration <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetCustomer</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="caching-autoquery-services" tabindex="-1">Caching AutoQuery Services <a class="header-anchor" href="#caching-autoquery-services" aria-hidden="true">#</a></h3><p>Request Filter attributes can also be applied on Request DTO&#39;s, as we seen with <a href="/autoquery-dynamodb.html#caching-autoquery-services">AutoQuery DynamoDB&#39;s QueryRockstarAlbums</a> Request DTO:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CacheResponse</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Duration <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryRockstarAlbums</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryData<span class="token punctuation">&lt;</span>RockstarAlbum<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><p>However adding Request Filter Attributes <strong>on Request DTO&#39;s</strong> goes against our recommendation for keeping your DTO&#39;s in a separate implementation and dependency-free <strong>ServiceModel.dll</strong> as it would require a dependency on the non-PCL <strong>ServiceStack.dll</strong> which would prohibit being able to reuse your existing DTO .dll in PCL libraries, limiting their potential re-use.</p><p>You can still take advantage of the <code>[CacheResponse]</code> attribute on AutoQuery Services by defining a custom implementation, at which point adding the <code>[CacheResponse]</code> attribute behaves as normal and applies caching to your Service implementations. E.g. you can enable caching for multiple AutoQuery Services with:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CacheResponse</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Duration <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCachedAutoQueryServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IAutoQueryData</span> AutoQuery <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">QueryRockstars</span> query<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        AutoQuery<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> AutoQuery<span class="token punctuation">.</span><span class="token function">CreateQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">QueryRockstarAlbums</span> query<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        AutoQuery<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> AutoQuery<span class="token punctuation">.</span><span class="token function">CreateQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="server-cached-and-http-caching-enabled-responses" tabindex="-1">Server Cached and <a href="/http-caching.html">HTTP Caching</a> enabled responses <a class="header-anchor" href="#server-cached-and-http-caching-enabled-responses" aria-hidden="true">#</a></h3><p>When only specifying a <code>Duration=60</code> ServiceStack only <strong>caches the Server Response</strong> so it behaves similar to using the existing <code>ToOptimizedResult()</code> API, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetCustomer</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> Request<span class="token punctuation">.</span><span class="token function">ToOptimizedResultUsingCache</span><span class="token punctuation">(</span>Cache<span class="token punctuation">,</span> 
        Request<span class="token punctuation">.</span>RawUrl<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>To also enable <a href="/http-caching.html">HTTP Caching</a> features you&#39;ll need to opt-in by specifying an additional HTTP Caching directive. E.g. including a <code>MaxAge</code> instructs ServiceStack to apply <strong>HTTP Caching</strong> logic and return the appropriate headers:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CacheResponse</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Duration<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> MaxAge<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetCustomer</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where subsequent identical requests from a <strong>cache-aware client</strong> will return their locally cached version within the first <strong>30 seconds</strong>, between <strong>30-60 seconds</strong> the client will re-validate the request with the Server who will return a <strong>304 NotModified</strong> Response with an <strong>Empty Body</strong>, after <strong>60 seconds</strong> the cache expires and the next request will <strong>re-execute the Service</strong> and populate the cache with a new response.</p><h4 id="cacheresponse-properties" tabindex="-1">CacheResponse Properties <a class="header-anchor" href="#cacheresponse-properties" aria-hidden="true">#</a></h4><p>The Caching behavior of the <code>[CacheResponse]</code> attribute can be further customized using any of the additional properties below:</p><div class="language-csharp"><pre><code><span class="token keyword">int</span> Duration              <span class="token comment">// Cache expiry in seconds</span>
<span class="token keyword">int</span> MaxAge                <span class="token comment">// MaxAge in seconds</span>
CacheControl CacheControl <span class="token comment">// Customize Cache-Control HTTP Headers</span>
<span class="token keyword">bool</span> VaryByUser           <span class="token comment">// Vary cache per user</span>
<span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> VaryByRoles      <span class="token comment">// Vary cache for users in these roles</span>
<span class="token keyword">bool</span> LocalCache           <span class="token comment">// Use In Memory HostContext.LocalCache or HostContext.Cache</span>
</code></pre></div><p>Using any of the other HTTP Cache properties will also trigger the HTTP Caching features. When a <code>MaxAge</code> isn&#39;t specified, i.e:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CacheResponse</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Duration <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> VaryByUser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">GetUserActivity</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><p>ServiceStack falls back to use the <code>HttpCacheFeature.DefaultMaxAge</code> which defaults to <strong>10 minutes</strong>, in addition to the <code>VaryByUser</code> flag will construct a unique cache key for each user and return an additional <code>Vary: Cookie</code> HTTP Response Header.</p><h3 id="advanced-cacheinfo-customization" tabindex="-1">Advanced CacheInfo Customization <a class="header-anchor" href="#advanced-cacheinfo-customization" aria-hidden="true">#</a></h3><p>One limitation of using a .NET Attribute to specify caching behavior is that we&#39;re limited to using .NET constant primitives prohibiting the use of allowing custom lambda&#39;s to capture custom behavior. This is also the reason why we need to use <code>int</code> for <code>Duration</code> and <code>MaxAge</code> instead of a more appropriate <code>TimeSpan</code>.</p><p>But we can still intercept the way the <code>[CacheResponse]</code> attribute works behind-the-scenes and programmatically enhance it with custom logic. <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/CacheResponseAttribute.cs" target="_blank" rel="noopener noreferrer">CacheResponseAttribute</a> is just a wrapper around initializing a populated <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/CacheInfo.cs" target="_blank" rel="noopener noreferrer">CacheInfo</a> POCO that it drops into the <code>IRequest.Items</code> dictionary where it&#39;s visible to your Service and any remaining Filters in ServiceStack&#39;s <a href="/order-of-operations.html">Request Pipeline</a>. Essentially it&#39;s just doing this:</p><div class="language-csharp"><pre><code>req<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>Keywords<span class="token punctuation">.</span>CacheInfo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CacheInfo</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>The actual validation logic for processing the <code>CacheInfo</code> is encapsulated within the <code>HttpCacheFeature</code> Response Filter. This gives our Service a chance to modify it&#39;s behavior, e.g. in order to generically handle all Service responses the <code>[CacheResponse]</code> attribute uses the <code>IRequest.RawUrl</code> (the URL minus the domain) for the base CacheKey. Whilst using a RawUrl is suitable in uniquely identifying most requests, if QueryString params were sent in a different case or in a different order it would generate a different url and multiple caches for essentially the same request. We can remedy this behavior by changing the base CacheKey used which is just a matter retrieving the populated the <code>CacheInfo</code> and change the <code>KeyBase</code> to use the predictable <a href="/routing.html#reverse-routing">Reverse Routing</a><code>ToGetUrl()</code> API instead, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CacheResponse</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Duration <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">MyRequest</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> cacheInfo <span class="token operator">=</span> <span class="token punctuation">(</span>CacheInfo<span class="token punctuation">)</span><span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">GetItem</span><span class="token punctuation">(</span>Keywords<span class="token punctuation">.</span>CacheInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cacheInfo<span class="token punctuation">.</span>KeyBase <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">ToGetUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//custom cache key</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> Request<span class="token punctuation">.</span><span class="token function">HandleValidCache</span><span class="token punctuation">(</span>cacheInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>

    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Or generically for all cached Services by using a <a href="/request-and-response-filters.html">Global Request Filter</a>:</p><div class="language-csharp"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>GlobalRequestFiltersAsync<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> requestDto<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> cacheInfo <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">GetItem</span><span class="token punctuation">(</span>Keywords<span class="token punctuation">.</span>CacheInfo<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">CacheInfo</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheInfo<span class="token punctuation">?.</span>KeyBase <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cacheInfo<span class="token punctuation">.</span>KeyBase <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">ToGetUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//custom cache key</span>
        <span class="token keyword">await</span> req<span class="token punctuation">.</span><span class="token function">HandleValidCache</span><span class="token punctuation">(</span>cacheInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When using a Global Request Filter to customize caching behavior as above, your <code>[CacheResponse]</code> should have a priority <code>&lt;0</code> in order for it to be executed before any Global Request Filters, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CacheResponse</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Priority <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Duration <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCachedServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><p><code>HandleValidCache()</code> is used to re-validate the client&#39;s request with the new Cache Key and if it&#39;s determined the Client has a valid cache, will short-circuit the Service and return a <strong>304 NotModified</strong> Response.</p>__VP_STATIC_END__`,33),o=[p];function c(u,l,i,r,k,d){return a(),s("div",null,o)}var y=n(t,[["render",c]]);export{g as __pageData,y as default};
