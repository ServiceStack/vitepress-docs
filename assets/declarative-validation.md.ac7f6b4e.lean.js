import{_ as n,c as s,o as a,a as t}from"./app.14440598.js";const m='{"title":"Declarative Validation","description":"","frontmatter":{"slug":"declarative-validation","title":"Declarative Validation"},"headers":[{"level":2,"title":"Validation Feature","slug":"validation-feature"},{"level":2,"title":"Property Validators","slug":"property-validators"},{"level":3,"title":"Generic Validator Attributes","slug":"generic-validator-attributes"},{"level":3,"title":"Validated Validator Expressions","slug":"validated-validator-expressions"},{"level":3,"title":"Defining Multiple Validators","slug":"defining-multiple-validators"},{"level":3,"title":"Registering Custom Declarative Validators","slug":"registering-custom-declarative-validators"},{"level":3,"title":"Custom Script Validation","slug":"custom-script-validation"},{"level":3,"title":"Custom Error Codes and Messages","slug":"custom-error-codes-and-messages"},{"level":2,"title":"Type Validators","slug":"type-validators"},{"level":3,"title":"Type Script Conditions","slug":"type-script-conditions"},{"level":2,"title":"DB Validation Rules","slug":"db-validation-rules"},{"level":3,"title":"ServiceStack Studio Validators UI","slug":"servicestack-studio-validators-ui"}],"relativePath":"declarative-validation.md","lastUpdated":1634495307614}',p={},e=t(`__VP_STATIC_START__<p>Declarative validation facilitate greater declarative functionality around ServiceStack Services where all existing <a href="/validation.html#validation-feature">Fluent Validation Property Validators</a> can be annotated on Request DTOs using typed validation attributes which are decoupled from their Validator implementation so they&#39;re suitable to be annotated on impl-free Service Model DTOs and exported in <a href="/add-servicestack-reference.html">Add ServiceStack Reference</a> Types.</p><div class="info custom-block"><p class="custom-block-title">Tip</p><p>As they&#39;re decoupled the same rules could enable instant validation feedback on clients without server round trips</p></div><p>The validators are incorporated into ServiceStack&#39;s existing Fluent Validation model so it <a href="/world-validation.html">works with existing UI form binding</a>.</p><h2 id="validation-feature" tabindex="-1">Validation Feature <a class="header-anchor" href="#validation-feature" aria-hidden="true">#</a></h2><p>All of ServiceStack&#39;s Fluent Validation features is encapsulated in the <code>ValidationFeature</code> plugin which can be registered in your AppHost with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="property-validators" tabindex="-1">Property Validators <a class="header-anchor" href="#property-validators" aria-hidden="true">#</a></h2><p>The Property Validator attributes provide an alternative way to apply Request DTO validation rules, the best way to demonstrate them is showing the same example below implemented using Fluent Validation APIs:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidatorsValidator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AbstractValidator<span class="token punctuation">&lt;</span>ExampleValidators<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ExampleValidatorsValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreditCard<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreditCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">EmailAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Equal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;Equal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>ExclusiveBetween<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExclusiveBetween</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>GreaterThanOrEqual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GreaterThanOrEqualTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>GreaterThan<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GreaterThan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>InclusiveBetween<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InclusiveBetween</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LessThanOrEqual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LessThanOrEqualTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LessThan<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>NotEmpty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>NotEqual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NotEqual</span><span class="token punctuation">(</span><span class="token string">&quot;NotEqual&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Null<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>ScalePrecision<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ScalePrecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>RegularExpression<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span><span class="token string">@&quot;^[a-z]*$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>For each property validator above you can use a Typed Property Validation Attribute in the format <code>[Validate*]</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>ExampleValidator<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>EmptyResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateCreditCard</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CreditCard <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateEmail</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Empty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateEqual</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Equal&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Equal <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateLessThan</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> LessThan <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateLessThanOrEqual</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> LessThanOrEqual <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateGreaterThan</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> GreaterThan <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateGreaterThanOrEqual</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> GreaterThanOrEqual <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateExclusiveBetween</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ExclusiveBetween <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateInclusiveBetween</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> InclusiveBetween <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateExactLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Length <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEmpty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> NotEmpty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotEqual</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;NotEqual&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> NotEqual <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNull</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Null <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateScalePrecision</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> ScalePrecision <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateRegularExpression</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;^[a-z]*$&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> RegularExpression <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>All Typed Validator Attributes above are just providing a typed subclass wrapper around the generic <code>[Validate]</code>, so the implementation of the <code>[ValidateLessThan]</code> is just:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateLessThanAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValidateAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ValidateLessThanAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;LessThan(</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">value</span></span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="generic-validator-attributes" tabindex="-1">Generic Validator Attributes <a class="header-anchor" href="#generic-validator-attributes" aria-hidden="true">#</a></h3><p>So the same Typed Validator above is equivalent to using the untyped generic <code>[Validate]</code> attribute below:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>ExampleValidator<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>EmptyResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;CreditCard&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CreditCard <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Email&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Empty&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Empty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Equal(&#39;Equal&#39;)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Equal <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ExclusiveBetween(10, 20)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ExclusiveBetween <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;GreaterThanOrEqual(10)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> GreaterThanOrEqual <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;GreaterThan(10)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> GreaterThan <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;InclusiveBetween(10, 20)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> InclusiveBetween <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ExactLength(10)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Length <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;LessThanOrEqual(10)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> LessThanOrEqual <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;LessThan(10)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> LessThan <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;NotEmpty&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> NotEmpty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;NotEqual(&#39;NotEqual&#39;)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> NotEqual <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Null&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Null <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;RegularExpression(&#39;^[a-z]*$&#39;)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> RegularExpression <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ScalePrecision(1,1)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> ScalePrecision <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where the <strong>Validator Expression</strong> is a <code>#Script</code> Expression that returns a Fluent Validation <code>IPropertyValidator</code> defined in the built-in <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/ValidateScripts.cs" target="_blank" rel="noopener noreferrer">ValidateScripts.cs</a>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateScripts</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptMethods</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">Null</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NullValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EmptyValidator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">Empty</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> defaultValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EmptyValidator</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">Equal</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EqualValidator</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">NotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotNullValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotEmptyValidator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> defaultValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotEmptyValidator</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">NotEqual</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotEqualValidator</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">CreditCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreditCardValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AspNetCoreCompatibleEmailValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> min<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> max<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LengthValidator</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">ExactLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> length<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExactLengthValidator</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">MaximumLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> max<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MaximumLengthValidator</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">MinimumLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> min<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MinimumLengthValidator</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">InclusiveBetween</span><span class="token punctuation">(</span><span class="token class-name">IComparable</span> from<span class="token punctuation">,</span> <span class="token class-name">IComparable</span> to<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InclusiveBetweenValidator</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">ExclusiveBetween</span><span class="token punctuation">(</span><span class="token class-name">IComparable</span> from<span class="token punctuation">,</span> <span class="token class-name">IComparable</span> to<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExclusiveBetweenValidator</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">LessThan</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LessThanValidator</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">LessThanOrEqual</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LessThanOrEqualValidator</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">GreaterThan</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GreaterThanValidator</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">GreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GreaterThanOrEqualValidator</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">ScalePrecision</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> scale<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> precision<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ScalePrecisionValidator</span><span class="token punctuation">(</span>scale<span class="token punctuation">,</span> precision<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">RegularExpression</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> regex<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RegularExpressionValidator</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> RegexOptions<span class="token punctuation">.</span>Compiled<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="validated-validator-expressions" tabindex="-1">Validated Validator Expressions <a class="header-anchor" href="#validated-validator-expressions" aria-hidden="true">#</a></h3><p>Despite using untyped string Expressions, <strong>Validator</strong> expressions still provide early error detection as on <code>Startup</code> each <code>#Script</code> expression is evaluated and verified that it resolves to a valid <code>IPropertyValidator</code> instance otherwise fails with a <strong>Startup Exception</strong>. If the instance returned is valid it&#39;s merged with any other <code>AbstractValidator&lt;T&gt;</code> that may also be defined for the same Request DTO Type, where it lets you mix n&#39; match declarative attributes together with Fluent Validation rules.</p><h3 id="defining-multiple-validators" tabindex="-1">Defining Multiple Validators <a class="header-anchor" href="#defining-multiple-validators" aria-hidden="true">#</a></h3><p>You can specify multiple Property Validators should be applied within a single Validator expression by using <code>[]</code> Array notation, alternatively you can apply multiple Validate attributes and use C# syntax to combine them in a single line:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[NotNull,InclusiveBetween(13,100)]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> ValidateAge <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotNull</span><span class="token punctuation">,</span><span class="token class-name">ValidateInclusiveBetween</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> TypedAge <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="registering-custom-declarative-validators" tabindex="-1">Registering Custom Declarative Validators <a class="header-anchor" href="#registering-custom-declarative-validators" aria-hidden="true">#</a></h3><p>As <code>[Validate*]</code> attributes just execute a Script Method they&#39;re easily extensible by <a href="https://sharpscript.net/docs/methods" target="_blank" rel="noopener noreferrer">defining and register your own</a>, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyValidateScripts</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptMethods</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPropertyValidator</span> <span class="token function">Custom</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyCustomValidator</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which can be registered, either directly on your <a href="https://sharpscript.net/docs/sharp-pages" target="_blank" rel="noopener noreferrer">Script Pages plugin</a> if your AppHost uses one:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SharpPagesFeature</span> <span class="token punctuation">{</span>
    ScriptMethods <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomScriptMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Otherwise you can use the AppHost&#39;s new <code>ScriptContext</code> which adds it to the AppHost&#39;s empty <code>ScriptContext</code>:</p><div class="language-csharp"><pre><code>ScriptContext<span class="token punctuation">.</span>ScriptMethods<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomScriptMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p><code>ScriptContext</code> also returns <code>SharpPagesFeature</code> if registered, in which case both registration examples are equivalent</p></blockquote><p>After which you&#39;ll immediately be able to use it with the <code>[Validate]</code> attribute:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Custom(1)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Test <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre></div><p>Likewise you can create a typed Validate attribute around it which you can use instead:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateCustomAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValidateAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ValidateCustomAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Custom(</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">arg</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//...</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateCustom</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Test <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre></div><h3 id="custom-script-validation" tabindex="-1">Custom Script Validation <a class="header-anchor" href="#custom-script-validation" aria-hidden="true">#</a></h3><p>Fluent Validation Validators are a nice model for defining reusable validation rules however they can require a bit of boilerplate if you only need to define a one-off validation check. In these cases we can provide an even lighter weight solution by being able to defining our validation condition inline with <code>#Script</code> by specifying it in the <code>Condition</code> attribute, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>ExampleValidator<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>EmptyResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Condition <span class="token operator">=</span> <span class="token string">&quot;it.isOdd()&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IsOddCondition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Condition <span class="token operator">=</span> <span class="token string">&quot;it.isOdd() &amp;&amp; it.log10() &gt; 2&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IsOddAndOverTwoDigitsCondition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Condition <span class="token operator">=</span> <span class="token string">&quot;it.isOdd() || it.log10() &gt; 2&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IsOddOrOverTwoDigitsCondition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Script Conditions are valid if they return a <strong>truthy</strong> value and have access to the following arguments within their Expression:</p><ul><li><code>Request</code>: IRequest</li><li><code>dto</code>: Request DTO</li><li><code>field</code>: Property Name</li><li><code>it</code>: Property Value</li></ul><p>If you&#39;re reusing the same Expression a nice solution for maintaining them is in a static class where you can use the <code>AllConditions</code> and <code>AnyConditions</code> helper properties to compose individual checks, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ValidationConditions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> IsOdd <span class="token operator">=</span> <span class="token string">&quot;it.isOdd()&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> IsOver2Digits <span class="token operator">=</span> <span class="token string">&quot;it.log10() &gt; 2&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>ExampleValidator<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>EmptyResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Condition <span class="token operator">=</span> ValidationConditions<span class="token punctuation">.</span>IsOdd<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IsOddCondition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AllConditions <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> ValidationConditions<span class="token punctuation">.</span>IsOdd<span class="token punctuation">,</span> ValidationConditions<span class="token punctuation">.</span>IsOver2Digits <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IsOddAndOverTwoDigitsCondition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AnyConditions <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> ValidationConditions<span class="token punctuation">.</span>IsOdd<span class="token punctuation">,</span> ValidationConditions<span class="token punctuation">.</span>IsOver2Digits <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IsOddOrOverTwoDigitsCondition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Despite not using a validator all <code>#Script</code> Conditions are executed using a custom Fluent Validation <code>IPredicateValidator</code> (called <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/Validators.cs" target="_blank" rel="noopener noreferrer">ScriptConditionValidator</a>) so it able to slot right in with all other Property Validators.</p><h3 id="custom-error-codes-and-messages" tabindex="-1">Custom Error Codes and Messages <a class="header-anchor" href="#custom-error-codes-and-messages" aria-hidden="true">#</a></h3><p>The other aspect of validators that can be overridden declaratively are the <strong>ErrorCode</strong> and Error <strong>Message</strong> returned in ServiceStack&#39;s <a href="/error-handling.html">structured Error Response</a>, specified using the <code>ErrorCode</code> and <code>Message</code> Attribute properties:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>ExampleValidator<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>EmptyResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotNull</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ErrorCode <span class="token operator">=</span> <span class="token string">&quot;ZError&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CustomErrorCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token comment">// Overrides both ErrorCode &amp; Message</span>
    <span class="token punctuation">[</span><span class="token function">ValidateInclusiveBetween</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> ErrorCode <span class="token operator">=</span> <span class="token string">&quot;ZError&quot;</span><span class="token punctuation">,</span> 
        Message <span class="token operator">=</span> <span class="token string">&quot;{PropertyName} has to be between {From} and {To}, you: {PropertyValue}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomErrorCodeAndMessage <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Overrides ErrorCode &amp; uses Message from Validators</span>
    <span class="token punctuation">[</span><span class="token function">ValidateNotNull</span><span class="token punctuation">(</span>ErrorCode <span class="token operator">=</span> <span class="token string">&quot;RuleMessage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ErrorCodeRule <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Condition <span class="token operator">=</span> ValidationConditions<span class="token punctuation">.</span>IsOdd<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IsOddCondition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Validate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AllConditions <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> ValidationConditions<span class="token punctuation">.</span>IsOdd<span class="token punctuation">,</span> ValidationConditions<span class="token punctuation">.</span>IsOver2Digits <span class="token punctuation">}</span><span class="token punctuation">,</span> 
        ErrorCode <span class="token operator">=</span> <span class="token string">&quot;RuleMessage&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IsOddAndOverTwoDigitsCondition <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>All Error Messages can reference the <code>{PropertyName}</code> and <code>{PropertyValue}</code> in their messages along with any other MessageFormatter placeholders defined by the validator, e.g. the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/FluentValidation/Validators/InclusiveBetweenValidator.cs" target="_blank" rel="noopener noreferrer">InclusiveBetweenValidator.cs</a> used above also defines the <code>{From}</code>, <code>{To}</code> and <code>{Value}</code> placeholders.</p><p><code>#Script</code> Conditions can define their Error codes in the centralized <code>ConditionErrorCodes</code> Dictionary in the <code>ValidationFeature</code> Plugin where all <code>IsOdd</code> conditions will return the <strong>NotOdd</strong> custom error code.</p><p>The Error Messages can also be defined in the centralized <code>ErrorCodeMessages</code> Dictionary which defines the Error Messages that all failed <strong>NotOdd</strong> or <strong>RuleMessage</strong> rules will use, e.g:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationFeature</span> <span class="token punctuation">{</span>
    ConditionErrorCodes <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidationConditions<span class="token punctuation">.</span>IsOdd</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;NotOdd&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ErrorCodeMessages <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token string">&quot;NotOdd&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;{PropertyName} must be odd&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;RuleMessage&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;ErrorCodeMessages for RuleMessage&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="type-validators" tabindex="-1">Type Validators <a class="header-anchor" href="#type-validators" aria-hidden="true">#</a></h2><p>In addition to Property Validators there&#39;s also new support for <strong>Type Validators</strong> which can be declaratively added to perform top-level validation on Request DTOs.</p><p>They behave and function the same as Property Validators where you can use either the typed or the generic <code>[ValidateRequest]</code> attribute.</p><p>ServiceStack includes built-in Type Validator attributes for all <a href="/authentication-and-authorization.html#the-authenticate-attribute">Authorization Filter Attributes</a> but as they&#39;re decoupled from any implementation they can be safely annotated on Request DTOs without requiring any implementation dependencies.</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateIsAuthenticated</span></span><span class="token punctuation">]</span>            <span class="token comment">// or [ValidateRequest(&quot;IsAuthenticated&quot;)]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateIsAdmin</span></span><span class="token punctuation">]</span>                    <span class="token comment">// or [ValidateRequest(&quot;IsAdmin&quot;)]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateHasRole</span><span class="token attribute-arguments"><span class="token punctuation">(</span>role<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>              <span class="token comment">// or [ValidateRequest($&quot;HasRole(\`{role}\`)&quot;)]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateHasPermission</span><span class="token attribute-arguments"><span class="token punctuation">(</span>permission<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>  <span class="token comment">// or [ValidateRequest($&quot;HasPermission(\`{permission}\`)&quot;)</span>
</code></pre></div><p>Just like Property Validators, the Typed Validator attributes are wrappers around the generic <code>[ValidateRequest]</code> attribute, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateIsAuthenticatedAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValidateRequestAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ValidateIsAuthenticatedAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;IsAuthenticated&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which are also defined in <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/ValidateScripts.cs" target="_blank" rel="noopener noreferrer">ValidateScripts.cs</a> but instead return a <code>ITypeValidator</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateScripts</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptMethods</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ITypeValidator</span> <span class="token function">IsAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IsAuthenticatedValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ITypeValidator</span> <span class="token function">IsAuthenticated</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> provider<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IsAuthenticatedValidator</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ITypeValidator</span> <span class="token function">HasRole</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> role<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HasRolesValidator</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ITypeValidator</span> <span class="token function">HasRoles</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> roles<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HasRolesValidator</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ITypeValidator</span> <span class="token function">HasPermission</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> permission<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HasPermissionsValidator</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ITypeValidator</span> <span class="token function">HasPermissions</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> permission<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HasPermissionsValidator</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ITypeValidator</span> <span class="token function">IsAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HasRolesValidator</span><span class="token punctuation">(</span>RoleNames<span class="token punctuation">.</span>Admin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="custom-type-attributes" tabindex="-1">Custom Type Attributes <a class="header-anchor" href="#custom-type-attributes" aria-hidden="true">#</a></h4><p>The easiest way to create a an <code>ITypeValidator</code> is to inherit from the <code>TypeValidator</code> base class, including both the <strong>ErrorCode</strong> and <strong>Error Message</strong> failed requests should return.</p><p>An example where you might use one is when testing the pre-condition state of an entity which doesn&#39;t logically map to a property. In the example below we&#39;re validating to ensure that the entity doesn&#39;t have any Foreign Key References:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoRockstarAlbumReferences</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TypeValidator</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">NoRockstarAlbumReferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;HasForeignKeyReferences&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Has RockstarAlbum References&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">IsValidAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> dto<span class="token punctuation">,</span> <span class="token class-name">IRequest</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//Example of using compiled accessor delegates to access \`Id\` property</span>
        <span class="token comment">//var id = TypeProperties.Get(dto.GetType()).GetPublicGetter(&quot;Id&quot;)(dto).ConvertTo&lt;int&gt;();</span>

        <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>IHasId<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>dto<span class="token punctuation">)</span><span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> HostContext<span class="token punctuation">.</span>AppHost<span class="token punctuation">.</span><span class="token function">GetDbConnection</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ExistsAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RockstarAlbum<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>RockstarId <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Then we need to register it as a custom script method to be able to reference it in <code>[ValidateRequest]</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptMethods</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ITypeValidator</span> <span class="token function">NoRockstarAlbumReferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NoRockstarAlbumReferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which we can now declaratively reference by script method name:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateRequest</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>NoRockstarAlbumReferences<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>RockstarWithIdResponse<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IHasId<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotNull</span></span><span class="token punctuation">]</span> <span class="token comment">//doesn&#39;t get validated if ValidateRequest is invalid</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> NotNull <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Type Validators are executed before any property validators, which if failed wont be executed.</p><h3 id="type-script-conditions" tabindex="-1">Type Script Conditions <a class="header-anchor" href="#type-script-conditions" aria-hidden="true">#</a></h3><p>Type Validators can also execute <code>#Script</code> expressions where we could implement the above FK check inline using a sync <a href="https://sharpscript.net/docs/db-scripts" target="_blank" rel="noopener noreferrer">Database Script</a>:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateRequest</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Condition <span class="token operator">=</span> <span class="token string">&quot;!dbExistsSync(&#39;SELECT * FROM RockstarAlbum WHERE RockstarId = @Id&#39;, { it.Id })&quot;</span><span class="token punctuation">,</span> 
    ErrorCode <span class="token operator">=</span> <span class="token string">&quot;HasForeignKeyReferences&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>RockstarWithIdResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateNotNull</span></span><span class="token punctuation">]</span> <span class="token comment">//doesn&#39;t get validated if ValidateRequest is invalid</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> NotNull <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>the condition needs to return a <strong>truthy</strong> value so you&#39;d need to use the sync DB Script APIs to return a boolean instead of an async Task.</p></div><p>Type Validators can also specify custom Error Codes and Error Messages, they can also specify a custom HTTP Error StatusCode that failed requests should return.</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidateRequest</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Condition <span class="token operator">=</span> <span class="token string">&quot;it.Test.isOdd() &amp;&amp; it.Test.log10() &gt; 2&quot;</span><span class="token punctuation">,</span>
    ErrorCode <span class="token operator">=</span> <span class="token string">&quot;NotOddAndOver2Decimals&quot;</span><span class="token punctuation">,</span> Message <span class="token operator">=</span> <span class="token string">&quot;Pre-condition Failed&quot;</span><span class="token punctuation">,</span> StatusCode <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleValidators</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICreateDb<span class="token punctuation">&lt;</span>ExampleValidator<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span>EmptyResponse<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><h2 id="db-validation-rules" tabindex="-1">DB Validation Rules <a class="header-anchor" href="#db-validation-rules" aria-hidden="true">#</a></h2><p>Both Property and Type Validators can also be sourced from a <strong>dynamic source</strong> with both <strong>Memory</strong> and <strong>RDBMS</strong> implementations included along with a Management HTTP API to be able to manage them remotely. Dynamic Validation Rules are cacheable locally giving them the same performance profile as declarative attributes in code whose caches are only invalidated once they&#39;ve been updated, upon which they&#39;ll come into immediate effect.</p><p>Here&#39;s a <a href="/modular-startup.html">Modular Startup</a> class you can drop into a ServiceStack Project to enable maintaining declarative Validation Rules in your configured RDBMS:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureValidation</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IConfigureServices</span><span class="token punctuation">,</span> <span class="token class-name">IConfigureAppHost</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Add support for dynamically generated db rules</span>
        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidationSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteValidationSource</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IAppHost</span> appHost<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidationSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>DB Validation rules can be added programmatically, this example below adds 1x Type Validator and 2x Property Validators to the <code>DynamicRules</code> Request DTO:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> validationSource <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidationSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
validationSource<span class="token punctuation">.</span><span class="token function">SaveValidationRulesAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ValidationRule<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationRule</span> <span class="token punctuation">{</span> Type  <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>DynamicRules<span class="token punctuation">)</span><span class="token punctuation">,</span> Validator <span class="token operator">=</span> <span class="token string">&quot;IsAuthenticated&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationRule</span> <span class="token punctuation">{</span> Type  <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>DynamicRules<span class="token punctuation">)</span><span class="token punctuation">,</span> Validator <span class="token operator">=</span> <span class="token string">&quot;NotNull&quot;</span><span class="token punctuation">,</span> 
                         Field <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>DynamicRules<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationRule</span> <span class="token punctuation">{</span> Type  <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>DynamicRules<span class="token punctuation">)</span><span class="token punctuation">,</span> Validator <span class="token operator">=</span> <span class="token string">&quot;InclusiveBetween(13,100)&quot;</span><span class="token punctuation">,</span> 
                         Field <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>DynamicRules<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>Admin</strong> Users can also manage these rules remotely using the <code>ModifyValidationRules</code> Service defined below:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModifyValidationRules</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturnVoid</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> AuthSecret <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>ValidationRule<span class="token punctuation">&gt;</span></span> SaveRules <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> DeleteRuleIds <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> SuspendRuleIds <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> UnsuspendRuleIds <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> ClearCache <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="servicestack-studio-validators-ui" tabindex="-1">ServiceStack Studio Validators UI <a class="header-anchor" href="#servicestack-studio-validators-ui" aria-hidden="true">#</a></h3><p>ServiceStack Studio utilizes the above <code>ModifyValidationRules</code> for its support for <a href="/studio.html#validators-ui">managing DB Validation rules</a>, with an optimized UX that lets you quickly select &amp; configure all built-in &amp; registered property &amp; type validators where they&#39;re instantly applied.</p>__VP_STATIC_END__`,84),o=[e];function c(l,u,i,k,r,d){return a(),s("div",null,o)}var g=n(p,[["render",c]]);export{m as __pageData,g as default};
