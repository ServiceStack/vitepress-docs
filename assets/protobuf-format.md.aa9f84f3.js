import{_ as a,c as e,o as t,a as s,b as n,e as o}from"./app.14440598.js";const w='{"title":"ProtoBuf Format","description":"","frontmatter":{"slug":"protobuf-format","title":"ProtoBuf Format"},"headers":[{"level":2,"title":"Installing via NuGet","slug":"installing-via-nuget"},{"level":2,"title":"Registering ProtoBuf Manually","slug":"registering-protobuf-manually"},{"level":2,"title":"End to End happiness","slug":"end-to-end-happiness"}],"relativePath":"protobuf-format.md","lastUpdated":1634495308426}',p={},c=s('<p><a href="http://code.google.com/p/protobuf/" target="_blank" rel="noopener noreferrer">Protocol Buffers</a> is a high-performance, compact binary wire format invented by Google who use it internally so they can communicate with their internal network services at very high speed.</p><p>For .NET <a href="http://twitter.com/marcgravell" target="_blank" rel="noopener noreferrer">@marcgravell</a> has developed <strong><a href="http://code.google.com/p/protobuf-net/" target="_blank" rel="noopener noreferrer">protobuf-net</a></strong> - a robust implementation of the Protocol Buffers wire format that provides the <a href="http://www.servicestack.net/benchmarks/#northwind-serializer" target="_blank" rel="noopener noreferrer">fastest serialization</a> option available for .NET.</p><p>ProtoBuf is a great addition to your ServiceStack&#39;s web services as it provides the <strong>fastest binary serializer</strong> to go along with the <strong>2 fastest text serializers</strong> for .NET in <a href="http://www.servicestack.net/mythz_blog/?p=344" target="_blank" rel="noopener noreferrer">JSON</a> and <a href="http://www.servicestack.net/mythz_blog/?p=176" target="_blank" rel="noopener noreferrer">JSV</a> formats (already included by default).</p><p>Otherwise another fast binary serializer that supports attribute-less POCOs is the new <a href="/messagepack-format.html">MessagePack Format</a>.</p><h2 id="installing-via-nuget" tabindex="-1">Installing via NuGet <a class="header-anchor" href="#installing-via-nuget" aria-hidden="true">#</a></h2><p>As it requires an external <strong>protobuf-net.dll</strong> dependency ProtoBuf support is not automatically bundled inside ServiceStack, but it is easily installed with the <a href="https://nuget.org/packages/ServiceStack.ProtoBuf" target="_blank" rel="noopener noreferrer">ServiceStack.ProtoBuf</a> NuGet package:</p>',6),r=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.ProtoBuf" Version="5.*" />')]),o(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),l=s(`<p>After the NuGet Package is added to your Project, enable the ProtoBuf format in your <code>AppHost</code> with:</p><div class="language-cs"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProtoBufFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The NuGet plugin also includes the <strong>ProtoBufServiceClient</strong> client below so you can easily call it from any C# Client.</p><h2 id="registering-protobuf-manually" tabindex="-1">Registering ProtoBuf Manually <a class="header-anchor" href="#registering-protobuf-manually" aria-hidden="true">#</a></h2><p>The API for adding custom Formats and Content Types in ServiceStack is so easy we use it ourselves \u{1F603} Where the CSV, HTML, Markdown and now ProtoBuf format are all registered in the same way by registering the new ContentType with your AppHost&#39;s <strong>ContentTypeFilters</strong>.</p><p>Adding support for ProtoBuf is equally simple. It can be added by calling a single method:</p><div class="language-csharp"><pre><code>appHost<span class="token punctuation">.</span>ContentTypeFilters<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>ProtoBuf<span class="token punctuation">,</span>
    <span class="token punctuation">(</span>reqCtx<span class="token punctuation">,</span> res<span class="token punctuation">,</span> stream<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ProtoBuf<span class="token punctuation">.</span>Serializer<span class="token punctuation">.</span>NonGeneric<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">,</span>
    ProtoBuf<span class="token punctuation">.</span>Serializer<span class="token punctuation">.</span>NonGeneric<span class="token punctuation">.</span>Deserialize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This makes the ProtoBuf format available in all of ServiceStack:</p><ul><li>A new <strong>X-PROTOBUF</strong> column added for all services on the metadata pages</li><li>New <code>/x-protobuf/syncreply/{Service}</code> and <code>/x-protobuf/asynconeway/{Service}</code> pre-defined routes</li><li>Clients can request it with <code>Accept: application/x-protobuf</code> HTTP Header or <strong>?format=x-protobuf</strong> query string</li></ul><h2 id="end-to-end-happiness" tabindex="-1">End to End happiness <a class="header-anchor" href="#end-to-end-happiness" aria-hidden="true">#</a></h2><p>However simply registering ProtoBuf is not enough to ensure end-to-end happiness so we also make it easy to create your own generic strong-typed ProtoBuf ServiceClient with the following code:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtoBufServiceClient</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServiceClientBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Format
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;x-protobuf&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">ProtoBufServiceClient</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> baseUri<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">SetBaseUri</span><span class="token punctuation">(</span>baseUri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">ProtoBufServiceClient</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> syncReplyBaseUri<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> asyncOneWayBaseUri<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>syncReplyBaseUri<span class="token punctuation">,</span> asyncOneWayBaseUri<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SerializeToStream</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> request<span class="token punctuation">,</span> <span class="token class-name">Stream</span> stream<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Serializer<span class="token punctuation">.</span>NonGeneric<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">DeserializeFromStream</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Stream</span> stream<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Serializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ContentType
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> MimeTypes<span class="token punctuation">.</span>ProtoBuf<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">StreamDeserializerDelegate</span> StreamDeserializer
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Deserialize<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">Stream</span> source<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Serializer<span class="token punctuation">.</span>NonGeneric<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This now lets you call each of your services with a Strong Typed service client of your very own:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProtoBufServiceClient</span><span class="token punctuation">(</span>BaseUri<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Send</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HelloResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hello</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;ProtoBuf&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The above ProtoBufServiceClient works like all the other strong-typed ServiceClients in ServiceStack where it also implements <code>IServiceClient</code> and <code>IRestClient</code> interfaces so you can easily swap out your existing clients to take advantage of the performance boost offered by ProtoBuf with minimal effort!</p><h1 id="community-resources" tabindex="-1">Community Resources <a class="header-anchor" href="#community-resources" aria-hidden="true">#</a></h1><ul><li><a href="http://stevenhollidge.blogspot.com/2012/04/servicestack-rest-with-protobuf.html" target="_blank" rel="noopener noreferrer">REST with ProtoBuf - Web Services in 5 easy steps</a> by <a href="https://twitter.com/stevenhollidge" target="_blank" rel="noopener noreferrer">@stevenhollidge</a></li></ul>`,17),i=[c,r,l];function u(k,d,f,g,h,y){return t(),e("div",null,i)}var v=a(p,[["render",u]]);export{w as __pageData,v as default};
