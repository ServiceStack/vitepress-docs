import{_ as a,c as t,o as e,a as s,b as n,e as p}from"./app.14440598.js";const b='{"title":"PocoDynamo","description":"","frontmatter":{"title":"PocoDynamo"},"headers":[{"level":2,"title":"First class support for reusable, code-first POCOs","slug":"first-class-support-for-reusable-code-first-pocos"},{"level":3,"title":"AutoQuery DynamoDB","slug":"autoquery-dynamodb"},{"level":3,"title":"Quick Preview","slug":"quick-preview"},{"level":2,"title":"Features","slug":"features"},{"level":2,"title":"Download","slug":"download"},{"level":3,"title":"Source Code","slug":"source-code"},{"level":3,"title":"Download Local DynamoDB","slug":"download-local-dynamodb"},{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Creating a Table with PocoDynamo","slug":"creating-a-table-with-pocodynamo"},{"level":3,"title":"Complete PocoDynamo TODO example","slug":"complete-pocodynamo-todo-example"},{"level":3,"title":"Creating a DynamoDB Table using AmazonDynamoDBClient","slug":"creating-a-dynamodb-table-using-amazondynamodbclient"},{"level":2,"title":"Managed DynamoDB Client","slug":"managed-dynamodb-client"},{"level":2,"title":"AutoIncrement Primary Keys","slug":"autoincrement-primary-keys"},{"level":2,"title":"Putting items with PocoDynamo","slug":"putting-items-with-pocodynamo"},{"level":2,"title":"Putting items with AmazonDynamoDBClient","slug":"putting-items-with-amazondynamodbclient"},{"level":2,"title":"Getting Items with PocoDynamo","slug":"getting-items-with-pocodynamo"},{"level":2,"title":"Getting Items with AWSSDK","slug":"getting-items-with-awssdk"},{"level":2,"title":"Deleting an Item with PocoDynamo","slug":"deleting-an-item-with-pocodynamo"},{"level":2,"title":"Deleting an Item with AWSSDK","slug":"deleting-an-item-with-awssdk"},{"level":2,"title":"Updating an Item with PocoDynamo","slug":"updating-an-item-with-pocodynamo"},{"level":3,"title":"Update with Conditional Expressions","slug":"update-with-conditional-expressions"},{"level":2,"title":"Querying","slug":"querying"},{"level":3,"title":"QueryExpressions are QueryRequests","slug":"queryexpressions-are-queryrequests"},{"level":3,"title":"Query Usage","slug":"query-usage"},{"level":3,"title":"Executing Queries","slug":"executing-queries"},{"level":3,"title":"Scan Operations","slug":"scan-operations"},{"level":3,"title":"Related Items","slug":"related-items"},{"level":2,"title":"Related Data","slug":"related-data"},{"level":3,"title":"Related Tables","slug":"related-tables"},{"level":3,"title":"Querying Related Tables","slug":"querying-related-tables"},{"level":3,"title":"Local Secondary Indexes","slug":"local-secondary-indexes"},{"level":3,"title":"Typed Local Indexes","slug":"typed-local-indexes"},{"level":3,"title":"Global Secondary Indexes","slug":"global-secondary-indexes"},{"level":2,"title":"Scan Requests","slug":"scan-requests"},{"level":2,"title":"Query and Scan Expressions","slug":"query-and-scan-expressions"},{"level":3,"title":"Custom Filter Expressions","slug":"custom-filter-expressions"},{"level":3,"title":"Custom Select Projections","slug":"custom-select-projections"},{"level":3,"title":"Advanced LINQ Expressions","slug":"advanced-linq-expressions"},{"level":3,"title":"Defaults and Custom Behavior","slug":"defaults-and-custom-behavior"},{"level":2,"title":"Table definition","slug":"table-definition"},{"level":3,"title":"Specifying a Hash Key","slug":"specifying-a-hash-key"},{"level":3,"title":"Specifying a Range Key","slug":"specifying-a-range-key"},{"level":2,"title":"Examples","slug":"examples"},{"level":3,"title":"DynamoDbCacheClient","slug":"dynamodbcacheclient"},{"level":3,"title":"DynamoDbAuthRepository","slug":"dynamodbauthrepository"},{"level":3,"title":"DynamoDbTests","slug":"dynamodbtests"},{"level":3,"title":"AWS Apps","slug":"aws-apps"},{"level":2,"title":"IPocoClient API","slug":"ipococlient-api"},{"level":3,"title":"PocoDynamo Extension helpers","slug":"pocodynamo-extension-helpers"}],"relativePath":"aws-pocodynamo.md","lastUpdated":1634495307614}',o={},c=s(`__VP_STATIC_START__<p>is a highly productive, feature-rich, typed .NET client which extends <a href="http://stackoverflow.com/a/32940275/85785" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s Simple POCO life</a> by enabling re-use of your code-first data models with Amazon&#39;s industrial strength and highly-scalable NoSQL <a href="https://aws.amazon.com/dynamodb/" target="_blank" rel="noopener noreferrer">DynamoDB</a>.</p><h2 id="first-class-support-for-reusable-code-first-pocos" tabindex="-1">First class support for reusable, code-first POCOs <a class="header-anchor" href="#first-class-support-for-reusable-code-first-pocos" aria-hidden="true">#</a></h2><p>PocoDynamo is conceptually similar to ServiceStack&#39;s other code-first <a href="https://github.com/ServiceStack/ServiceStack.OrmLite" target="_blank" rel="noopener noreferrer">OrmLite</a> and <a href="https://github.com/ServiceStack/ServiceStack.Redis" target="_blank" rel="noopener noreferrer">Redis</a> clients by providing a high-fidelity, managed client that enhances AWSSDK&#39;s low-level <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/UsingAWSsdkForDotNet.html" target="_blank" rel="noopener noreferrer">IAmazonDynamoDB client</a>, with rich, native support for intuitively mapping your re-usable code-first POCO Data models into <a href="http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Types.html" target="_blank" rel="noopener noreferrer">DynamoDB Data Types</a>.</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/aws/pocodynamo/related-customer.png" alt=""></p><h3 id="autoquery-dynamodb" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack/wiki/AutoQuery-DynamoDB" target="_blank" rel="noopener noreferrer">AutoQuery DynamoDB</a> <a class="header-anchor" href="#autoquery-dynamodb" aria-hidden="true">#</a></h3><p>Built on top of PocoDynamo, <a href="https://github.com/ServiceStack/ServiceStack/wiki/AutoQuery-Data" target="_blank" rel="noopener noreferrer">AutoQuery Data&#39;s</a><code>DynamoDbSource</code> provides the most productive development experience for effortlessly creating rich, queryable and optimized Services for DynamoDB data stores using only a typed Request DTO.</p><h3 id="quick-preview" tabindex="-1">Quick Preview <a class="header-anchor" href="#quick-preview" aria-hidden="true">#</a></h3><p>A quick CRUD preview of <code>PocoDynaamo</code> feature-rich high-level Typed client:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Amazon</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Amazon<span class="token punctuation">.</span>DynamoDBv2</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">ServiceStack</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">ServiceStack<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">ServiceStack<span class="token punctuation">.</span>Aws<span class="token punctuation">.</span>DynamoDb</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">ServiceStack<span class="token punctuation">.</span>DataAnnotations</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> awsDb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AmazonDynamoDBClient</span><span class="token punctuation">(</span><span class="token string">&quot;keyId&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AmazonDynamoDBConfig</span> <span class="token punctuation">{</span> ServiceURL<span class="token operator">=</span><span class="token string">&quot;http://localhost:8000&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoDynamo</span><span class="token punctuation">(</span>awsDb<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Todo</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Content <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Done <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeleteTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Delete existing Todo Table (if any)</span>
db<span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Creates Todo DynamoDB Table</span>

<span class="token class-name"><span class="token keyword">var</span></span> newTodo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Todo</span> <span class="token punctuation">{</span>
    Content <span class="token operator">=</span> <span class="token string">&quot;Learn PocoDynamo&quot;</span><span class="token punctuation">,</span>
    Order <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">PutItem</span><span class="token punctuation">(</span>newTodo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> savedTodo <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>newTodo<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token string">&quot;Saved Todo: {0}&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>savedTodo<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

savedTodo<span class="token punctuation">.</span>Done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">PutItem</span><span class="token punctuation">(</span>savedTodo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> updatedTodo <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>newTodo<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token string">&quot;Updated Todo: {0}&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>updatedTodo<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeleteItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>newTodo<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> remainingTodos <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token string">&quot;No more Todos: {0}&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>remainingTodos<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h2><h4 id="advanced-idiomatic-net-client" tabindex="-1">Advanced idiomatic .NET client <a class="header-anchor" href="#advanced-idiomatic-net-client" aria-hidden="true">#</a></h4><p>PocoDynamo provides an idiomatic API that leverages .NET advanced language features with streaming API&#39;s returning <code>IEnumerable&lt;T&gt;</code> lazily evaluated responses that transparently performs multi-paged requests behind-the-scenes whilst the resultset is iterated. It high-level API&#39;s provides a clean lightweight adapter to transparently map between .NET built-in data types and DynamoDB&#39;s low-level attribute values. Its efficient batched API&#39;s take advantage of DynamoDB&#39;s <code>BatchWriteItem</code> and <code>BatchGetItem</code> batch operations to perform the minimum number of requests required to implement each API.</p><h4 id="typed-linq-provider-for-query-and-scan-operations" tabindex="-1">Typed, LINQ provider for Query and Scan Operations <a class="header-anchor" href="#typed-linq-provider-for-query-and-scan-operations" aria-hidden="true">#</a></h4><p>PocoDynamo also provides rich, typed LINQ-like querying support for constructing DynamoDB Query and Scan operations, dramatically reducing the effort to query DynamoDB, enhancing readability whilst benefiting from Type safety in .NET.</p><h4 id="declarative-tables-and-indexes" tabindex="-1">Declarative Tables and Indexes <a class="header-anchor" href="#declarative-tables-and-indexes" aria-hidden="true">#</a></h4><p>Behind the scenes DynamoDB is built on a dynamic schema which whilst open and flexible, can be cumbersome to work with directly in typed languages like C#. PocoDynamo bridges the gap and lets your app bind to impl-free and declarative POCO data models that provide an ideal high-level abstraction for your business logic, hiding a lot of the complexity of working with DynamoDB - dramatically reducing the code and effort required whilst increasing the readability and maintainability of your Apps business logic.</p><p>It includes optimal support for defining simple local indexes which only require declaratively annotating properties to index with an <code>[Index]</code> attribute.</p><p>Typed POCO Data Models can be used to define more complex Local and Global DynamoDB Indexes by implementing <code>IGlobalIndex&lt;Poco&gt;</code> or <code>ILocalIndex&lt;Poco&gt;</code> interfaces which PocoDynamo uses along with the POCOs class structure to construct Table indexes at the same time it creates the tables.</p><p>In this way the Type is used as a DSL to define DynamoDB indexes where the definition of the index is decoupled from the imperative code required to create and query it, reducing the effort to create them whilst improving the visualization and understanding of your DynamoDB architecture which can be inferred at a glance from the POCO&#39;s Type definition. PocoDynamo also includes first-class support for constructing and querying Global and Local Indexes using a familiar, typed LINQ provider.</p><h4 id="resilient" tabindex="-1">Resilient <a class="header-anchor" href="#resilient" aria-hidden="true">#</a></h4><p>Each operation is called within a managed execution which transparently absorbs the variance in cloud services reliability with automatic retries of temporary errors, using an exponential backoff as recommended by Amazon.</p><h4 id="enhances-existing-apis" tabindex="-1">Enhances existing APIs <a class="header-anchor" href="#enhances-existing-apis" aria-hidden="true">#</a></h4><p>PocoDynamo API&#39;s are a lightweight layer modeled after DynamoDB API&#39;s making it predictable the DynamoDB operations each API calls under the hood, retaining your existing knowledge investment in DynamoDB. When more flexibility is needed you can access the low-level <code>AmazonDynamoDBclient from the </code>IPocoDynamo.DynamoDb\` property and talk with it directly.</p><p>Whilst PocoDynamo doesn&#39;t save you for needing to learn DynamoDB, its deep integration with .NET and rich support for POCO&#39;s smoothes out the impedance mismatches to enable an type-safe, idiomatic, productive development experience.</p><h4 id="high-level-features" tabindex="-1">High-level features <a class="header-anchor" href="#high-level-features" aria-hidden="true">#</a></h4><p>PocoDynamo includes its own high-level features to improve the re-usability of your POCO models and the development experience of working with DynamoDB with support for Auto Incrementing sequences, Query expression builders, auto escaping and converting of Reserved Words to placeholder values, configurable converters, scoped client configurations, related items, conventions, aliases, dep-free data annotation attributes and more.</p><h2 id="download" tabindex="-1">Download <a class="header-anchor" href="#download" aria-hidden="true">#</a></h2><p>PocoDynamo is contained in ServiceStack&#39;s AWS NuGet package:</p>__VP_STATIC_END__`,28),l=n("div",{class:"package-reference-box"},[n("div",{class:"flex"},[n("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[n("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[n("p",null,[n("code",null,'<PackageReference Include="ServiceStack.Aws" Version="5.*" />')]),p(`
`)])]),n("div",{class:"flex-shrink"},[n("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),n("b")])]),n("div",{class:"copy-text w-full text-right h-6"})],-1),u=s(`__VP_STATIC_START__<blockquote><p>PocoDynamo has a 10 Tables <a href="https://servicestack.net/download#free-quotas" target="_blank" rel="noopener noreferrer">free-quota usage</a> limit which can be unlocked with a <a href="https://servicestack.net/pricing" target="_blank" rel="noopener noreferrer">commercial license key</a>.</p></blockquote><p>To get started we&#39;ll need to create an instance of <code>AmazonDynamoDBClient</code> with your AWS credentials and Region info:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> awsDb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AmazonDynamoDBClient</span><span class="token punctuation">(</span>AWS_ACCESS_KEY<span class="token punctuation">,</span> AWS_SECRET_KEY<span class="token punctuation">,</span> RegionEndpoint<span class="token punctuation">.</span>USEast1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then to create a PocoDynamo client pass the configured AmazonDynamoDBClient instance above:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoDynamo</span><span class="token punctuation">(</span>awsDb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Clients are Thread-Safe so you can register them as a singleton and share the same instance throughout your App</p></div><h3 id="source-code" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack.Aws/tree/master/src/ServiceStack.Aws/DynamoDb" target="_blank" rel="noopener noreferrer">Source Code</a> <a class="header-anchor" href="#source-code" aria-hidden="true">#</a></h3><p>The Source Code for PocoDynamo is maintained in <a href="https://github.com/ServiceStack/ServiceStack.Aws/" target="_blank" rel="noopener noreferrer">ServiceStack.Aws</a> repository.</p><h3 id="download-local-dynamodb" tabindex="-1">Download Local DynamoDB <a class="header-anchor" href="#download-local-dynamodb" aria-hidden="true">#</a></h3><p>It&#39;s recommended to download <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html#Tools.DynamoDBLocal.DownloadingAndRunning" target="_blank" rel="noopener noreferrer">local DynamoDB</a> as it lets you develop against a local DynamoDB instance, saving you needing a network connection or AWS account.</p><p>You can connect to your local DynamoDB instance by configuring the <code>AmazonDynamoDBClient</code> to point to the default url where Local DynamoDB instance is running:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> awsDb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AmazonDynamoDBClient</span><span class="token punctuation">(</span><span class="token string">&quot;keyId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AmazonDynamoDBConfig</span> <span class="token punctuation">{</span>
    ServiceURL <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8000&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoDynamo</span><span class="token punctuation">(</span>awsDb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>We&#39;ve found the latest version of Local DynamoDB to be a robust and fast substitute for AWS, that eliminates waiting times for things like creating and dropping tables whilst only slightly deviating from the capabilities of AWS where it doesn&#39;t always include the additional limitations imposed when hosted on AWS.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>To illustrate how PocoDynamo simplifies working with DynamoDB, we&#39;ll walk-through creating and retrieving the Simple <a href="https://github.com/ServiceStackApps/AwsApps/blob/04dea6472fd73ea2e55f1aa748fff6e8784b339c/src/AwsApps/todo/TodoService.cs#L9" target="_blank" rel="noopener noreferrer">Todo model</a> used in the <a href="http://awsapps.servicestack.net/todo/" target="_blank" rel="noopener noreferrer">DynamoDB-powered AWS Todo Example</a> and compare it against the code required when using AWSSDK&#39;s <code>IAmazonDynamoDB</code> client directly.</p><p>The simple <code>Todo</code> POCO is the same data model used to store TODO&#39;s in every major RDBMS&#39;s with <a href="https://github.com/ServiceStack/ServiceStack.OrmLite" target="_blank" rel="noopener noreferrer">OrmLite</a>, in Redis with <a href="https://github.com/ServiceStack/ServiceStack.Redis" target="_blank" rel="noopener noreferrer">ServiceStack.Redis</a> as well as every supported <a href="https://github.com/ServiceStack/ServiceStack/wiki/Caching" target="_blank" rel="noopener noreferrer">Caching provider</a>.</p><p>PocoDynamo increases the re-use of <code>Todo</code> again which can now be used to store TODO&#39;s in DynamoDB as well:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Todo</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Content <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Done <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="creating-a-table-with-pocodynamo" tabindex="-1">Creating a Table with PocoDynamo <a class="header-anchor" href="#creating-a-table-with-pocodynamo" aria-hidden="true">#</a></h3><p>PocoDynamo enables a declarative code-first approach where it&#39;s able to create DynamoDB Table schemas from just your POCO class definition. Whilst you could call <code>db.CreateTable&lt;Todo&gt;()</code> API and create the Table directly, the recommended approach is instead to register all the tables your App uses with PocoDynamo on Startup, then just call <code>InitSchema()</code> which will go through and create all missing tables:</p><div class="language-csharp"><pre><code><span class="token comment">//PocoDynamo</span>
<span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoDynamo</span><span class="token punctuation">(</span>awsDb<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">GetTableNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In this way your App ends up in the same state with all tables created if it was started with <strong>no tables</strong>, <strong>all tables</strong> or only a <strong>partial list</strong> of tables. After the tables are created we query DynamoDB to dump its entire list of Tables, which if you started with an empty DynamoDB instance would print the single <strong>Todo</strong> table name to the Console:</p><div class="language-js"><pre><code><span class="token punctuation">[</span>
    Todo
<span class="token punctuation">]</span>
</code></pre></div><h3 id="complete-pocodynamo-todo-example" tabindex="-1">Complete PocoDynamo TODO example <a class="header-anchor" href="#complete-pocodynamo-todo-example" aria-hidden="true">#</a></h3><p>Before going through the details of how it all works under-the-hood, here&#39;s a quick overview of what it looks likes to use PocoDynamo for developing a simple CRUD App. The ServiceStack <a href="https://github.com/ServiceStackApps/AwsApps/blob/master/src/AwsApps/todo/TodoService.cs" target="_blank" rel="noopener noreferrer">TodoService</a> below contains the full server implementation required to implement the REST API to power <a href="http://todomvc.com/examples/backbone/" target="_blank" rel="noopener noreferrer">Backbone&#39;s famous TODO App</a>, rewritten to store all TODO items in DynamoDB:</p><div class="language-csharp"><pre><code><span class="token comment">//PocoDynamo</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPocoDynamo</span> Dynamo <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">Todo</span> todo<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>Id <span class="token operator">!=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">long</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Dynamo<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Dynamo<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Todo</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token class-name">Todo</span> todo<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Dynamo<span class="token punctuation">.</span><span class="token function">PutItem</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> todo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Todo</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token class-name">Todo</span> todo<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Post</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name">Todo</span> todo<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Dynamo<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeleteItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>We can see <code>IPocoDynamo</code> is just a normal IOC dependency that provides high-level API&#39;s that work directly with POCO&#39;s and built-in .NET data types, enabling the minimum effort to store, get and delete data from DynamoDB.</p><h3 id="creating-a-dynamodb-table-using-amazondynamodbclient" tabindex="-1">Creating a DynamoDB Table using AmazonDynamoDBClient <a class="header-anchor" href="#creating-a-dynamodb-table-using-amazondynamodbclient" aria-hidden="true">#</a></h3><p>The equivalent imperative code to create the Todo DynamoDB table above would require creating executing the <code>CreateTableRequest</code> below:</p><div class="language-csharp"><pre><code><span class="token comment">//AWSSDK</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateTableRequest</span>
<span class="token punctuation">{</span>
    TableName <span class="token operator">=</span> <span class="token string">&quot;Todo&quot;</span><span class="token punctuation">,</span>
    KeySchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>KeySchemaElement<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeySchemaElement</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span> KeyType<span class="token punctuation">.</span>HASH<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    AttributeDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>AttributeDefinition<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span> ScalarAttributeType<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ProvisionedThroughput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProvisionedThroughput</span>
    <span class="token punctuation">{</span>
        ReadCapacityUnits <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
        WriteCapacityUnits <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
awsDb<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>DynamoDB Tables take a little while to create in AWS so we can&#39;t use it immediately, instead you&#39;ll need to periodically poll to check the status for when it&#39;s ready:</p><div class="language-csharp"><pre><code><span class="token comment">//AWSSDK</span>
<span class="token class-name"><span class="token keyword">var</span></span> startAt <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> timeout <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">do</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> descResponse <span class="token operator">=</span> awsDb<span class="token punctuation">.</span><span class="token function">DescribeTable</span><span class="token punctuation">(</span><span class="token string">&quot;Todo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>descResponse<span class="token punctuation">.</span>Table<span class="token punctuation">.</span>TableStatus <span class="token operator">==</span> DynamoStatus<span class="token punctuation">.</span>Active<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ResourceNotFoundException</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// DescribeTable is eventually consistent. So you might get resource not found.</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>UtcNow <span class="token operator">-</span> startAt <span class="token operator">&gt;</span> timeout<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token string">&quot;Exceeded timeout of {0}&quot;</span><span class="token punctuation">.</span><span class="token function">Fmt</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Once the table is Active we can start using it, to get the list of table names we send a <code>ListTablesRequest</code>:</p><div class="language-csharp"><pre><code><span class="token comment">//AWSSDK</span>
<span class="token class-name"><span class="token keyword">var</span></span> listResponse <span class="token operator">=</span> awsDb<span class="token punctuation">.</span><span class="token function">ListTables</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ListTablesRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> tableNames <span class="token operator">=</span> listResponse<span class="token punctuation">.</span>TableNames<span class="token punctuation">;</span>
tableNames<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="managed-dynamodb-client" tabindex="-1">Managed DynamoDB Client <a class="header-anchor" href="#managed-dynamodb-client" aria-hidden="true">#</a></h2><p>As we can see using the <code>AmazonDynamoDBClient</code> directly requires a lot more imperative code, but it also ends up doing a lot less. We&#39;ve not included the logic to query existing tables so only the missing tables are created, we&#39;ve not implemented any error handling or Retry logic (important for Cloud Services) and we&#39;re not checking to make sure we&#39;ve collected the entire list of results (implementing paging when necessary).</p><p>Whereas every request in PocoDynamo is invoked inside a managed execution where any temporary errors are retried using the <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries" target="_blank" rel="noopener noreferrer">AWS recommended retries exponential backoff</a>.</p><p>All PocoDynamo API&#39;s returning <code>IEnumerable&lt;T&gt;</code> returns a lazy evaluated stream which behind-the-scenes sends multiple paged requests as needed whilst the sequence is being iterated. As LINQ API&#39;s are also lazily evaluated you could use <code>Take()</code> to only download the exact number results you need. So you can query the first 100 table names with:</p><div class="language-csharp"><pre><code><span class="token comment">//PocoDynamo</span>
<span class="token class-name"><span class="token keyword">var</span></span> first100TableNames <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">GetTableNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>and PocoDynamo will only make the minimum number of requests required to fetch the first 100 results.</p><h2 id="autoincrement-primary-keys" tabindex="-1">AutoIncrement Primary Keys <a class="header-anchor" href="#autoincrement-primary-keys" aria-hidden="true">#</a></h2><p>Once the <code>Todo</code> table is created we can start adding TODOs to it. If we were using OrmLite. the <code>[AutoIncrement]</code> attribute lets us use the RDBMS&#39;s native support for auto incrementing sequences to populate the Id primary key. Unfortunately DynamoDB lacks an auto increment feature and instead recommends the user to supply a unique key as shown in their <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html" target="_blank" rel="noopener noreferrer">DynamoDB Forum example</a> where they&#39;ve chosen a Forum Name as the Hash Key of the Forum and Thread tables, whilst the Reply comment uses a concatenation of <code>ForumName</code> + <code>#</code> + <code>ThreadSubject</code> as its Hash Key and the <code>ReplyDateTime</code> for the Range Key.</p><p>However auto incrementing Ids have a number of useful properties making it ideal for identifying data:</p><ul><li><strong>Unique</strong> - Each new item is guaranteed to have a unique Id that&#39;s higher than all Ids before it</li><li><strong>Sequential</strong> - A useful property to ensure consistent results when paging or ordering</li><li><strong>Never change</strong> - To ensure a constant key that never changes, Ids shouldn&#39;t contain data it references</li><li><strong>Easy to read</strong> - Humans have a better chance to read and remember a number than a concatenated string</li><li><strong>Easy to reference</strong> - It&#39;s easier to reference a predictable numeric field than a concatenated string</li></ul><p>They&#39;re also more re-usable as most data stores have native support for integer primary keys. For these reasons we&#39;ve added support for Auto-Incrementing integer primary keys in PocoDynamo where Ids annotated with <code>[AutoIncrement]</code> attribute are automatically populated with the next id in its sequence.</p><h4 id="isequencesource" tabindex="-1">ISequenceSource <a class="header-anchor" href="#isequencesource" aria-hidden="true">#</a></h4><p>The Auto Incrementing functionality is provided by the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/ISequenceSource.cs" target="_blank" rel="noopener noreferrer">ISequenceSource</a> interface:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISequenceSource</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequiresSchema</span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">Increment</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> amount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> startingAt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="dynamodbsequencegenerator" tabindex="-1">DynamoDbSequenceGenerator <a class="header-anchor" href="#dynamodbsequencegenerator" aria-hidden="true">#</a></h4><p>The default implementation uses <a href="https://github.com/ServiceStack/ServiceStack.Aws/blob/master/src/ServiceStack.Aws/DynamoDb/DynamoDbSequenceGenerator.cs" target="_blank" rel="noopener noreferrer">DynamoDbSequenceGenerator</a> which stores sequences for each table in the <code>Seq</code> DynamoDB Table so no additional services are required. To ensure unique incrementing sequences in DynamoDB, PocoDynamo uses UpdateItemRequest&#39;s <code>AttributeValueUpdate</code> feature to perform atomic value updates. PocoDynamo sequences are also very efficient and only require a single DynamoDB call to populate a batch of Primary Key Ids which are also guaranteed to be in order (and without gaps) for batches that are stored together.</p><h4 id="redissequencesource" tabindex="-1">RedisSequenceSource <a class="header-anchor" href="#redissequencesource" aria-hidden="true">#</a></h4><p>If preferred you can instead instruct PocoDynamo to maintain sequences in Redis using <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Server/RedisSequenceSource.cs" target="_blank" rel="noopener noreferrer">RedisSequenceSource</a> or alternatively inject your own implementation which can be configured in PocoDynamo with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoDynamo</span><span class="token punctuation">(</span>awsDb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Sequences <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisSequenceSource</span><span class="token punctuation">(</span>redisManager<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="putting-items-with-pocodynamo" tabindex="-1">Putting items with PocoDynamo <a class="header-anchor" href="#putting-items-with-pocodynamo" aria-hidden="true">#</a></h2><p>As we can take advantage of Auto Incrementing Id&#39;s, storing Items becomes as simple as creating a number of POCO&#39;s and calling PutItems:</p><div class="language-csharp"><pre><code><span class="token comment">//PocoDynamo</span>
<span class="token class-name"><span class="token keyword">var</span></span> todos <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Todo</span> <span class="token punctuation">{</span> Content <span class="token operator">=</span> <span class="token string">&quot;TODO &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> Order <span class="token operator">=</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">PutItems</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="putting-items-with-amazondynamodbclient" tabindex="-1">Putting items with AmazonDynamoDBClient <a class="header-anchor" href="#putting-items-with-amazondynamodbclient" aria-hidden="true">#</a></h2><p>To do this manually with <code>AmazonDynamoDBClient</code> you&#39;d need to create and <code>UpdateItemRequest</code> to update the counter maintaining your TODO sequences:</p><div class="language-csharp"><pre><code><span class="token comment">//AWSSDK</span>
<span class="token class-name"><span class="token keyword">var</span></span> incrRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UpdateItemRequest</span>
<span class="token punctuation">{</span>
    TableName <span class="token operator">=</span> <span class="token string">&quot;Seq&quot;</span><span class="token punctuation">,</span>
    Key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AttributeValue<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValue</span> <span class="token punctuation">{</span> S <span class="token operator">=</span> <span class="token string">&quot;Todo&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    AttributeUpdates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AttributeValueUpdate<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
            <span class="token string">&quot;Counter&quot;</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValueUpdate</span> <span class="token punctuation">{</span>
                Action <span class="token operator">=</span> AttributeAction<span class="token punctuation">.</span>ADD<span class="token punctuation">,</span>
                Value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValue</span> <span class="token punctuation">{</span> N <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ReturnValues <span class="token operator">=</span> ReturnValue<span class="token punctuation">.</span>ALL_NEW<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> awsDb<span class="token punctuation">.</span><span class="token function">UpdateItem</span><span class="token punctuation">(</span>incrRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> nextSequences <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt64</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Attributes<span class="token punctuation">[</span><span class="token string">&quot;Counter&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>After you know which sequence to start with you can start putting items using a Dictionary of Attribute Values:</p><div class="language-csharp"><pre><code><span class="token comment">//AWSSDK</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> putRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PutItemRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Todo&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AttributeValue<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValue</span> <span class="token punctuation">{</span> N <span class="token operator">=</span> <span class="token punctuation">(</span>nextSequences <span class="token operator">-</span> <span class="token number">100</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;Content&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValue</span><span class="token punctuation">(</span><span class="token string">&quot;TODO &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;Order&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValue</span> <span class="token punctuation">{</span> N <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;Done&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValue</span> <span class="token punctuation">{</span> BOOL <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    awsDb<span class="token punctuation">.</span><span class="token function">PutItem</span><span class="token punctuation">(</span>putRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Although even without the managed execution this still isn&#39;t equivalent to PocoDynamo&#39;s example above as to store multiple items efficiently PocoDynamo <code>PutItems()</code> API batches multiple Items in 4x <code>BatchWriteItemRequest</code> behind-the-scenes, the minimum number needed due to DynamoDB&#39;s maximum Write Batch size limit of 25 requests.</p><h2 id="getting-items-with-pocodynamo" tabindex="-1">Getting Items with PocoDynamo <a class="header-anchor" href="#getting-items-with-pocodynamo" aria-hidden="true">#</a></h2><p>Getting an item just requires the Generic Type and the primary key of the item to fetch:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> todo <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
todo<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which returns the Todo item if it exists, or <code>null</code> if it doesn&#39;t.</p><p>Fetching all table items is where an understanding of DynamoDB&#39;s architecture and its limits become important. DynamoDB achieves its scalability by partitioning your data across multiple partitions based on its hash Key (aka Primary Key). This means that the only way to efficiently query across data containing multiple primary keys is to either explicitly create a <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html" target="_blank" rel="noopener noreferrer">Global Secondary Index</a> or perform a full-table Scan.</p><p>However table scans in DynamoDB are more inefficient than full table scans in RDBMS&#39;s since it has to scan across multiple partitions which can quickly use up your table&#39;s provisioned throughput, as such scans should be limited to low usage areas.</p><p>With that said, you can do Table Scans in PocoDynamo using API&#39;s starting with <code>Scan*</code> prefix, e.g. to return all Todo items:</p><div class="language-csharp"><pre><code><span class="token comment">//PocoDynamo</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span> todos <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ScanAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>As IEnumerable&#39;s are lazily executed, it only starts sending <code>ScanRequest</code> to fetch all Items once the IEnumerable is iterated, which it does in <strong>batches of 1000</strong> (configurable with <code>PocoDynamo.PagingLimit</code>).</p><p>To fetch all items you can just call <code>ToList()</code>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> allTodos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
allTodos<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which incidentally is also just what <code>db.GetAll&lt;Todo&gt;()</code> does.</p><h2 id="getting-items-with-awssdk" tabindex="-1">Getting Items with AWSSDK <a class="header-anchor" href="#getting-items-with-awssdk" aria-hidden="true">#</a></h2><p>To fetch the same single item with the AWSSDK client you&#39;d construct and send a <code>GetItemRequest</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token comment">//AWSSDK</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetItemRequest</span>
<span class="token punctuation">{</span>
    TableName <span class="token operator">=</span> <span class="token string">&quot;Todo&quot;</span><span class="token punctuation">,</span>
    Key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AttributeValue<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValue</span> <span class="token punctuation">{</span> N <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ConsistentRead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> awsDb<span class="token punctuation">.</span><span class="token function">GetItem</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> todo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Todo</span>
<span class="token punctuation">{</span>
    Id <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt64</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Item<span class="token punctuation">[</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>
    Content <span class="token operator">=</span> response<span class="token punctuation">.</span>Item<span class="token punctuation">[</span><span class="token string">&quot;Content&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>S<span class="token punctuation">,</span>
    Order <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Item<span class="token punctuation">[</span><span class="token string">&quot;Order&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>
    Done <span class="token operator">=</span> response<span class="token punctuation">.</span>Item<span class="token punctuation">[</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>BOOL<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Although this is a little fragile as it doesn&#39;t handle the case when attributes (aka Properties) or the item doesn&#39;t exist.</p><p>Doing a full-table scan is pretty straight-forward although as you&#39;re scanning the entire table you&#39;ll want to implement the paging to scan through all items, which looks like:</p><div class="language-csharp"><pre><code><span class="token comment">//AWSSDK</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ScanRequest</span>
<span class="token punctuation">{</span>
    TableName <span class="token operator">=</span> <span class="token string">&quot;Todo&quot;</span><span class="token punctuation">,</span>
    Limit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> allTodos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ScanResponse</span> response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">do</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        request<span class="token punctuation">.</span>ExclusiveStartKey <span class="token operator">=</span> response<span class="token punctuation">.</span>LastEvaluatedKey<span class="token punctuation">;</span>

    response <span class="token operator">=</span> awsDb<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> response<span class="token punctuation">.</span>Items<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> todo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Todo</span>
        <span class="token punctuation">{</span>
            Id <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt64</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">&quot;Content&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>S<span class="token punctuation">,</span>
            Order <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">&quot;Order&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Done <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>BOOL<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        allTodos<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>LastEvaluatedKey <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>LastEvaluatedKey<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

allTodos<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="deleting-an-item-with-pocodynamo" tabindex="-1">Deleting an Item with PocoDynamo <a class="header-anchor" href="#deleting-an-item-with-pocodynamo" aria-hidden="true">#</a></h2><p>Deleting an item is similar to getting an item which just needs the generic type and primary key:</p><div class="language-csharp"><pre><code><span class="token comment">//PocoDynamo</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeleteItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="deleting-an-item-with-awssdk" tabindex="-1">Deleting an Item with AWSSDK <a class="header-anchor" href="#deleting-an-item-with-awssdk" aria-hidden="true">#</a></h2><p>Which just sends a <code>DeleteItemRequest</code> to delete the Item:</p><div class="language-csharp"><pre><code><span class="token comment">//AWSSDK</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeleteItemRequest</span>
<span class="token punctuation">{</span>
    TableName <span class="token operator">=</span> <span class="token string">&quot;Todo&quot;</span><span class="token punctuation">,</span>
    Key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AttributeValue<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AttributeValue</span> <span class="token punctuation">{</span> N <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

awsDb<span class="token punctuation">.</span><span class="token function">DeleteItem</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="updating-an-item-with-pocodynamo" tabindex="-1">Updating an Item with PocoDynamo <a class="header-anchor" href="#updating-an-item-with-pocodynamo" aria-hidden="true">#</a></h2><p>The simplest usage is to pass in a partially populated POCO where any Hash or Range Keys are added to the Key Condition and any non-default values are replaced. E.g the query below updates the Customer&#39;s Age to <strong>42</strong>:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateItemNonDefaults</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> customer<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>DynamoDB&#39;s UpdateItem supports 3 different operation types:</p><ul><li><code>PUT</code> to replace an Attribute Value</li><li><code>ADD</code> to add to an existing Attribute Value</li><li><code>DELETE</code> to delete the specified Attributes</li></ul><p>Examples of all 3 are contained in the examples below which changes the Customer&#39;s <code>Nationality</code> to <strong>Australian</strong>, reduces their <code>Age</code> by <strong>1</strong> and deletes their <code>Name</code> and <code>Orders</code>:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateItem</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> 
    <span class="token named-parameter punctuation">put</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span>
        Nationality <span class="token operator">=</span> <span class="token string">&quot;Australian&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">add</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span>
        Age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">delete</span><span class="token punctuation">:</span> x <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x<span class="token punctuation">.</span>Orders <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The same Typed API above is also available in the more flexible and untyped form below:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UpdateItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamoUpdateItem</span>
<span class="token punctuation">{</span>
    Hash <span class="token operator">=</span> customer<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
    Put <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;Nationality&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Australian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Delete <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orders&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="update-with-conditional-expressions" tabindex="-1">Update with Conditional Expressions <a class="header-anchor" href="#update-with-conditional-expressions" aria-hidden="true">#</a></h3><p>PocoDynamo also has Typed API support for <a href="http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html#API_PutItem_RequestSyntax" target="_blank" rel="noopener noreferrer">DynamoDB Conitional Expressions</a> by using the <code>Condition()</code> API, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UpdateExpression</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span> Nationality <span class="token operator">=</span> <span class="token string">&quot;Australian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span> <span class="token punctuation">{</span> Age <span class="token operator">=</span> decrBy <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x<span class="token punctuation">.</span>Orders <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> succeeded <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">UpdateItem</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="querying" tabindex="-1">Querying <a class="header-anchor" href="#querying" aria-hidden="true">#</a></h2><p>The simple Todo example should give you a feel for using PocoDynamo to handle basic CRUD operations. Another area where PocoDynamo adds a lot of value which can be fairly cumbersome to do without, is in creating <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html" target="_blank" rel="noopener noreferrer">Query and Scan</a> requests to query data in DynamoDB Tables.</p><h3 id="queryexpressions-are-queryrequests" tabindex="-1">QueryExpressions are QueryRequests <a class="header-anchor" href="#queryexpressions-are-queryrequests" aria-hidden="true">#</a></h3><p>The query functionality in PocoDynamo is available on the <code>QueryExpression&lt;T&gt;</code> class which is used as a typed query builder to construct your Query request. An important attribute about QueryExpression&#39;s are that they inherit AWSSDK&#39;s <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LowLevelDotNetQuerying.html" target="_blank" rel="noopener noreferrer">QueryRequest</a> Request DTO.</p><p>This provides a number of benefits, they&#39;re easy to use and highly introspectable since each API just populates different fields in the Request DTO. They&#39;re also highly reusable as QueryExpressions can be executed as-is in AWSSDK DynamoDB client and vice-versa with PocoDynamo&#39;s <code>Query</code> API&#39;s executing both <code>QueryExpression&lt;T&gt;</code> and <code>QueryRequest</code> DTOs. The difference with PocoDynamo&#39;s Query API is that they provide managed exeuction, lazy evaluation, paged queries and auto-conversion of dynamic results into typed POCOs.</p><h3 id="query-usage" tabindex="-1">Query Usage <a class="header-anchor" href="#query-usage" aria-hidden="true">#</a></h3><p><a href="http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html" target="_blank" rel="noopener noreferrer">DynamoDB Query&#39;s</a> enable efficient querying of data in DynamoDB as it&#39;s limited to querying the indexed Hash and Range Keys on your Tables or Table Indexes. Although it has the major limitation that it always needs to specify a Hash condition, essentially forcing the query to be scoped to a single partition. This makes it fairly useless for Tables with only a single Hash Primary Key like <code>Todo</code> as the query condition will always limit to a maximum of 1 result.</p><p>Nevertheless we can still use it to show how to perform server-side queries with PocoDynamo. To create a QueryExpression use the <code>FromQuery*</code> API&#39;s. It accepts a <code>KeyConditionExpression</code> as the first argument given it&#39;s a mandatory requirement for Query Requests which uses it to identify the partition the query should be executed on:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="key-condition-and-filter-expressions" tabindex="-1">Key Condition and Filter Expressions <a class="header-anchor" href="#key-condition-and-filter-expressions" aria-hidden="true">#</a></h4><p>PocoDynamo parses this lambda expression to return a populated <code>QueryExpression&lt;Todo&gt;</code> which you can inspect to find the <code>TableName</code> set to <strong>Todo</strong> and the <code>KeyConditionExpression</code> set to <strong>(Id = :k0)</strong> with the <code>ExpressionAttributeValues</code> Dictionary containing a Numeric value of <strong>1</strong> for the key <strong>:k0</strong>.</p><p>From here you can continue constructing the QueryRequest DTO by populating its properties directly or by calling <code>QueryExpression</code> high-level methods (modeled after the properties they populate), e.g. the <code>KeyCondition()</code> method populates the <code>KeyConditionExpression</code> property, <code>Filter()</code> populates the <code>FilterExpression</code> property and any arguments used in any expression are automatically parameterized and added to the <code>ExpressionAttributeValues</code> collection:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">KeyCondition</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//Equivalent to: db.FromQuery&lt;Todo&gt;(x =&gt; x.Id == 1)</span>
    <span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Done<span class="token punctuation">)</span><span class="token punctuation">;</span>

q<span class="token punctuation">.</span>TableName                 <span class="token comment">// Todo</span>
q<span class="token punctuation">.</span>KeyConditionExpression    <span class="token comment">// (Id = :k0)</span>
q<span class="token punctuation">.</span>FilterExpression          <span class="token comment">// Done = :true</span>
q<span class="token punctuation">.</span>ExpressionAttributeValues <span class="token comment">// :k0 = AttributeValue {N=1}, :true = AttributeValue {BOOL=true}</span>
</code></pre></div><p>Filter expressions are applied after the query is executed which enable more flexible querying as they&#39;re not just limited to key fields and can be used to query any field to further filter the returned resultset.</p><h3 id="executing-queries" tabindex="-1">Executing Queries <a class="header-anchor" href="#executing-queries" aria-hidden="true">#</a></h3><p>After you&#39;ve finished populating the Request DTO it can be executed with PocoDynamo&#39;s <code>Query()</code>. This returns a lazily evaluated resultset which you can use LINQ methods on to fetch the results. Given the primary key condition we know this will only return 0 or 1 rows based on whether or not the TODO has been completed which we can check with by calling LINQ&#39;s <code>FirstOrDefault()</code> method:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> todo1Done <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where <code>todo1Done</code> will hold the populated <code>Todo</code> if it was marked done, otherwise it will be <code>null</code>.</p><h4 id="expression-chaining" tabindex="-1">Expression Chaining <a class="header-anchor" href="#expression-chaining" aria-hidden="true">#</a></h4><p>Most <code>QueryExpression</code> methods returns itself and an alternative to calling <code>Query</code> on PocoDynamo (or AWSSDK) to execute the Query, you can instead call the <code>Exec()</code> alias. This allows you to create and execute your DynamoDb Query in a single expression which can instead be rewritten as:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> todo1Done <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Done<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="scan-operations" tabindex="-1">Scan Operations <a class="header-anchor" href="#scan-operations" aria-hidden="true">#</a></h3><p>Scan Operations work very similar to Query Operations but instead of using a <code>QueryExpression&lt;T&gt;</code> you would instead use a <code>ScanExpression&lt;T&gt;</code> which as it inherits from AWSSDK&#39;s <code>ScanRequest</code> Request DTO, provides the same reuse benefits as QueryExpression&#39;s.</p><p>To create a Scan Request you would use the <code>FromScan&lt;T&gt;</code> API, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>More examples of how to use typed LINQ expressions for creating and executing Query and Scan requests are described later.</p><h3 id="related-items" tabindex="-1">Related Items <a class="header-anchor" href="#related-items" aria-hidden="true">#</a></h3><p>DynamoDB Queries are ideally suited for when the dataset is naturally isolated, e.g. multi-tenant Apps that are centered around Customer data so any related records are able to share the same <code>CustomerId</code> Hash Key.</p><p>PocoDynamo has good support for maintaining related data which can re-use the same Data Annotations used to define POCO relationships in OrmLite, often letting you reuse your existing OrmLite RDBMS data models in DynamoDB as well.</p><p>To illustrate how to use PocoDynamo to maintain related data we&#39;ll walk through a typical Customer and Orders example:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">CustomerAddress</span> PrimaryAddress <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerAddress</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> State <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Country <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Alias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;CustomerOrder&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">References</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Customer</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomerId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Product <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Qty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Index</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Cost <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In order to use them we need to tell PocoDynamo which of the Types are Tables that it should create in DynamoDB which we can do by registering them with PocoDynamo then calling <code>InitSchema()</code> which will go through and create any of the tables that don&#39;t yet exist in DynamoDB:</p><div class="language-csharp"><pre><code>db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoDynamo</span><span class="token punctuation">(</span>awsDb<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>InitSchema()</code> will also wait until the tables have been created so they&#39;re immediately accessible afterwards. As creating DynamoDB tables can take upwards of a minute in AWS you can use the <a href="https://github.com/ServiceStack/ServiceStack.Aws/blob/master/src/ServiceStack.Aws/DynamoDb/IPocoDynamoAsync.cs" target="_blank" rel="noopener noreferrer">alternative Async APIs</a> if you wanted to continue to doing other stuff whilst the tables are being created in AWS, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">InitSchemaAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// do other stuff...</span>

<span class="token keyword">await</span> task<span class="token punctuation">;</span>
</code></pre></div><h2 id="related-data" tabindex="-1">Related Data <a class="header-anchor" href="#related-data" aria-hidden="true">#</a></h2><p>After the tables are created we can insert the top-level Customer record as normal:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;Customer&quot;</span><span class="token punctuation">,</span>
    PrimaryAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerAddress</span>
    <span class="token punctuation">{</span>
        Address <span class="token operator">=</span> <span class="token string">&quot;1 road&quot;</span><span class="token punctuation">,</span>
        State <span class="token operator">=</span> <span class="token string">&quot;NT&quot;</span><span class="token punctuation">,</span>
        Country <span class="token operator">=</span> <span class="token string">&quot;Australia&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">PutItem</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Before adding the record, PocoDynamo also populates any <code>[AutoIncrement]</code> properties with the next number in the sequence for that Type. Any complex types stored on the <code>Customer</code> POCO like <code>CustomerAddress</code> gets persisted along with the containing <code>Customer</code> entry and converted into a <strong>Map</strong> of DynamoDB Attribute Value pairs. We can view the <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ConsoleDynamoDB.html" target="_blank" rel="noopener noreferrer">DynamoDB Web Console</a> to see how this is stored in DynamoDB:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/aws/pocodynamo/related-customer.png" alt=""></p><h3 id="related-tables" tabindex="-1">Related Tables <a class="header-anchor" href="#related-tables" aria-hidden="true">#</a></h3><p>You can define a related table using the <code>[References]</code> attribute to tell PocoDynamo what the parent table is, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Alias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;CustomerOrder&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">References</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Customer</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomerId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which PocoDynamo infers to create the table using the parent&#39;s <code>CustomerId</code> as its Hash Key, relegating its <code>Id</code> as the Range Key for the table. This ensures the Order is kept in the same partition as all other related Customer Data, necessary in order to efficiently query a Customer&#39;s Orders. When both the Hash and Range Key are defined they&#39;re treated as the Composite Key for that table which needs to be unique for each item - guaranteed when using <code>[AutoIncrement]</code> Id&#39;s.</p><h4 id="inserting-related-data" tabindex="-1">Inserting Related Data <a class="header-anchor" href="#inserting-related-data" aria-hidden="true">#</a></h4><p>After the table is created we can generate and insert random orders like any other table, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
<span class="token punctuation">{</span>
    CustomerId <span class="token operator">=</span> customer<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
    Product <span class="token operator">=</span> <span class="token string">&quot;Item &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">?</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Qty <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>
    Cost <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">PutItems</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can also use the alternative <code>PutRelatedItems()</code> API and get PocoDynamo to take care of populating the <code>CustomerId</code>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
<span class="token punctuation">{</span>
    Product <span class="token operator">=</span> <span class="token string">&quot;Item &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">?</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Qty <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>
    Cost <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">PutRelatedItems</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Both examples results in the same data being inserted into the <strong>CustomerOrder</strong> DynamoDB table:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/aws/pocodynamo/related-customer-orders.png" alt=""></p><p>This also shows how the <code>[Alias]</code> attribute can be used to rename the <code>Order</code> Type as <strong>CustomerOrder</strong> in DynamoDB.</p><h3 id="querying-related-tables" tabindex="-1">Querying Related Tables <a class="header-anchor" href="#querying-related-tables" aria-hidden="true">#</a></h3><p>Now we have related data we can start querying it, something you may want to do is fetch all Customer Orders:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CustomerId <span class="token operator">==</span> customer<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> dbOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>As getting related Items for a Hash Key is a popular query, it has an explicit API:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> dbOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRelatedItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>We can refine the query further by specifying a <code>FilterExpression</code> to limit the results DynamoDB returns:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>Using <code>Clone()</code> will create and modify a copy of the query, leaving the original one intact.</p></blockquote><h3 id="local-secondary-indexes" tabindex="-1"><a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html" target="_blank" rel="noopener noreferrer">Local Secondary Indexes</a> <a class="header-anchor" href="#local-secondary-indexes" aria-hidden="true">#</a></h3><p>But filters aren&#39;t performed on an Index and can be inefficient if your table has millions of customer rows. By default only the Hash and Range Key are indexed, in order to efficiently query any other field you will need to create a <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html" target="_blank" rel="noopener noreferrer">Local Secondary Index</a> for it.</p><p>This is easily done in PocoDynamo by annotating the properties you want indexed with the <code>[Index]</code> attribute:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token comment">//...    </span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Index</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Cost <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Which tells PocoDynamo to create a Local Secondary Index for the <code>Cost</code> property when it creates the table.</p><p>When one exists, you can query a Local Index with <code>LocalIndex()</code>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> q
    <span class="token punctuation">.</span><span class="token function">LocalIndex</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</code></pre></div><p>Which now performs the Cost query on an index. Although this only returns a partially populated Order, specifically with just the Hash Key (CustomerId), Range Key (Id) and the field that&#39;s indexed (Cost):</p><div class="language-cs"><pre><code>expensiveOrders<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        Id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        CustomerId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        Qty<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        Cost<span class="token operator">:</span> <span class="token number">12</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">]</span>
</code></pre></div><p>This is due to <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html" target="_blank" rel="noopener noreferrer">Local Secondary Indexes</a> being just denormalized tables behind the scenes which by default only returns re-projected fields that were defined when the Index was created.</p><p>One way to return populated orders is to specify a custom <code>ProjectionExpression</code> with the fields you want returned. E.g. You can create a request with a populated <code>ProjectionExpression</code> that returns all Order fields with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> q
    <span class="token punctuation">.</span><span class="token function">LocalIndex</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">//Equivalent to: SelectTableFields()</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which now returns:</p><div class="language-cs"><pre><code>expensiveOrders<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        Id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        CustomerId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        Product<span class="token operator">:</span> Item <span class="token constant">A</span><span class="token punctuation">,</span>
        Qty<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
        Cost<span class="token operator">:</span> <span class="token number">12</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">]</span>
</code></pre></div><h3 id="typed-local-indexes" tabindex="-1">Typed Local Indexes <a class="header-anchor" href="#typed-local-indexes" aria-hidden="true">#</a></h3><p>Using a custom <code>ProjectionExpression</code> is an easy work-around, although for it to work DynamoDB needs to consult the primary table to fetch the missing fields for each item. For large tables that are frequently accessed, the query can be made more efficient by projecting the fields you want returned when the Index is created.</p><p>You can can tell PocoDynamo which additional fields it should reproject by creating a <strong>Typed Local Index</strong> which is just a POCO implementing <code>ILocalIndex&lt;T&gt;</code> containing all the fields the index should contain, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCostLocalIndex</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ILocalIndex<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Index</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Cost <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomerId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Qty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">References</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">OrderCostLocalIndex</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><p>Then use the <code>[References]</code> attribute to register the Typed Index so PocoDynamo knows which additional indexes needs to be created with the table. The <code>[Index]</code> attribute is used to specify which field is indexed (Range Key) whilst the <code>CustomerId</code> is automatically used the Hash Key for the Local Index Table.</p><h4 id="querying-typed-indexes" tabindex="-1">Querying Typed Indexes <a class="header-anchor" href="#querying-typed-indexes" aria-hidden="true">#</a></h4><p>To query a typed Index, use <code>FromQueryIndex&lt;T&gt;()</code> which returns a populated Query Request with the Table and Index Name. As <code>Cost</code> is now the Range Key of the Local Index table it can be queried together with the <code>CustomerId</code> Hash Key in the Key Condition expression:</p><div class="language-csharp"><pre><code><span class="token class-name">List<span class="token punctuation">&lt;</span>OrderCostLocalIndex<span class="token punctuation">&gt;</span></span> expensiveOrderIndexes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromQueryIndex</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderCostLocalIndex<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> 
        x<span class="token punctuation">.</span>CustomerId <span class="token operator">==</span> customer<span class="token punctuation">.</span>Id <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This returns a list of populated indexes that now includes the <code>Qty</code> field:</p><div class="language-cs"><pre><code>expensiveOrderIndexes<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        Cost<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
        CustomerId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        Id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        Qty<span class="token operator">:</span> <span class="token number">6</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">]</span>
</code></pre></div><p>If preferred you can easily convert Typed Index into Orders by using ServiceStack&#39;s <a href="https://github.com/ServiceStack/ServiceStack/wiki/Auto-mapping" target="_blank" rel="noopener noreferrer">built-in Auto-Mapping</a>, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name">List<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> expensiveOrders <span class="token operator">=</span> expensiveOrderIndexes
    <span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConvertTo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="global-secondary-indexes" tabindex="-1"><a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html" target="_blank" rel="noopener noreferrer">Global Secondary Indexes</a> <a class="header-anchor" href="#global-secondary-indexes" aria-hidden="true">#</a></h3><p>The major limitation of Local Indexes is that they&#39;re limited to querying data in the same partition (Hash Key). To efficiently query an index spanning the entire dataset, you need to instead use a <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html" target="_blank" rel="noopener noreferrer">Global Secondary Index</a>.</p><p>Support for Global Indexes in PocoDynamo is similar to Typed Local Indexes, but instead implements <code>IGlobalIndex&lt;T&gt;</code>. They also free you to choose a new Hash Key, letting you create an Index spanning all Customers.</p><p>For example we can create a global index that lets us search the cost across all orders containing a particular product:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCostGlobalIndex</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGlobalIndex<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HashKey</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Product <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Index</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Cost <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomerId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Qty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">References</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">OrderCostGlobalIndex</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><p>Our Key Condition can now instead query Product and Cost fields across all Customer Orders:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expensiveItemAOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromQueryIndex</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderCostGlobalIndex<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> 
        x<span class="token punctuation">.</span>Product <span class="token operator">==</span> <span class="token string">&quot;Item A&quot;</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will print all <strong>Item A</strong> Orders with a <strong>Cost &gt; 10</strong>:</p><div class="language-cs"><pre><code>expensiveItemAOrders<span class="token punctuation">.</span><span class="token function">PrintDump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        Product<span class="token operator">:</span> Item <span class="token constant">A</span><span class="token punctuation">,</span>
        Cost<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
        CustomerId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        Qty<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
        Id<span class="token operator">:</span> <span class="token number">5</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">]</span>
</code></pre></div><h2 id="scan-requests" tabindex="-1">Scan Requests <a class="header-anchor" href="#scan-requests" aria-hidden="true">#</a></h2><p>You&#39;ll want to just use queries for any frequently accessed code running in production, although the full querying flexibility available in full table scan requests can be useful for ad hoc querying and to speed up development cycles by initially starting with Scan queries then when the data requirements for your App&#39;s have been finalized, rewrite them to use indexes and queries.</p><p>To create Scan Requests you instead call the <code>FromScan*</code> API&#39;s, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> allOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ScanAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can also perform scans on Global Indexes, but unlike queries they don&#39;t need to be limited to the Hash Key:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expensiveOrderIndexes <span class="token operator">=</span> db
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScanIndex</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderCostGlobalIndex<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Just like <code>QueryExpression&lt;T&gt;</code> the populated <code>ScanExpression&lt;T&gt;</code> inherits from AWSSDK&#39;s <code>ScanRequest</code> enabling the same re-use benefits for <code>ScanRequest</code> as they do for QueryRequest&#39;s.</p><h2 id="query-and-scan-expressions" tabindex="-1">Query and Scan Expressions <a class="header-anchor" href="#query-and-scan-expressions" aria-hidden="true">#</a></h2><p>Both Scans and Query expressions benefit from a Typed LINQ-like expression API which can be used to populate the DTO&#39;s</p><ul><li><strong>KeyConditionExpression</strong> - for specifying conditions on tables Hash and Range keys (only: QueryRequest)</li><li><strong>FilterExpression</strong> - for specifying conditions to filter results on other fields</li><li><strong>ProjectionExpression</strong> - to specify any custom fields (default: all fields)</li></ul><p>Each <code>QueryRequest</code> needs to provide a key condition which can be done when creating the QueryExpression:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CustomerId <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Alternative explicit API</span>
<span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">KeyCondition</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CustomerId <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Whilst every condition on a <code>ScanRequest</code> is added to the FilterExpression:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Alternative explicit API</span>
<span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Calling <code>Exec()</code> returns a lazily executed response which transparently sends multiple paged requests to fetch the results as needed, e.g calling LINQ&#39;s <code>.FirstOrDefault()</code> only makes a single request whilst <code>.ToList()</code> fetches the entire resultset. All streaming <code>IEnumerable&lt;T&gt;</code> requests are sent with the configured <code>PagingLimit</code> (default: 1000).</p><h4 id="custom-limits" tabindex="-1">Custom Limits <a class="header-anchor" href="#custom-limits" aria-hidden="true">#</a></h4><p>Several of PocoDynamo API&#39;s have overloads that let you specify a custom limit. API&#39;s with limits are instead executed immediately with the limit specified and returned in a concrete List:</p><div class="language-csharp"><pre><code><span class="token class-name">List<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> expensiveOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">limit</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="custom-filter-expressions" tabindex="-1">Custom Filter Expressions <a class="header-anchor" href="#custom-filter-expressions" aria-hidden="true">#</a></h3><p>There are also custom overloads that can be used to execute a custom expression when more flexibility is needed:</p><div class="language-csharp"><pre><code><span class="token comment">// Querying by Custom Filter Condition with anon args</span>
<span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;Cost &gt; :amount&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> amount <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Querying by Custom Filter Condition with loose-typed Dictionary</span>
<span class="token class-name"><span class="token keyword">var</span></span> expensiveOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;Cost &gt; :amount&quot;</span><span class="token punctuation">,</span> 
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;amount&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="custom-select-projections" tabindex="-1">Custom Select Projections <a class="header-anchor" href="#custom-select-projections" aria-hidden="true">#</a></h3><p>By default queries return all fields defined on the POCO model. You can also customize the projected fields that are returned with the <code>Select*</code> and <code>Exec*</code> APIs:</p><div class="language-csharp"><pre><code><span class="token comment">// Return partial fields from anon object</span>
<span class="token class-name"><span class="token keyword">var</span></span> partialOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> x<span class="token punctuation">.</span>CustomerId<span class="token punctuation">,</span> x<span class="token punctuation">.</span>Cost <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Return partial fields from array</span>
<span class="token class-name"><span class="token keyword">var</span></span> partialOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;CustomerId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cost&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Return partial fields defined in a custom Poco</span>
<span class="token keyword">class</span> <span class="token class-name">CustomerCost</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomerId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Cost <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> custCosts <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomerCost<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConvertTo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomerCost<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Alternative shorter version of above</span>
<span class="token class-name"><span class="token keyword">var</span></span> custCosts <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ExecInto</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomerCost<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Useful when querying and index and returing results in primary Order Poco </span>
<span class="token class-name">List<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> expensiveOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScanIndex</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderCostGlobalIndex<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Cost <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ExecInto</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Return a single column of fields</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> orderIds <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecColumn</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="advanced-linq-expressions" tabindex="-1">Advanced LINQ Expressions <a class="header-anchor" href="#advanced-linq-expressions" aria-hidden="true">#</a></h3><p>In addition to basic predicate conditions, DynamoDB also includes support for <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html" target="_blank" rel="noopener noreferrer">additional built-in functions</a> which PocoDynamo also provides typed LINQ support for:</p><h4 id="begins-with" tabindex="-1">begins_with <a class="header-anchor" href="#begins-with" aria-hidden="true">#</a></h4><p>Return items where string fields starts with a particular substring:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Product<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Item A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Equivalent to</span>
<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Dynamo<span class="token punctuation">.</span><span class="token function">BeginsWith</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Product<span class="token punctuation">,</span> <span class="token string">&quot;Item A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;begins_with(Product, :s)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> s <span class="token operator">=</span> <span class="token string">&quot;Item A&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="contains" tabindex="-1">contains <a class="header-anchor" href="#contains" aria-hidden="true">#</a></h4><p>Return items where string fields contains a particular substring:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Product<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;em A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Equivalent to</span>
<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Dynamo<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Product<span class="token punctuation">,</span> <span class="token string">&quot;em A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;contains(Product, :s)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> s <span class="token operator">=</span> <span class="token string">&quot;em A&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="in" tabindex="-1">in <a class="header-anchor" href="#in" aria-hidden="true">#</a></h4><p>Returns items where fields exist in a particular collection:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> qtys <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> qtys<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Qty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Equivalent to</span>
<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Dynamo<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Qty<span class="token punctuation">,</span> qtys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;Qty in(:q1,:q2)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> q1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> q2 <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="size" tabindex="-1">size <a class="header-anchor" href="#size" aria-hidden="true">#</a></h4><p>Returns items where the string length equals a particular size:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Equivalent to</span>
<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Dynamo<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Product<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;size(Product) = :n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> n <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Size also works for querying the size of different native DynamoDB collections, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntCollections</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> ArrayInts <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> SetInts <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> ListInts <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> DictionaryInts <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IntCollections<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
        x<span class="token punctuation">.</span>ArrayInts<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span>
        x<span class="token punctuation">.</span>SetInts<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span>
        x<span class="token punctuation">.</span>ListInts<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span>
        x<span class="token punctuation">.</span>DictionaryInts<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="between" tabindex="-1">between <a class="header-anchor" href="#between" aria-hidden="true">#</a></h4><p>Returns items where field values fall within a particular range (inclusive):</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Dynamo<span class="token punctuation">.</span><span class="token function">Between</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Qty<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Equivalent to</span>
<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Qty <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Qty <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;Qty between :from and :to&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> from <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> to <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="attribute-type" tabindex="-1">attribute_type <a class="header-anchor" href="#attribute-type" aria-hidden="true">#</a></h4><p>Return items where field is of a particular type:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> 
        Dynamo<span class="token punctuation">.</span><span class="token function">AttributeType</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Qty<span class="token punctuation">,</span> DynamoType<span class="token punctuation">.</span>Number<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        Dynamo<span class="token punctuation">.</span><span class="token function">AttributeType</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Product<span class="token punctuation">,</span> DynamoType<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Equivalent to</span>
<span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>
        <span class="token string">&quot;attribute_type(Qty, :n) and attribute_type(Product, :s)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> n <span class="token operator">=</span> <span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token string">&quot;S&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Valid Types: L (List), M (Map), S (String), SS (StringSet), N (Number), NS (NumberSet), B (Binary), BS, BOOL, NULL</p><h4 id="attribute-exists" tabindex="-1">attribute_exists <a class="header-anchor" href="#attribute-exists" aria-hidden="true">#</a></h4><p>Return items where a particular field exists. As the schema of your data models evolve you can use this to determine whether items are of an old or new schema:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> newOrderTypes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Dynamo<span class="token punctuation">.</span><span class="token function">AttributeExists</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>NewlyAddedField<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Equivalent to</span>
<span class="token class-name"><span class="token keyword">var</span></span> newOrderTypes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;attribute_exists(NewlyAddedField)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="attribute-not-exists" tabindex="-1">attribute_not_exists <a class="header-anchor" href="#attribute-not-exists" aria-hidden="true">#</a></h4><p>Return items where a particular field does not exist:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> oldOrderTypes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Dynamo<span class="token punctuation">.</span><span class="token function">AttributeNotExists</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>NewlyAddedField<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Equivalent to</span>
<span class="token class-name"><span class="token keyword">var</span></span> oldOrderTypes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span><span class="token string">&quot;attribute_not_exists(NewlyAddedField)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="defaults-and-custom-behavior" tabindex="-1">Defaults and Custom Behavior <a class="header-anchor" href="#defaults-and-custom-behavior" aria-hidden="true">#</a></h3><p>PocoDynamo is configured with the defaults below which it uses throughout its various API&#39;s when used in creating and querying tables:</p><div class="language-csharp"><pre><code><span class="token comment">//Defaults:</span>
<span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoDynamo</span><span class="token punctuation">(</span>awsDb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PollTableStatus <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    MaxRetryOnExceptionTimeout <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    ReadCapacityUnits <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
    WriteCapacityUnits <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
    ConsistentRead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    ScanIndexForward <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    PagingLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>If you wanted to query with different behavior you can create a clone of the client with the custom settings you want, e.g. you can create a client that performs eventually consistent queries with:</p><div class="language-csharp"><pre><code><span class="token class-name">IPocoDynamo</span> eventuallyConsistentDb <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">ClientWith</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">consistentRead</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="table-definition" tabindex="-1">Table definition <a class="header-anchor" href="#table-definition" aria-hidden="true">#</a></h2><p>To support different coding styles, readability/dependency preferences and levels of data model reuse, PocoDynamo enables a wide array of options for specifying a table&#39;s Hash and Range Keys, in the following order or precedence:</p><p>**Note: Hash and Range keys cannot be read-only calculated properties.</p><h3 id="specifying-a-hash-key" tabindex="-1">Specifying a Hash Key <a class="header-anchor" href="#specifying-a-hash-key" aria-hidden="true">#</a></h3><p>Using the AWSSDK&#39;s <code>[DynamoDBHashKey]</code> attribute:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DynamoDBHashKey</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This requires your models to have a dependency to the <strong>AWSSDK.DynamoDBv2</strong> NuGet package which can be avoided by using <strong>ServiceStack.Interfaces</strong> <code>[HashKey]</code> attribute instead which your models already likely have a reference to:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HashKey</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You can instead avoid any attributes using the explicit <strong>HashKey</strong> Naming convention:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> HashKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>For improved re-usability of your models you can instead use the generic annotations for defining a model&#39;s primary key:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PrimaryKey</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Alternative using the Universal <code>Id</code> naming convention:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If preferred both Hash and Range Keys can be defined together with the class-level <code>[CompositeKey]</code> attribute:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CompositeKey</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;CustomHash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CustomRange&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomHash <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomRange <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="specifying-a-range-key" tabindex="-1">Specifying a Range Key <a class="header-anchor" href="#specifying-a-range-key" aria-hidden="true">#</a></h3><p>For specifying the Range Key use can use the <strong>AWSSDK.DynamoDBv2</strong> Attribute:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DynamoDBRangeKey</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <strong>ServiceStack.Interfaces</strong> attribute:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RangeKey</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Or without attributes, using the explicit <code>RangeKey</code> property name:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> RangeKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h2><h3 id="dynamodbcacheclient" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack.Aws/blob/master/src/ServiceStack.Aws/DynamoDb/DynamoDbCacheClient.cs" target="_blank" rel="noopener noreferrer">DynamoDbCacheClient</a> <a class="header-anchor" href="#dynamodbcacheclient" aria-hidden="true">#</a></h3><p>We&#39;ve been quick to benefit from the productivity advantages of PocoDynamo ourselves where we&#39;ve used it to rewrite <a href="https://github.com/ServiceStack/ServiceStack.Aws/blob/master/src/ServiceStack.Aws/DynamoDb/DynamoDbCacheClient.cs" target="_blank" rel="noopener noreferrer">DynamoDbCacheClient</a> which is now just 2/3 the size and much easier to maintain than the existing <a href="https://github.com/ServiceStack/ServiceStack/blob/22aca105d39997a8ea4c9dc20b242f78e07f36e0/src/ServiceStack.Caching.AwsDynamoDb/DynamoDbCacheClient.cs" target="_blank" rel="noopener noreferrer">Community-contributed version</a> whilst at the same time extending it with even more functionality where it now implements the <code>ICacheClientExtended</code> API.</p><h3 id="dynamodbauthrepository" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack.Aws/blob/master/src/ServiceStack.Aws/DynamoDb/DynamoDbAuthRepository.cs" target="_blank" rel="noopener noreferrer">DynamoDbAuthRepository</a> <a class="header-anchor" href="#dynamodbauthrepository" aria-hidden="true">#</a></h3><p>PocoDynamo&#39;s code-first Typed API made it much easier to implement value-added DynamoDB functionality like the new <a href="https://github.com/ServiceStack/ServiceStack.Aws/blob/master/src/ServiceStack.Aws/DynamoDb/DynamoDbAuthRepository.cs" target="_blank" rel="noopener noreferrer">DynamoDbAuthRepository</a> which due sharing a similar code-first POCO approach to OrmLite, ended up being a straight-forward port of the existing <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Server/Auth/OrmLiteAuthRepository.cs" target="_blank" rel="noopener noreferrer">OrmLiteAuthRepository</a> where it was able to reuse the existing <code>UserAuth</code> and <code>UserAuthDetails</code> data models.</p><h3 id="dynamodbtests" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack.Aws/tree/master/tests/ServiceStack.Aws.DynamoDbTests" target="_blank" rel="noopener noreferrer">DynamoDbTests</a> <a class="header-anchor" href="#dynamodbtests" aria-hidden="true">#</a></h3><p>Despite its young age we&#39;ve added a comprehensive test suite behind PocoDynamo which has become our exclusive client for developing DynamoDB-powered Apps.</p><h3 id="aws-apps" tabindex="-1"><a href="http://awsapps.servicestack.net/" target="_blank" rel="noopener noreferrer">AWS Apps</a> <a class="header-anchor" href="#aws-apps" aria-hidden="true">#</a></h3><p>The <a href="https://github.com/ServiceStackApps/LiveDemos" target="_blank" rel="noopener noreferrer">Live Demos</a> below were rewritten from their original RDBMS and OrmLite backends to utilize a completely managed AWS Stack that now uses PocoDynamo and a DynamoDB-backend:</p><p><a href="http://awsrazor.servicestack.net/" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/aws/pocodynamo/examples-razor-rockstars.png" alt=""></a></p><p><a href="http://awsapps.servicestack.net/emailcontacts/" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/aws/pocodynamo/examples-email-contacts.png" alt=""></a></p><p><a href="http://awsapps.servicestack.net/todo/" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/aws/pocodynamo/examples-todos.png" alt=""></a></p><p><a href="http://awsapps.servicestack.net/awsauth/" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/aws/pocodynamo/examples-awsauth.png" alt=""></a></p><h2 id="ipococlient-api" tabindex="-1">IPocoClient API <a class="header-anchor" href="#ipococlient-api" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token comment">// Interface for the code-first PocoDynamo client</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPocoDynamo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPocoDynamoAsync</span><span class="token punctuation">,</span> <span class="token class-name">IRequiresSchema</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// Get the underlying AWS DynamoDB low-level client</span>
    <span class="token return-type class-name">IAmazonDynamoDB</span> DynamoDb <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Get the numeric unique Sequence generator configured with this client</span>
    <span class="token return-type class-name">ISequenceSource</span> Sequences <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Access the converters that converts POCO&#39;s into DynamoDB data types</span>
    <span class="token return-type class-name">DynamoConverters</span> Converters <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// How long should PocoDynamo keep retrying failed operations in an exponential backoff (default 60s)</span>
    <span class="token return-type class-name">TimeSpan</span> MaxRetryOnExceptionTimeout <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Get the AWSSDK DocumentModel schema for this Table</span>
    <span class="token return-type class-name">Table</span> <span class="token function">GetTableSchema</span><span class="token punctuation">(</span><span class="token class-name">Type</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get PocoDynamo Table metadata for this table</span>
    <span class="token return-type class-name">DynamoMetadataType</span> <span class="token function">GetTableMetadata</span><span class="token punctuation">(</span><span class="token class-name">Type</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Calls &#39;ListTables&#39; to return all Table Names in DynamoDB</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetTableNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Creates any tables missing in DynamoDB from the Tables registered with PocoDynamo</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CreateMissingTables</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>DynamoMetadataType<span class="token punctuation">&gt;</span></span> tables<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Creates any tables missing from the specified list of tables</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CreateTables</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>DynamoMetadataType<span class="token punctuation">&gt;</span></span> tables<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Deletes all DynamoDB Tables</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">DeleteAllTables</span><span class="token punctuation">(</span><span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Deletes the tables in DynamoDB with the specified table names</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">DeleteTables</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> tableNames<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Gets the POCO instance with the specified hash</span>
    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Gets the POCO instance with the specified hash and range value</span>
    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> hash<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> range<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Calls &#39;BatchGetItem&#39; in the min number of batch requests to return POCOs with the specified hashes </span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> hashes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Calls &#39;PutItem&#39; to store instance in DynamoDB</span>
    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">PutItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> returnOld <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Calls &#39;BatchWriteItem&#39; to efficiently store items in min number of batched requests</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">PutItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Deletes the instance at the specified hash</span>
    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">DeleteItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">ReturnItem</span> returnItem <span class="token operator">=</span> ReturnItem<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Calls &#39;BatchWriteItem&#39; to efficiently delete all items with the specified hashes</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DeleteItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> hashes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Calls &#39;BatchWriteItem&#39; to efficiently delete all items with the specified hash and range pairs</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DeleteItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>DynamoId<span class="token punctuation">&gt;</span></span> hashes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Calls &#39;UpdateItem&#39; with ADD AttributeUpdate to atomically increment specific field numeric value</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">Increment</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> hash<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fieldName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> amount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Polls &#39;DescribeTable&#39; until all Tables have an ACTIVE TableStatus</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">WaitForTablesToBeReady</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> tableNames<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Polls &#39;ListTables&#39; until all specified tables have been deleted</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">WaitForTablesToBeDeleted</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> tableNames<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Updates item Hash field with hash value then calls &#39;PutItem&#39; to store the related instance</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">PutRelatedItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Updates all item Hash fields with hash value then calls &#39;PutItems&#39; to store all related instances</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">PutRelatedItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Calls &#39;Query&#39; to return all related Items containing the specified hash value</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetRelatedItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Deletes all items with the specified hash and ranges</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DeleteRelatedItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> ranges<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Calls &#39;Scan&#39; to return lazy enumerated results that&#39;s transparently paged across multiple queries</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ScanAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Creates a Typed \`ScanExpression\` for the specified table</span>
    <span class="token return-type class-name">ScanExpression<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">FromScan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> filterExpression <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Creates a Typed \`ScanExpression\` for the specified Global Index</span>
    <span class="token return-type class-name">ScanExpression<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">FromScanIndex</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> filterExpression <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes the \`ScanExpression\` returning the specified maximum limit of results</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Scan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ScanExpression<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes the \`ScanExpression\` returning lazy results transparently paged across multiple queries</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Scan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ScanExpression<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes AWSSDK \`ScanRequest\` returning the specified maximum limit of results</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Scan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ScanRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes AWSSDK \`ScanRequest\` returning lazy results transparently paged across multiple queries</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Scan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ScanRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes AWSSDK \`ScanRequest\` with a custom conversion function to map ScanResponse to results</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Scan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ScanRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>ScanResponse<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Return Live ItemCount using Table ScanRequest</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">ScanItemCount</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Return cached ItemCount in summary DescribeTable</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">DescribeItemCount</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Creates a Typed \`QueryExpression\` for the specified table</span>
    <span class="token return-type class-name">QueryExpression<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">FromQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> keyExpression <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes the \`QueryExpression\` returning lazy results transparently paged across multiple queries</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">QueryExpression<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes the \`QueryExpression\` returning the specified maximum limit of results</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">QueryExpression<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Creates a Typed \`QueryExpression\` for the specified Local or Global Index</span>
    <span class="token return-type class-name">QueryExpression<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">FromQueryIndex</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> keyExpression <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes AWSSDK \`QueryRequest\` returning the specified maximum limit of results</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">QueryRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes AWSSDK \`QueryRequest\` returning lazy results transparently paged across multiple queries</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">QueryRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Executes AWSSDK \`QueryRequest\` with a custom conversion function to map QueryResponse to results</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">QueryRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>QueryResponse<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Create a clone of the PocoDynamo client with different default settings</span>
    <span class="token return-type class-name">IPocoDynamo</span> <span class="token function">ClientWith</span><span class="token punctuation">(</span>
        <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> consistentRead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> readCapacityUnits <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> writeCapacityUnits <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> pollTableStatus <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> maxRetryOnExceptionTimeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> limit <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> scanIndexForward <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Disposes the underlying IAmazonDynamoDB client</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Available API&#39;s with Async equivalents</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPocoDynamoAsync</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task</span> <span class="token function">CreateMissingTablesAsync</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>DynamoMetadataType<span class="token punctuation">&gt;</span></span> tables<span class="token punctuation">,</span> 
        <span class="token class-name">CancellationToken</span> token <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">CancellationToken</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task</span> <span class="token function">WaitForTablesToBeReadyAsync</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> tableNames<span class="token punctuation">,</span> 
        <span class="token class-name">CancellationToken</span> token <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">CancellationToken</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task</span> <span class="token function">InitSchemaAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="pocodynamo-extension-helpers" tabindex="-1">PocoDynamo Extension helpers <a class="header-anchor" href="#pocodynamo-extension-helpers" aria-hidden="true">#</a></h3><p>To maintain a minimumal surface area for PocoDynamo, many additional API&#39;s used to provide a more DRY typed API&#39;s were moved into <a href="https://github.com/ServiceStack/ServiceStack.Aws/blob/master/src/ServiceStack.Aws/DynamoDb/PocoDynamoExtensions.cs" target="_blank" rel="noopener noreferrer">PocoDynamoExtensions</a></p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">PocoDynamoExtensions</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Register Table</span>
    <span class="token return-type class-name">DynamoMetadataType</span> <span class="token generic-method"><span class="token function">RegisterTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">DynamoMetadataType</span> <span class="token function">RegisterTable</span><span class="token punctuation">(</span><span class="token class-name">Type</span> tableType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RegisterTables</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> tableTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddValueConverter</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">IAttributeValueConverter</span> valueConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Get Table Metadata</span>
    <span class="token return-type class-name">Table</span> <span class="token generic-method"><span class="token function">GetTableSchema</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">DynamoMetadataType</span> <span class="token generic-method"><span class="token function">GetTableMetadata</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Create Table</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">CreateTableIfMissing</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CreateTableIfMissing</span><span class="token punctuation">(</span><span class="token class-name">DynamoMetadataType</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">CreateTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">DeleteTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Decrement API&#39;s</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">DecrementById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> id<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fieldName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> amount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">IncrementById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> id<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fieldExpr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> amount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">DecrementById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> id<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fieldExpr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> amount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetItem</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">DynamoId</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Typed API overloads for popular hash object ids</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DeleteItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DeleteItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DeleteItems</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Scan Helpers</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ScanInto</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ScanExpression</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ScanInto</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ScanExpression</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Query Helpers</span>
    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">QueryInto</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">QueryExpression</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">QueryInto</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">QueryExpression</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>__VP_STATIC_END__`,297),i=[c,l,u];function r(k,d,m,h,y,g){return e(),t("div",null,i)}var f=a(o,[["render",r]]);export{b as __pageData,f as default};
