import{_ as e}from"./servicestack-mqclients.b6ea907e.js";import{_ as t}from"./servicestack-logical-view-02.c9437c74.js";import{_ as a,c as o,o as c,b as s,e as n}from"./app.14440598.js";const Bn=`{"title":"Messaging API","description":"","frontmatter":{"slug":"messaging","title":"Messaging API"},"headers":[{"level":2,"title":"Mix in MQ Server","slug":"mix-in-mq-server"},{"level":2,"title":"Worker Service Templates","slug":"worker-service-templates"},{"level":3,"title":"feature-mq","slug":"feature-mq"},{"level":2,"title":"Benefits of Message Queues","slug":"benefits-of-message-queues"},{"level":2,"title":"MQ Client Architecture","slug":"mq-client-architecture"},{"level":2,"title":"MQ Server Architecture","slug":"mq-server-architecture"},{"level":2,"title":"Message Workflow","slug":"message-workflow"},{"level":3,"title":"Messages with no responses are sent to '.outq' Topic","slug":"messages-with-no-responses-are-sent-to-outq-topic"},{"level":3,"title":"Messages with Responses are published to the Response .inq","slug":"messages-with-responses-are-published-to-the-response-inq"},{"level":3,"title":"Responses from Messages with ReplyTo are published to that address","slug":"responses-from-messages-with-replyto-are-published-to-that-address"},{"level":3,"title":"Messages with exceptions are re-tried then published to the dead-letter-queue (.dlq)","slug":"messages-with-exceptions-are-re-tried-then-published-to-the-dead-letter-queue-dlq"},{"level":3,"title":"Priority Queues","slug":"priority-queues"},{"level":3,"title":"OneWay HTTP Requests are published to MQ then executed","slug":"oneway-http-requests-are-published-to-mq-then-executed"},{"level":3,"title":"OneWay MQ and HTTP Service Clients are Substitutable","slug":"oneway-mq-and-http-service-clients-are-substitutable"},{"level":3,"title":"Disable 'outq' notification messages","slug":"disable-outq-notification-messages"},{"level":2,"title":"Authenticated Requests via MQ","slug":"authenticated-requests-via-mq"},{"level":3,"title":"Embedding Auth Info in MQ Request DTO","slug":"embedding-auth-info-in-mq-request-dto"},{"level":3,"title":"Overriding MQ Request Headers","slug":"overriding-mq-request-headers"},{"level":3,"title":"Global Filters vs Action Filters","slug":"global-filters-vs-action-filters"}],"relativePath":"messaging.md","lastUpdated":1634495308422}`,l={},p=s("p",null,[n("ServiceStack provides a "),s("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Messaging/",target:"_blank",rel:"noopener noreferrer"},"high-level Messaging API"),n(" exposing a number of essential messaging features in order to publish and receive messages as well as registering and processing handlers for different message types. A class diagram of the core interfaces is below:")],-1),i=s("p",null,[s("img",{src:"https://raw.github.com/mythz/rabbitmq-windows/master/img/messaging-api.png",alt:"Messaging API"})],-1),u=s("p",null,"There are currently 5 supported MQ Server options:",-1),r=s("ul",null,[s("li",null,[s("a",{href:"/background-mq.html"},"Background MQ Service")]),s("li",null,[s("a",{href:"/rabbit-mq.html"},"Rabbit MQ Server")]),s("li",null,[s("a",{href:"/redis-mq.html"},"Redis MQ Server")]),s("li",null,[s("a",{href:"/amazon-sqs-mq.html"},"Amazon SQS MQ Server")]),s("li",null,[s("a",{href:"/azure-service-bus-mq.html"},"Azure Service Bus MQ")])],-1),k=s("p",null,"Like other ServiceStack providers, all MQ Servers are interchangeable, visible in the shared MQ Server tests below:",-1),d=s("ul",null,[s("li",null,[s("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Server.Tests/Messaging/MqServerIntroTests.cs",target:"_blank",rel:"noopener noreferrer"},"MqServerIntroTests.cs")]),s("li",null,[s("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.Common.Tests/Messaging/MqServerAppHostTests.cs",target:"_blank",rel:"noopener noreferrer"},"MqServerAppHostTests.cs")])],-1),h=s("h2",{id:"mix-in-mq-server",tabindex:"-1"},[n("Mix in MQ Server "),s("a",{class:"header-anchor",href:"#mix-in-mq-server","aria-hidden":"true"},"#")],-1),m=s("p",null,[n("In "),s("a",{href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},"ASP.NET"),n(" Core Apps we recommend using "),s("a",{href:"/mix-tool.html"},"mix"),n(" to configure your preferred MQ Service, other than being quicker to add, it proposes adopting a naming convention in app settings and file names that other "),s("code",null,"mix"),n(" features can also make use of:")],-1),g=s("div",{class:"language-bash"},[s("pre",null,[s("code",null,[n("$ x mix "),s("span",{class:"token punctuation"},"["),n("mq"),s("span",{class:"token punctuation"},"]"),n(`
`)])])],-1),y=s("p",null,"Currently available list of MQ Services:",-1),f=s("div",{class:"language-"},[s("pre",null,[s("code",null,`Results matching tag [mq]:

   1. backgroundmq  Use Memory Background MQ                    to: $HOST  by @ServiceStack  [mq]
   2. rabbitmq      Use RabbitMQ                                to: $HOST  by @ServiceStack  [mq]
   3. sqs           Use AWS SQS MQ                              to: $HOST  by @ServiceStack  [mq]
   4. servicebus    Use Azure Service Bus MQ                    to: $HOST  by @ServiceStack  [mq]
   5. redismq       Use Redis MQ                                to: $HOST  by @ServiceStack  [mq]
   6. feature-mq    Simple MQ Feature to test sending Messages  to: $HOST  by @ServiceStack  [feature,mq,sharp]
`)])],-1),w=s("h2",{id:"worker-service-templates",tabindex:"-1"},[n("Worker Service Templates "),s("a",{class:"header-anchor",href:"#worker-service-templates","aria-hidden":"true"},"#")],-1),v=s("p",null,[n("If you'd instead prefer to develop stand-alone MQ Servers (i.e. without HTTP access) then it can be beneficial to run the MQ Server in an "),s("a",{href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},"ASP.NET"),n(" Core Worker Service by starting from a pre-configured project template:")],-1),b=s("table",null,[s("thead",null,[s("tr",null,[s("th"),s("th",null,".NET Core C# Worker Service Templates")])]),s("tbody",null,[s("tr",null,[s("td",null,[s("a",{href:"https://github.com/NetCoreTemplates/worker-rabbitmq",target:"_blank",rel:"noopener noreferrer"},"worker-rabbitmq")]),s("td",null,".NET 5.0 Rabbit MQ Worker Service")]),s("tr",null,[s("td",null,[s("a",{href:"https://github.com/NetCoreTemplates/worker-redismq",target:"_blank",rel:"noopener noreferrer"},"worker-redismq")]),s("td",null,".NET 5.0 Redis MQ Worker Service")]),s("tr",null,[s("td",null,[s("a",{href:"https://github.com/NetCoreTemplates/worker-servicebus",target:"_blank",rel:"noopener noreferrer"},"worker-servicebus")]),s("td",null,".NET 5.0 Azure Service Bus MQ Worker Service")]),s("tr",null,[s("td",null,[s("a",{href:"https://github.com/NetCoreTemplates/worker-sqs",target:"_blank",rel:"noopener noreferrer"},"worker-sqs")]),s("td",null,".NET 5.0 AWS SQS MQ Worker Service")])])],-1),q=s("h3",{id:"feature-mq",tabindex:"-1"},[n("feature-mq "),s("a",{class:"header-anchor",href:"#feature-mq","aria-hidden":"true"},"#")],-1),_=s("p",null,[n("The "),s("code",null,"feature-mq"),n(" adds MQ support to your App, complete with UI and includes 2 different ways of calling MQ Services in ServiceStack, just like "),s("a",{href:"/mix-tool.html#mix-in-prebuilt-recipes-and-working-examples"},"example-validation UI"),n(", "),s("code",null,"feature-mq"),n(" is another complete working example with both UI and Service implementation in the following files:")],-1),S=s("ul",null,[s("li",null,[s("a",{href:"https://gist.github.com/gistlyn/355338cd60a32ee9c9fc4761269f7782#file-configure-mq-cs",target:"_blank",rel:"noopener noreferrer"},"Configure.Mq.cs?")]),s("li",null,[s("a",{href:"https://gist.github.com/gistlyn/355338cd60a32ee9c9fc4761269f7782#file-feature-mq-cs",target:"_blank",rel:"noopener noreferrer"},"Feature.Mq.cs")]),s("li",null,[s("a",{href:"https://gist.github.com/gistlyn/355338cd60a32ee9c9fc4761269f7782#file-serviceinterface-mqservices-cs",target:"_blank",rel:"noopener noreferrer"},"ServiceInterface\\MqServices.cs ")]),s("li",null,[s("a",{href:"https://gist.github.com/gistlyn/355338cd60a32ee9c9fc4761269f7782#file-servicemodel-mq-cs",target:"_blank",rel:"noopener noreferrer"},"ServiceModel\\Mq.cs")]),s("li",null,[s("a",{href:"https://gist.github.com/gistlyn/355338cd60a32ee9c9fc4761269f7782#file-wwwroot-messaging-html",target:"_blank",rel:"noopener noreferrer"},"wwwroot\\messaging.html")])],-1),M=s("p",null,[n("As "),s("code",null,"Configure.Mq.cs?"),n(" is optional it will only add it if doesn't already exist, so it will either use your existing MQ configuration or configure your App to use the In Memory "),s("code",null,"BackgroundMqService"),n(" implementation.")],-1),T=s("p",null,[n("Add "),s("code",null,"feature-mq"),n(" to your project with:")],-1),R=s("div",{class:"language-bash"},[s("pre",null,[s("code",null,`$ x mix feature-mq
`)])],-1),A=s("p",null,[s("img",{src:"https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/nav/feature-mq.png",alt:""})],-1),Q=s("p",null,[n("This will add the "),s("code",null,"TestMq"),n(" Service and make it available to your MQ endpoint. "),s("code",null,"TestMq"),n(" is a regular service that updates values in the App's registered "),s("code",null,"ICacheClient"),n(" and returns the Cache's current values as well as the internal Stats of the MQ:")],-1),x=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"MqServices"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},"Service")]),n(`
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},"IMessageService"),n(" MqService "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"get"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token keyword"},"set"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`

    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"void")]),n(),s("span",{class:"token function"},"Any"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"PublishMq"),n(" request"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token function"},"PublishMessage"),s("span",{class:"token punctuation"},"("),n("request"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"ConvertTo"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("TestMq"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`

    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"object")]),n(),s("span",{class:"token function"},"Any"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TestMq"),n(" request"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),s("span",{class:"token keyword"},"string"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"IsNullOrEmpty"),s("span",{class:"token punctuation"},"("),n("request"),s("span",{class:"token punctuation"},"."),n("Name"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(`
            Cache`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Set"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"mq.name"'),s("span",{class:"token punctuation"},","),n(" request"),s("span",{class:"token punctuation"},"."),n("Name"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        
        `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("request"),s("span",{class:"token punctuation"},"."),n("Add "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`
            Cache`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Increment"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"mq.counter"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"uint"),s("span",{class:"token punctuation"},")"),n("request"),s("span",{class:"token punctuation"},"."),n("Add"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("request"),s("span",{class:"token punctuation"},"."),n("Add "),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`
            Cache`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Decrement"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"mq.counter"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"uint"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"("),n("request"),s("span",{class:"token punctuation"},"."),n("Add "),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

        `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"TestMqResponse"),n(),s("span",{class:"token punctuation"},"{"),n(`
            Name `),s("span",{class:"token operator"},"="),n(" Cache"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token keyword"},"string"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"mq.name"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
            Counter `),s("span",{class:"token operator"},"="),n(" Cache"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token keyword"},"long"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"mq.counter"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
            StatsDescription `),s("span",{class:"token operator"},"="),n(" MqService"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetStatsDescription"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),H=s("p",null,[n("The 2 ways to call a MQ Service is directly using the "),s("code",null,"publish"),n(" or "),s("code",null,"sendOneWay"),n(" APIs (available in all ServiceStack Service Clients) where it send the request to the Service's "),s("code",null,"/oneway"),n(" endpoint which will automatically publish it to the registered MQ.")],-1),C=s("p",null,[n("Alternatively you can publish the Request DTO yourself from a different Service Implementation as done in "),s("code",null,"PublishMq"),n(", as-is typical for Services that queues sending emails without blocking Service Execution.")],-1),I=s("p",null,[n("The feature's UI allows you to publish "),s("code",null,"TestMq"),n(" messages using either approach:")],-1),P=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[n("client "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"JsonServiceClient"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'/'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token keyword"},"var"),n(" oneway "),s("span",{class:"token operator"},"="),n(" document"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"querySelector"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'input[name=mq-publish]:checked'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("value "),s("span",{class:"token operator"},"==="),n(),s("span",{class:"token string"},'"OneWay"'),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("oneway"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    client`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"TestMq"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{"),n(" name"),s("span",{class:"token operator"},":"),n(" $txtName"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},","),n(" add"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token function"},"parseInt"),s("span",{class:"token punctuation"},"("),n("add"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
    client`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"post"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"PublishMq"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{"),n(" name"),s("span",{class:"token operator"},":"),n(" $txtName"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},","),n(" add"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token function"},"parseInt"),s("span",{class:"token punctuation"},"("),n("add"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),O=s("p",null,[n("Both approaches end with the same result with the "),s("code",null,"TestMq"),n(" Request DTO published and executed by the registered MQ Service as shown in the UI which is periodically updated with the current state in the Cache and the internal stats of the MQ Service showing how many messages it processed.")],-1),N=s("h2",{id:"benefits-of-message-queues",tabindex:"-1"},[n("Benefits of Message Queues "),s("a",{class:"header-anchor",href:"#benefits-of-message-queues","aria-hidden":"true"},"#")],-1),U=s("p",null,"One of the benefits of using ServiceStack is its integrated support for hosting MQ Servers allowing your Services to be invoked via a MQ Broker. There are a number of reasons why you'd want to use a MQ as an alternative to HTTP including:",-1),W=s("ul",null,[s("li",null,"Sender is decoupled from Receiver, eliminating point-to-point coupling and configuration"),s("li",null,"Allows no-touch deploy of new clients and servers without updating any configuration"),s("li",null,"Removes time-coupling allowing clients and servers to be deployed independently without downtime"),s("li",null,"Better reliability, consumers can still send messages when servers are down and vice-versa"),s("li",null,"Durable, messages can be persisted and survive application or server reboots"),s("li",null,"Allows for CPU Intensive or long operations without disrupting message workflow"),s("li",null,"Instant response times by queuing slow operations and executing them in the background"),s("li",null,"Allows for natural load-balancing where throughput can be increased by simply adding more processors or servers"),s("li",null,"Message-based design allows for easier parallelization and introspection of computations"),s("li",null,"Greater throttling and control of message throughput, message execution can be determined by server"),s("li",null,"Reduces request contention and can defer execution of high load spikes over time"),s("li",null,"Better recovery, messages generating server exceptions can be retried and maintained in a dead-letter-queue"),s("li",null,"DLQ messages can be introspected, fixed and later replayed after server updates and rejoin normal message workflow")],-1),B=s("p",null,[n("More details of these and other advantages can be found in the definitive "),s("a",{href:"http://www.eaipatterns.com",target:"_blank",rel:"noopener noreferrer"},"Enterprise Integration Patterns"),n(".")],-1),G=s("p",null,[n("Likewise the HTTP Service Clients implement the Messaging API "),s("code",null,"IMessageProducer"),n(":")],-1),D=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"void")]),n(),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Publish"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("T"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"T"),n(" requestDto"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"void")]),n(),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Publish"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("T"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},[n("IMessage"),s("span",{class:"token punctuation"},"<"),n("T"),s("span",{class:"token punctuation"},">")]),n(" message"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),E=s("p",null,[n("When publishing a "),s("code",null,"IMessage<T>"),n(" the message metadata are sent as HTTP Headers with an "),s("code",null,"X-"),n(" prefix.")],-1),F=s("h2",{id:"mq-client-architecture",tabindex:"-1"},[n("MQ Client Architecture "),s("a",{class:"header-anchor",href:"#mq-client-architecture","aria-hidden":"true"},"#")],-1),j=s("p",null,"By promoting clean (endpoint-ignorant and dependency-free) Service and DTO classes, your web services are instantly re-usable from non-http contexts like MQ Services.",-1),$=s("p",null,[n("Within MQ Services, Request DTO's get wrapped and sent within the "),s("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Messaging/IMessage.cs",target:"_blank",rel:"noopener noreferrer"},"IMessage"),n(" body, which looks like:")],-1),z=s("p",null,[s("img",{src:e,alt:"ServiceStack MQ Client Architecture"})],-1),L=s("h2",{id:"mq-server-architecture",tabindex:"-1"},[n("MQ Server Architecture "),s("a",{class:"header-anchor",href:"#mq-server-architecture","aria-hidden":"true"},"#")],-1),V=s("p",null,`The Server Architecture shows where MQ Hosts (in green) fits within the context of ServiceStack's Request Pipeline. Effectively MQ Services are treated as "internal Services" bypassing HTTP Web Services Content Negotiation and Global Request/Response Filters:`,-1),J=s("p",null,[s("img",{src:t,alt:"ServiceStack Logical Architecture View"})],-1),X=s("p",null,[n("MQ Services also have their own distinct "),s("code",null,"GlobalMessageRequestFilters"),n(" and "),s("code",null,"GlobalMessageResponseFilters"),n(" for registering custom logic that only applies to MQ Requests. Plugins like "),s("a",{href:"/validation.html#validation-feature"},"Validation Feature"),n(" can execute custom behavior for both HTTP and MQ Services by registering it in "),s("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/fc191835d97e5b6d89d3cd7a4742793af44eb8c3/src/ServiceStack/Validation/ValidationFeature.cs#L25-L29",target:"_blank",rel:"noopener noreferrer"},"both HTTP GlobalRequestFilters and MQ GlobalMessageRequestFilters"),n(", e.g:")],-1),Y=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("appHost"),s("span",{class:"token punctuation"},"."),n("GlobalRequestFilters"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Add"),s("span",{class:"token punctuation"},"("),n("ValidationFilters"),s("span",{class:"token punctuation"},"."),n("RequestFilter"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
appHost`),s("span",{class:"token punctuation"},"."),n("GlobalMessageRequestFilters"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Add"),s("span",{class:"token punctuation"},"("),n("ValidationFilters"),s("span",{class:"token punctuation"},"."),n("RequestFilter"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),K=s("h2",{id:"message-workflow",tabindex:"-1"},[n("Message Workflow "),s("a",{class:"header-anchor",href:"#message-workflow","aria-hidden":"true"},"#")],-1),Z=s("p",null,"By default, MQ Servers will send a response message after it's processed each message, what the response is and which Queue (or HTTP url) the response is published to is dependent on the outcome of the message handler, i.e:",-1),ss=s("p",null,[s("img",{src:"https://raw.githubusercontent.com/ServiceStack/Assets/master/img/wikis/message-flow.png",alt:"MQ Flowchart"})],-1),ns=s("h3",{id:"messages-with-no-responses-are-sent-to-outq-topic",tabindex:"-1"},[n("Messages with no responses are sent to '.outq' Topic "),s("a",{class:"header-anchor",href:"#messages-with-no-responses-are-sent-to-outq-topic","aria-hidden":"true"},"#")],-1),es=s("p",null,[n("When a handler returns a "),s("code",null,"null"),n(' response, the incoming message is re-published as a "transient" message to the out queue, e.g: '),s("code",null,"mq:Hello.outq"),n(" having the effect of notifying any subscribers to "),s("code",null,"mq:Hello.outq"),n(" each time a message is processed.")],-1),ts=s("p",null,"We can use this behavior to block until a message gets processed with:",-1),as=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},[n("IMessage"),s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")]),n(" msgCopy "),s("span",{class:"token operator"},"="),n(" mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("QueueNames"),s("span",{class:"token operator"},"<"),n("Hello"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"."),n("Out"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Ack"),s("span",{class:"token punctuation"},"("),n("msgCopy"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
msgCopy`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("Name "),s("span",{class:"token comment"},"//= World"),n(`
`)])])],-1),os=s("p",null,[n("Also shown in this example is an explicit "),s("strong",null,"Ack"),n(" (which should be done for each message you receive) to tell the MQ Broker that you've taken responsibility of the message so it can safely remove it off the queue.")],-1),cs=s("h3",{id:"messages-with-responses-are-published-to-the-response-inq",tabindex:"-1"},[n("Messages with Responses are published to the Response .inq "),s("a",{class:"header-anchor",href:"#messages-with-responses-are-published-to-the-response-inq","aria-hidden":"true"},"#")],-1),ls=s("p",null,"Often message handlers will just return a POCO response after it processes a message, e.g:",-1),ps=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("mqServer"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"RegisterHandler"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("m "),s("span",{class:"token operator"},"=>"),n(`
    `),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"HelloResponse"),n(),s("span",{class:"token punctuation"},"{"),n(" Result "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token interpolation-string"},[s("span",{class:"token string"},'$"Hello, '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"{"),s("span",{class:"token expression language-csharp"},[n("m"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("Name")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'!"')]),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),is=s("p",null,[n("Whenever there's a response, then instead of the .outq the response message is sent to the "),s("strong",null,".inq"),n(" of the response message type, which for a "),s("code",null,"HelloResponse"),n(" type is just "),s("strong",null,"mq:HelloResponse.inq"),n(", e.g:")],-1),us=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"Hello"),n(),s("span",{class:"token punctuation"},"{"),n(" Name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"World"'),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" responseMsg "),s("span",{class:"token operator"},"="),n(" mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("HelloResponse"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("QueueNames"),s("span",{class:"token operator"},"<"),n("HelloResponse"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"."),n("In"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Ack"),s("span",{class:"token punctuation"},"("),n("responseMsg"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
responseMsg`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("Result "),s("span",{class:"token comment"},"//= Hello, World!"),n(`
`)])])],-1),rs=s("div",{class:"info custom-block"},[s("p",{class:"custom-block-title"},"INFO"),s("p",null,[n("this behavior can be limited to only publish responses for types in the "),s("code",null,"mqServer.PublishResponsesWhitelist"),n(", otherwise all response messages can be disabled entirely by setting "),s("code",null,"mqServer.DisablePublishingResponses = true"),n(".")])],-1),ks=s("h3",{id:"responses-from-messages-with-replyto-are-published-to-that-address",tabindex:"-1"},[n("Responses from Messages with ReplyTo are published to that address "),s("a",{class:"header-anchor",href:"#responses-from-messages-with-replyto-are-published-to-that-address","aria-hidden":"true"},"#")],-1),ds=s("p",null,[n("Whilst for the most part you'll only need to publish POCO messages, you can also alter the default behavior by providing a customized "),s("code",null,"IMessage<T>"),n(" wrapper which ServiceStack will send instead, e.g. you can specify your own "),s("strong",null,"ReplyTo"),n(" address to change the queue where the response gets published, e.g:")],-1),hs=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),n(),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"string")]),n(" replyToMq "),s("span",{class:"token operator"},"="),n(" mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetTempQueueName"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},[n("Message"),s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"Hello"),n(),s("span",{class:"token punctuation"},"{"),n(" Name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"World"'),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    ReplyTo `),s("span",{class:"token operator"},"="),n(` replyToMq
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token class-name"},[n("IMessage"),s("span",{class:"token punctuation"},"<"),n("HelloResponse"),s("span",{class:"token punctuation"},">")]),n(" responseMsg "),s("span",{class:"token operator"},"="),n(" mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("HelloResponse"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("replyToMq"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Ack"),s("span",{class:"token punctuation"},"("),n("responseMsg"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
responseMsg`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("Result "),s("span",{class:"token comment"},"//= Hello, World!"),n(`
`)])])],-1),ms=s("h4",{id:"replyto-addresses-can-be-urls",tabindex:"-1"},[n("ReplyTo addresses can be URLs "),s("a",{class:"header-anchor",href:"#replyto-addresses-can-be-urls","aria-hidden":"true"},"#")],-1),gs=s("p",null,[n("A nice feature unique in ServiceStack is that the ReplyTo address can even be a "),s("strong",null,"HTTP Uri"),n(", in which case ServiceStack will attempt to "),s("strong",null,"POST"),n(" the raw response at that address. This works nicely with ServiceStack Services which excel at accepting serialized DTO's.")],-1),ys=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},[n("Message"),s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"Hello"),n(),s("span",{class:"token punctuation"},"{"),n(" Name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"World"'),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    ReplyTo `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"http://example.org/hello/callback"'),n(`
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),fs=s("h3",{id:"messages-with-exceptions-are-re-tried-then-published-to-the-dead-letter-queue-dlq",tabindex:"-1"},[n("Messages with exceptions are re-tried then published to the dead-letter-queue (.dlq) "),s("a",{class:"header-anchor",href:"#messages-with-exceptions-are-re-tried-then-published-to-the-dead-letter-queue-dlq","aria-hidden":"true"},"#")],-1),ws=s("p",null,"By default Mq Servers lets you specify whether or not you want messages that cause an exception to be retried by specifying a RetryCount of 1 (default), or if you don't want any messages re-tried, specify a value of 0, e.g:",-1),vs=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" mqServer "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"RabbitMqServer"),n(),s("span",{class:"token punctuation"},"{"),n(" RetryCount "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),bs=s("p",null,"To illustrate how this works we'll keep a counter of how many times a message handler is invoked, then throw an exception to force an error condition, e.g:",-1),qs=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" called "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(`
mqServer`),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"RegisterHandler"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("m "),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"{"),n(`
    called`),s("span",{class:"token operator"},"++"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"throw"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"ArgumentException"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Name"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),_s=s("p",null,[n("Now when we publish a message the response instead gets published to the messages "),s("strong",null,".dlq"),n(", after it's first transparently retried. We can verify this behavior by checking "),s("code",null,"called=2"),n(":")],-1),Ss=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"Hello"),n(),s("span",{class:"token punctuation"},"{"),n(" Name "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"World"'),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token class-name"},[n("IMessage"),s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")]),n(" dlqMsg "),s("span",{class:"token operator"},"="),n(" mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("QueueNames"),s("span",{class:"token operator"},"<"),n("Hello"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"."),n("Dlq"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Ack"),s("span",{class:"token punctuation"},"("),n("dlqMsg"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

Assert`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"That"),s("span",{class:"token punctuation"},"("),n("called"),s("span",{class:"token punctuation"},","),n(" Is"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"EqualTo"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),Ms=s("p",null,[n("DLQ Messages retains the original message in their body as well as the last exception serialized in the "),s("code",null,"IMessage.Error"),n(" ResponseStatus metadata property, e.g:")],-1),Ts=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("dlqMsg"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("Name   "),s("span",{class:"token comment"},"//= World"),n(`
dlqMsg`),s("span",{class:"token punctuation"},"."),n("Error"),s("span",{class:"token punctuation"},"."),n("ErrorCode  "),s("span",{class:"token comment"},"//= typeof(ArgumentException).Name"),n(`
dlqMsg`),s("span",{class:"token punctuation"},"."),n("Error"),s("span",{class:"token punctuation"},"."),n("Message    "),s("span",{class:"token comment"},"//= Name"),n(`
`)])])],-1),Rs=s("p",null,"Since the body of the original message is left in-tact, you're able to retry failed messages by removing them from the dead-letter-queue then re-publishing the original message, e.g:",-1),As=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},[n("IMessage"),s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")]),n(" dlqMsg "),s("span",{class:"token operator"},"="),n(" mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("Hello"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("QueueNames"),s("span",{class:"token operator"},"<"),n("Hello"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"."),n("Dlq"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Publish"),s("span",{class:"token punctuation"},"("),n("dlqMsg"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Ack"),s("span",{class:"token punctuation"},"("),n("dlqMsg"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),Qs=s("p",null,"This is useful for recovering failed messages after identifying and fixing bugs that were previously causing exceptions, where you can replay and re-process DLQ messages and continue processing them as normal.",-1),xs=s("h3",{id:"priority-queues",tabindex:"-1"},[n("Priority Queues "),s("a",{class:"header-anchor",href:"#priority-queues","aria-hidden":"true"},"#")],-1),Hs=s("p",null,[n("MQ Servers spawns 2 threads for each handler, one to listen to the Message Inbox "),s("code",null,"mq:<Message>.inq"),n(" and another to listen on the Priority Queue located at "),s("code",null,"mq:<Message>.priorityq"),n(".")],-1),Cs=s("p",null,[n("You can white-list which messages to enable Priority Queue's for with "),s("code",null,"mqServer.PriorityQueuesWhitelist"),n(" or disable them all by setting:")],-1),Is=s("div",{class:"language-cs"},[s("pre",null,[s("code",null,[n("mqServer"),s("span",{class:"token punctuation"},"."),n("DisablePriorityQueues "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),Ps=s("h3",{id:"oneway-http-requests-are-published-to-mq-then-executed",tabindex:"-1"},[n("OneWay HTTP Requests are published to MQ then executed "),s("a",{class:"header-anchor",href:"#oneway-http-requests-are-published-to-mq-then-executed","aria-hidden":"true"},"#")],-1),Os=s("p",null,[n("Using the "),s("code",null,"SendOneWay()"),n(" Service Client APIs will publish DTO's to the "),s("code",null,"/oneway"),n(),s("a",{href:"/routing.html#pre-defined-routes"},"Pre-defined Route"),n(":")],-1),Ns=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" client "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"JsonServiceClient"),s("span",{class:"token punctuation"},"("),n("BaseUrl"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
client`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"SendOneWay"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"RequestDto"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token range operator"},".."),s("span",{class:"token punctuation"},"."),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//POST's to /json/oneway/RequestDto"),n(`
`)])])],-1),Us=s("p",null,"Where if there is an MQ Server is registered in the AppHost it will instead publish the Request DTO to the registered MQ Server who then pulls it from the MQ Broker and executes the message in a background thread like a normal MQ Message. If no MQ Server is registered then the Request is executed in the HTTP Handler like a normal HTTP Request.",-1),Ws=s("h3",{id:"oneway-mq-and-http-service-clients-are-substitutable",tabindex:"-1"},[n("OneWay MQ and HTTP Service Clients are Substitutable "),s("a",{class:"header-anchor",href:"#oneway-mq-and-http-service-clients-are-substitutable","aria-hidden":"true"},"#")],-1),Bs=s("p",null,[n("Service Clients and MQ Clients are also interoperable where all MQ Clients implement the Service Clients "),s("code",null,"IOneWayClient"),n(" API which enables writing code that works with both HTTP and MQ Clients:")],-1),Gs=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},"IOneWayClient"),n(" client "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"GetClient"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
client`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"SendOneWay"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"RequestDto"),n(),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token range operator"},".."),s("span",{class:"token punctuation"},"."),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),Ds=s("h3",{id:"disable-outq-notification-messages",tabindex:"-1"},[n("Disable 'outq' notification messages "),s("a",{class:"header-anchor",href:"#disable-outq-notification-messages","aria-hidden":"true"},"#")],-1),Es=s("p",null,[n("All MQ Servers support the ability to specify a whitelist of Requests you "),s("strong",null,"only"),n(" want to publish "),s("code",null,".outq"),n(" for:")],-1),Fs=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("PublishToOutqWhitelist "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"nameof"),s("span",{class:"token punctuation"},"("),n("MyRequest"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),js=s("p",null,[n("Alternatively all "),s("code",null,".outq"),n(" messages can be disabled with:")],-1),$s=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("DisablePublishingToOutq "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"true"),n(`
`)])])],-1),zs=s("h2",{id:"authenticated-requests-via-mq",tabindex:"-1"},[n("Authenticated Requests via MQ "),s("a",{class:"header-anchor",href:"#authenticated-requests-via-mq","aria-hidden":"true"},"#")],-1),Ls=s("p",null,[n("As MQ Requests aren't executed within the Context of a HTTP Request they don't have access to any HTTP Info like HTTP Cookies, Headers, FormData, etc. This also means the Users Session isn't typically available as it's based on the "),s("a",{href:"/sessions.html"},"ss-id Session Ids in Cookies"),n(".")],-1),Vs=s("h3",{id:"embedding-auth-info-in-mq-request-dto",tabindex:"-1"},[n("Embedding Auth Info in MQ Request DTO "),s("a",{class:"header-anchor",href:"#embedding-auth-info-in-mq-request-dto","aria-hidden":"true"},"#")],-1),Js=s("p",null,[n("The easiest way to publish Authenticated MQ Requests is using the "),s("a",{href:"/encrypted-messaging.html#authentication-with-encrypted-messaging"},"same approach as Encrypted Messaging"),n(" by embedding the Auth Info in the Request DTO by implementing "),s("code",null,"IHasSessionId"),n(" if using session-based Authentication or "),s("code",null,"IHasBearerToken"),n(" if using token-based Auth, e.g:")],-1),Xs=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AuthSessionMq"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},"IHasSessionId")]),n(`
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"string")]),n(" SessionId "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"get"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token keyword"},"set"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
    `),s("span",{class:"token comment"},"//..."),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AuthTokenMq"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},"IHasBearerToken")]),n(`
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"string")]),n(" BearerToken "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"get"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token keyword"},"set"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
    `),s("span",{class:"token comment"},"//..."),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"MqServices"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},"Service")]),n(`
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"void")]),n(),s("span",{class:"token function"},"Any"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"PublishSessionMq"),n(" request"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" mqRequest "),s("span",{class:"token operator"},"="),n(" request"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"ConvertTo"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("AuthSessionMq"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        mqRequest`),s("span",{class:"token punctuation"},"."),n("SessionId "),s("span",{class:"token operator"},"="),n(" Request"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetSessionId"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token function"},"PublishMessage"),s("span",{class:"token punctuation"},"("),n("mqRequest"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`

    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"void")]),n(),s("span",{class:"token function"},"Any"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"PublishTokenMq"),n(" request"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" mqRequest "),s("span",{class:"token operator"},"="),n(" request"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"ConvertTo"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("AuthTokenMq"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        mqRequest`),s("span",{class:"token punctuation"},"."),n("BearerToken "),s("span",{class:"token operator"},"="),n(" Request"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetSessionId"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token function"},"PublishMessage"),s("span",{class:"token punctuation"},"("),n("mqRequest"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),Ys=s("h3",{id:"overriding-mq-request-headers",tabindex:"-1"},[n("Overriding MQ Request Headers "),s("a",{class:"header-anchor",href:"#overriding-mq-request-headers","aria-hidden":"true"},"#")],-1),Ks=s("p",null,[n("Alternatively as ServiceStack also lets you specify a Users Session ids using HTTP Headers (with "),s("code",null,"X-"),n(" prefix), we can instead specify Session Ids using Request Headers. To do this we can create a custom Request Context that the MQ Service is executed within and set the SessionId in the Headers:")],-1),Zs=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" req "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"BasicRequest"),n(),s("span",{class:"token punctuation"},"{"),n(" Verb "),s("span",{class:"token operator"},"="),n(" HttpMethods"),s("span",{class:"token punctuation"},"."),n("Post "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
req`),s("span",{class:"token punctuation"},"."),n("Headers"),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"X-ss-id"'),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" sessionId"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),sn=s("p",null,[n("Alternatively we can inject the Session itself. As a Users Session is just a "),s("code",null,"AuthUserSession"),n(" POCO persisted against the SessionId, we can access the Users Session from the CacheClient directly ourselves, e.g:")],-1),nn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"//i.e. urn:iauthsession:{sessionId}"),n(`
`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" sessionKey "),s("span",{class:"token operator"},"="),n(" SessionFeature"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetSessionKey"),s("span",{class:"token punctuation"},"("),n("sessionId"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(` 
`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" usersSession  "),s("span",{class:"token operator"},"="),n(" HostContext"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"TryResolve"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("ICacheClient"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("IAuthUserSession"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("sessionKey"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),en=s("p",null,"And inject to use this Session with:",-1),tn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("req"),s("span",{class:"token punctuation"},"."),n("Items"),s("span",{class:"token punctuation"},"["),n("Keywords"),s("span",{class:"token punctuation"},"."),n("Session"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" usersSession"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),an=s("p",null,"We can then Execute the MQ Service with this custom Request Context with:",-1),on=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"ExecuteMessage"),s("span",{class:"token punctuation"},"("),n("m"),s("span",{class:"token punctuation"},","),n(" req"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),cn=s("blockquote",null,[s("p",null,[n("See the "),s("a",{href:"/sessions.html"},"Session docs"),n(" for more info about Sessions in ServiceStack")])],-1),ln=s("p",null,"We'll walk-through a minimal example using this approach to make authenticated Requests and access the Users Session in a Service that's accessible via both HTTP and MQ transports.",-1),pn=s("p",null,"To start we'll configure an Authentication-enabled ServiceStack MQ and HTTP Self-Hosted Application:",-1),un=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AppHost"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},"AppSelfHostBase")]),n(`
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"override"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"void")]),n(),s("span",{class:"token function"},"Configure"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Container"),n(" container"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token comment"},"//Enable Authentication"),n(`
        Plugins`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Add"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"AuthFeature"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"AuthUserSession"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(` 
            `),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},[n("IAuthProvider"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]")]),n(),s("span",{class:"token punctuation"},"{"),n(` 
                `),s("span",{class:"token comment"},"// Enable Username/Password Authentication"),n(`
                `),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"CredentialsAuthProvider"),s("span",{class:"token punctuation"},"("),n("AppSettings"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(` 
            `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

        `),s("span",{class:"token comment"},"//Use an InMemory Repository to persist User Authenticaiton Info"),n(`
        container`),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Register"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("IUserAuthRepository"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("c "),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"InMemoryAuthRepository"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

        `),s("span",{class:"token comment"},"//Create a new User on Startup"),n(`
        `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" authRepo "),s("span",{class:"token operator"},"="),n(" container"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Resolve"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("IUserAuthRepository"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        authRepo`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"CreateUserAuth"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"UserAuth"),n(),s("span",{class:"token punctuation"},"{"),n(`
            Id `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(`
            UserName `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"mythz"'),s("span",{class:"token punctuation"},","),n(`
            FirstName `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"John"'),s("span",{class:"token punctuation"},","),n(`
            LastName `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Doe"'),s("span",{class:"token punctuation"},","),n(`
            DisplayName `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"John Doe"'),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"p@55word"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

        `),s("span",{class:"token comment"},"//Register to use a Rabbit MQ Server"),n(`
        container`),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Register"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("IMessageService"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("c "),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"RabbitMqServer"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

        `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" mqServer "),s("span",{class:"token operator"},"="),n(" container"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Resolve"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("IMessageService"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

        mqServer`),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"RegisterHandler"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("AuthOnly"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("m "),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"{"),n(`
            `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" req "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"BasicRequest"),n(),s("span",{class:"token punctuation"},"{"),n(" Verb "),s("span",{class:"token operator"},"="),n(" HttpMethods"),s("span",{class:"token punctuation"},"."),n("Post "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
            req`),s("span",{class:"token punctuation"},"."),n("Headers"),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"X-ss-id"'),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" m"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("SessionId"),s("span",{class:"token punctuation"},";"),n(`
            `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" response "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"ExecuteMessage"),s("span",{class:"token punctuation"},"("),n("m"),s("span",{class:"token punctuation"},","),n(" req"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
            `),s("span",{class:"token keyword"},"return"),n(" response"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

        `),s("span",{class:"token comment"},"//Start the Rabbit MQ Server listening for incoming MQ Requests"),n(`
        AfterInitCallbacks`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Add"),s("span",{class:"token punctuation"},"("),n("appHost "),s("span",{class:"token operator"},"=>"),n(" mqServer"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Start"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),rn=s("p",null,"and now add the Service Implementation:",-1),kn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AuthOnly"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},[n("IReturn"),s("span",{class:"token punctuation"},"<"),n("AuthOnlyResponse"),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"string")]),n(" Name "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"get"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token keyword"},"set"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"string")]),n(" SessionId "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"get"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token keyword"},"set"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AuthOnlyResponse"),n(`
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"string")]),n(" Result "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"get"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token keyword"},"set"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AuthOnlyService"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},"Service")]),n(` 
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token punctuation"},"["),s("span",{class:"token attribute"},[s("span",{class:"token class-name"},"Authenticate")]),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token comment"},"//Only allow Authenticated Requests"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"object")]),n(),s("span",{class:"token function"},"Any"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"AuthOnly"),n(" request"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token comment"},"// Get the User Session for this Request"),n(`
        `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" session "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"base"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"SessionAs"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("AuthUserSession"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

        `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"AuthOnlyResponse"),n(),s("span",{class:"token punctuation"},"{"),n(`
            Result `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token interpolation-string"},[s("span",{class:"token string"},'$"Hello, '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"{"),s("span",{class:"token expression language-csharp"},[n("request"),s("span",{class:"token punctuation"},"."),n("Name")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},"! Your UserName is "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"{"),s("span",{class:"token expression language-csharp"},[n("session"),s("span",{class:"token punctuation"},"."),n("UserAuthName")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),dn=s("p",null,"With the ServiceStack Host and Service implemented, we can start listening to both HTTP and Rabbit MQ Requests by starting the AppHost:",-1),hn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"AppHost"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Start"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"http://localhost:1337/"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),mn=s("p",null,[n("Then on the Client we can authenticate using UserName/Password credentials using the HTTP "),s("a",{href:"/csharp-client.html"},"Service Client"),n(", e.g:")],-1),gn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" client "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"JsonServiceClient"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"http://localhost:1337/"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" response "),s("span",{class:"token operator"},"="),n(" client"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Post"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"Authenticate"),n(),s("span",{class:"token punctuation"},"{"),n(`
    UserName `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"mythz"'),s("span",{class:"token punctuation"},","),n(`
    Password `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"p@55word"'),s("span",{class:"token punctuation"},","),n(`
    RememberMe `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},","),n(`
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" sessionId "),s("span",{class:"token operator"},"="),n(" response"),s("span",{class:"token punctuation"},"."),n("SessionId"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),yn=s("p",null,[n("The above Request establishes an authenticated Session with the "),s("code",null,"JsonServiceClient"),n(" instance which has its Cookies populated with the Users SessionIds - allowing it to make subsequent authenticated requests as that User.")],-1),fn=s("p",null,[n("To make Authenticated Requests via MQ we can pass the returned "),s("code",null,"sessionId"),n(" into the MQ Request:")],-1),wn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" mqFactory "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"RabbitMqMessageFactory"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token keyword"},"using"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" mqClient "),s("span",{class:"token operator"},"="),n(" mqFactory"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"CreateMessageQueueClient"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token punctuation"},"{"),n(`
    mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Publish"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"AuthOnly"),n(),s("span",{class:"token punctuation"},"{"),n(`                        
        Name `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"RabbitMQ Request"'),s("span",{class:"token punctuation"},","),n(`
        SessionId `),s("span",{class:"token operator"},"="),n(" sessionId"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`

    `),s("span",{class:"token comment"},"//Block until the Response is Received:"),n(`
    `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" responseMsg "),s("span",{class:"token operator"},"="),n(" mqClient"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"Get"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("AuthOnlyResponse"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("QueueNames"),s("span",{class:"token operator"},"<"),n("AuthOnlyResponse"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"."),n("In"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    mqClient`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"Ack"),s("span",{class:"token punctuation"},"("),n("responseMsg"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"//Acknowledge the message was received"),n(`
    
    `),s("span",{class:"token comment"},'//"Hello, RabbitMQ Request! Your UserName is mythz"'),n(`
    Console`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"WriteLine"),s("span",{class:"token punctuation"},"("),n("responseMsg"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("Result"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(` 
`),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),vn=s("p",null,"This works since we're extracting the SessionId and injecting into a Custom Request Context used by the MQ Service:",-1),bn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[n("mqServer"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"RegisterHandler"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("AuthOnly"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),n("m "),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" req "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"BasicRequest"),n(),s("span",{class:"token punctuation"},"{"),n(" Verb "),s("span",{class:"token operator"},"="),n(" HttpMethods"),s("span",{class:"token punctuation"},"."),n("Post "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
    req`),s("span",{class:"token punctuation"},"."),n("Headers"),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"X-ss-id"'),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(" m"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"GetBody"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),n("SessionId"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" response "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"ExecuteMessage"),s("span",{class:"token punctuation"},"("),n("m"),s("span",{class:"token punctuation"},","),n(" req"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"return"),n(" response"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])],-1),qn=s("h3",{id:"global-filters-vs-action-filters",tabindex:"-1"},[n("Global Filters vs Action Filters "),s("a",{class:"header-anchor",href:"#global-filters-vs-action-filters","aria-hidden":"true"},"#")],-1),_n=s("p",null,"One important difference worth re-iterating is that Filter Attribute declared on the Service class are top-level filters executed during Global Request filters which are only executed for HTTP Requests:",-1),Sn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token punctuation"},"["),s("span",{class:"token attribute"},[s("span",{class:"token class-name"},"Authenticate")]),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token comment"},"//Top-level Filter Attribute - only executed for HTTP Requests"),n(`
`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"MqAuthOnlyService"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},"Service")]),n(` 
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"object")]),n(),s("span",{class:"token function"},"Any"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"AuthOnly"),n(" request"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" session "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"base"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"SessionAs"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("AuthUserSession"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"AuthOnlyResponse"),n(),s("span",{class:"token punctuation"},"{"),n(`
            Result `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token interpolation-string"},[s("span",{class:"token string"},'$"Hello, '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"{"),s("span",{class:"token expression language-csharp"},[n("request"),s("span",{class:"token punctuation"},"."),n("Name")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},"! Your UserName is "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"{"),s("span",{class:"token expression language-csharp"},[n("session"),s("span",{class:"token punctuation"},"."),n("UserAuthName")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),Mn=s("p",null,"This will allow you to separate behavior for external HTTP Requests from internal MQ Requests.",-1),Tn=s("p",null,[n("To validate both HTTP and MQ Requests, place the "),s("code",null,"[Authenticate]"),n(" attribute on the method itself, e.g:")],-1),Rn=s("div",{class:"language-csharp"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AuthOnlyService"),n(),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token type-list"},[s("span",{class:"token class-name"},"Service")]),n(` 
`),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token punctuation"},"["),s("span",{class:"token attribute"},[s("span",{class:"token class-name"},"Authenticate")]),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token comment"},"//Authenticate both HTTP and MQ Requests"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token return-type class-name"},[s("span",{class:"token keyword"},"object")]),n(),s("span",{class:"token function"},"Any"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"AuthOnly"),n(" request"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" session "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"base"),s("span",{class:"token punctuation"},"."),s("span",{class:"token generic-method"},[s("span",{class:"token function"},"SessionAs"),s("span",{class:"token generic class-name"},[s("span",{class:"token punctuation"},"<"),n("AuthUserSession"),s("span",{class:"token punctuation"},">")])]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(` 
        `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"AuthOnlyResponse"),n(),s("span",{class:"token punctuation"},"{"),n(`
            Result `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token interpolation-string"},[s("span",{class:"token string"},'$"Hello, '),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"{"),s("span",{class:"token expression language-csharp"},[n("request"),s("span",{class:"token punctuation"},"."),n("Name")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},"! Your UserName is "),s("span",{class:"token interpolation"},[s("span",{class:"token punctuation"},"{"),s("span",{class:"token expression language-csharp"},[n("session"),s("span",{class:"token punctuation"},"."),n("UserAuthName")]),s("span",{class:"token punctuation"},"}")]),s("span",{class:"token string"},'"')]),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])])],-1),An=[p,i,u,r,k,d,h,m,g,y,f,w,v,b,q,_,S,M,T,R,A,Q,x,H,C,I,P,O,N,U,W,B,G,D,E,F,j,$,z,L,V,J,X,Y,K,Z,ss,ns,es,ts,as,os,cs,ls,ps,is,us,rs,ks,ds,hs,ms,gs,ys,fs,ws,vs,bs,qs,_s,Ss,Ms,Ts,Rs,As,Qs,xs,Hs,Cs,Is,Ps,Os,Ns,Us,Ws,Bs,Gs,Ds,Es,Fs,js,$s,zs,Ls,Vs,Js,Xs,Ys,Ks,Zs,sn,nn,en,tn,an,on,cn,ln,pn,un,rn,kn,dn,hn,mn,gn,yn,fn,wn,vn,bn,qn,_n,Sn,Mn,Tn,Rn];function Qn(xn,Hn,Cn,In,Pn,On){return c(),o("div",null,An)}var Gn=a(l,[["render",Qn]]);export{Bn as __pageData,Gn as default};
