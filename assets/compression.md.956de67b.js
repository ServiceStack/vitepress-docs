import{_ as s,c as n,o as a,a as e}from"./app.14440598.js";const h='{"title":"Client/Server Request Compression","description":"","frontmatter":{"slug":"compression"},"headers":[{"level":2,"title":"Client/Server Request Compression","slug":"client-server-request-compression"},{"level":2,"title":"[CompressResponse] Attribute","slug":"compressresponse-attribute"},{"level":2,"title":"Static File Compression","slug":"static-file-compression"}],"relativePath":"compression.md","lastUpdated":1634495307614}',t={},o=e(`<h2 id="client-server-request-compression" tabindex="-1">Client/Server Request Compression <a class="header-anchor" href="#client-server-request-compression" aria-hidden="true">#</a></h2><p>In addition to <a href="/http-caching.html#server-caching">optimized cached Server Responses</a> you can also elect to compress HTTP Requests in any C#/.NET Service Clients by specifying the Compression Type you wish to use, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RequestCompressionType <span class="token operator">=</span> CompressionTypes<span class="token punctuation">.</span>GZip<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonHttpClient</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RequestCompressionType <span class="token operator">=</span> CompressionTypes<span class="token punctuation">.</span>Deflate<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Request</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where sending any HTTP Request containing a Request Body (e.g. POST/PUT) will send a compressed Request body to the Server where it&#39;s now able to be transparently decompressed and deserialized into your Request DTO.</p><h2 id="compressresponse-attribute" tabindex="-1"><code>[CompressResponse]</code> Attribute <a class="header-anchor" href="#compressresponse-attribute" aria-hidden="true">#</a></h2><p>You can now selectively choose which Services should be compressed with the new <code>[CompressResponse]</code> attribute to compress responses for clients which support compression, which can be applied to most Response Types, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CompressResponse</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompressedServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressDto</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompressExamplesResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressString</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressBytes</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressStream</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressFile</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span>VirtualFileSources<span class="token punctuation">.</span><span class="token function">GetFile</span><span class="token punctuation">(</span><span class="token string">&quot;/foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">CompressAnyHttpResult</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompressExamplesResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// DTO</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// string</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResult</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">.</span><span class="token function">ToUtf8Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bytes</span>
        <span class="token comment">//etc</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>using <code>[CompressResponse]</code> is unnecessary when returning <a href="/http-caching.html">cached responses</a> as ServiceStack automatically caches and returns the most optimal Response - typically compressed bytes for clients that supports compression</p></div><h2 id="static-file-compression" tabindex="-1">Static File Compression <a class="header-anchor" href="#static-file-compression" aria-hidden="true">#</a></h2><p>ServiceStack can also be configured to compress static files with specific file extensions that are larger than specific size with the new opt-in Config options below:</p><div class="language-csharp"><pre><code><span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span>
    CompressFilesWithExtensions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// (optional), only compress .js or .css files &gt; 10k</span>
    CompressFilesLargerThanBytes <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When more fine-grained logic is needed you can override <code>ShouldCompressFile()</code> in your AppHost to choose which static files you want to compress on a per-file basis, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ShouldCompressFile</span><span class="token punctuation">(</span><span class="token class-name">IVirtualFile</span> file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">ShouldCompressFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> file<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;large.csv&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="when-to-enable-static-file-compression" tabindex="-1">When to enable Static File Compression <a class="header-anchor" href="#when-to-enable-static-file-compression" aria-hidden="true">#</a></h4><p>It&#39;s more optimal to configure static file compression on the native Web Server that&#39;s hosting your ServiceStack App than in managed code. You can use <a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener noreferrer">Fiddler</a> to check if your Web Server (e.g. IIS) is already compressing static files in which case you won&#39;t want to configure ServiceStack to do it.</p><p>No compression is added when running ServiceStack in a self-host, which will benefit from enabling Static File Compression.</p>`,16),p=[o];function c(l,i,r,u,k,d){return a(),n("div",null,p)}var y=s(t,[["render",c]]);export{h as __pageData,y as default};
