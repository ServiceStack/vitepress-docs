import{_ as s,c as t,o,a,b as e,e as n}from"./app.14440598.js";const x=`{"title":"v4.5.14 Release Notes","description":"","frontmatter":{"title":"v4.5.14 Release Notes","slug":"v4-5-14"},"headers":[{"level":2,"title":".NET Core 2.0 Ready","slug":"net-core-2-0-ready"},{"level":2,"title":"Preparing for V5","slug":"preparing-for-v5"},{"level":2,"title":"#Script!","slug":"script"},{"level":3,"title":"Starter Projects","slug":"starter-projects"},{"level":2,"title":"Why Templates?","slug":"why-templates"},{"level":3,"title":"The Razor Problem","slug":"the-razor-problem"},{"level":3,"title":"Utilizing ASP.NET's stewardship of Razor in .NET Core","slug":"utilizing-asp-net-s-stewardship-of-razor-in-net-core"},{"level":3,"title":"End User Language with low ROI","slug":"end-user-language-with-low-roi"},{"level":3,"title":"Endless pursuit of Value and Simplicity","slug":"endless-pursuit-of-value-and-simplicity"},{"level":3,"title":"A new .NET templating language was born","slug":"a-new-net-templating-language-was-born"},{"level":3,"title":"Meet #Script","slug":"meet-script"},{"level":3,"title":"Surrounding Ecosystem","slug":"surrounding-ecosystem"},{"level":2,"title":"Web Apps","slug":"web-apps"},{"level":3,"title":"Ultimate Simplicity","slug":"ultimate-simplicity"},{"level":3,"title":"Rapid Development Workflow","slug":"rapid-development-workflow"},{"level":3,"title":"Pure Cloud Apps","slug":"pure-cloud-apps"},{"level":2,"title":"Example Web Apps","slug":"example-web-apps"},{"level":3,"title":"Bare Web App","slug":"bare-web-app"},{"level":3,"title":"Redis Web App","slug":"redis-web-app"},{"level":3,"title":"Rockwind","slug":"rockwind"},{"level":3,"title":"Rockwind VFS","slug":"rockwind-vfs"},{"level":3,"title":"AWS Cloud Apps","slug":"aws-cloud-apps"},{"level":3,"title":"Azure Cloud Apps","slug":"azure-cloud-apps"},{"level":3,"title":"Plugins","slug":"plugins"},{"level":3,"title":"Registering ServiceStack Plugins","slug":"registering-servicestack-plugins"},{"level":3,"title":"Chat","slug":"chat"},{"level":3,"title":"Simplified Web App Deployments","slug":"simplified-web-app-deployments"},{"level":3,"title":"Limitations","slug":"limitations"},{"level":3,"title":"Current Status","slug":"current-status"},{"level":3,"title":"Free for OSS and Commercial Projects","slug":"free-for-oss-and-commercial-projects"},{"level":2,"title":"Debug Inspector","slug":"debug-inspector"},{"level":2,"title":"JavaScript Utils","slug":"javascript-utils"},{"level":3,"title":"Eval","slug":"eval"},{"level":2,"title":"Simple Container","slug":"simple-container"},{"level":3,"title":"Fast, small, dependency-free IOC","slug":"fast-small-dependency-free-ioc"},{"level":2,"title":"Simple AppSettings","slug":"simple-appsettings"},{"level":2,"title":"Virtual File System","slug":"virtual-file-system"},{"level":3,"title":"AddVirtualFileSources","slug":"addvirtualfilesources"},{"level":3,"title":"VFS Breaking Change","slug":"vfs-breaking-change"},{"level":2,"title":"ServiceStack.Azure","slug":"servicestack-azure"},{"level":3,"title":"ServiceBus MQ Server","slug":"servicebus-mq-server"},{"level":3,"title":"Azure Blob Storage VFS","slug":"azure-blob-storage-vfs"},{"level":3,"title":"Azure Table Storage Cache Client","slug":"azure-table-storage-cache-client"},{"level":2,"title":"ServiceStack","slug":"servicestack"},{"level":3,"title":"Internal improvements","slug":"internal-improvements"},{"level":2,"title":"Strict Mode","slug":"strict-mode"},{"level":3,"title":"Content-Type Specific Service Implementations","slug":"content-type-specific-service-implementations"},{"level":3,"title":"Redirect Paths","slug":"redirect-paths"},{"level":3,"title":"Forbidden Paths","slug":"forbidden-paths"},{"level":3,"title":"ServiceAssemblies","slug":"serviceassemblies"},{"level":2,"title":"ServiceStack Minor Features","slug":"servicestack-minor-features"},{"level":2,"title":"Service Clients","slug":"service-clients"},{"level":2,"title":"AutoQuery Changes","slug":"autoquery-changes"},{"level":2,"title":"Native Types","slug":"native-types"},{"level":3,"title":"Open API Refinements","slug":"open-api-refinements"},{"level":2,"title":"Request Logging","slug":"request-logging"},{"level":2,"title":"ServiceStack.RabbitMq","slug":"servicestack-rabbitmq"},{"level":2,"title":"LiteDB Auth Provider","slug":"litedb-auth-provider"},{"level":2,"title":"ServiceStack.Text","slug":"servicestack-text"},{"level":3,"title":"String Segment Extensions","slug":"string-segment-extensions"},{"level":3,"title":"Resolve Paths","slug":"resolve-paths"},{"level":3,"title":"DynamicNumber","slug":"dynamicnumber"},{"level":2,"title":"OrmLite","slug":"ormlite"},{"level":3,"title":"SQL Server JSON","slug":"sql-server-json"},{"level":3,"title":"Normalizing PostgreSQL","slug":"normalizing-postgresql"},{"level":3,"title":"Ignore properties","slug":"ignore-properties"}],"relativePath":"releases/v4.5.14.md","lastUpdated":1634495308438}`,p={},r=a('<p>We&#39;ve got something super special in store in this release which has completely changed how we develop .NET server-generated Web Apps that includes a new approach to dramatically simplify .NET Web App development, providing a highly productive development experience whilst maximizing reuse and component sharing. This release also brings support for .NET Core 2.0, new providers for Azure which includes an <a href="https://docs.servicestack.net/messaging" target="_blank" rel="noopener noreferrer">MQ Server</a> for Azure ServiceBus, a <a href="https://docs.servicestack.net/virtual-file-system" target="_blank" rel="noopener noreferrer">Virtual File System</a> for Azure Blob Storage and a <a href="https://docs.servicestack.net/caching" target="_blank" rel="noopener noreferrer">Caching Provider</a> for Azure Table Storage.</p><p>With our abstractions containing simple clean interfaces supporting multiple implementations and OrmLite and AutoQuery supporting multiple RDBMS&#39;s behind the same Typed API, it&#39;s become easier than ever to run your ServiceStack Apps on either a managed AWS or Azure infrastructure.</p><h2 id="net-core-2-0-ready" tabindex="-1">.NET Core 2.0 Ready <a class="header-anchor" href="#net-core-2-0-ready" aria-hidden="true">#</a></h2><p>Firstly we&#39;d like to announce this Release adds support for the newly released .NET Core 2.0. Our test suites have been upgraded to run .NET Core 2.0 as well as some of our existing <a href="https://github.com/NetCoreApps/" target="_blank" rel="noopener noreferrer">.NET Core Apps</a>. All new Web Apps created in this release were developed on .NET Core 2.0 which we believe is the first .NET Core release that should be given first consideration for development of new greenfield .NET Web Apps to see if it&#39;s able to meet your requirements. Its extensibility and simplified dev model and ability to run flawlessly cross-platform gives your investments a lot more utility, including being able to take advantage of the lower cost, simplified dev model and superior automation from being able to deploy to Linux whilst still allowing each developer to use their preferred Desktop OS and development environment.</p><h2 id="preparing-for-v5" tabindex="-1">Preparing for V5 <a class="header-anchor" href="#preparing-for-v5" aria-hidden="true">#</a></h2><p>Now that both .NET Standard 2.0 .NET Core 2.0 have been released our next release will be a major <strong>V5</strong> release where we&#39;ll be performing the following structural changes:</p><ul><li>Upgrading to NuGet v3 specs which allows specifying different dependencies for different builds</li><li>Merging the .NET Core packages into main packages where they&#39;ll share the same version and release cadence</li><li>Upgrade libraries to .NET Standard 2.0</li><li>Drop PCL and Silverlight builds in favor of .NET Standard</li><li>Remove deprecated APIs (Except for OrmLite&#39;s legacy deprecated APIs)</li><li>Move Razor Helpers &amp; Markdown Razor to ServiceStack.Razor</li><li>Upgrade RabbitMQ.Client to v5.x, requiring .NET v4.5.1+</li><li>Sign all packages and release our signing key</li></ul><p>We&#39;ll keep the voting open on <a href="https://github.com/ServiceStack/Issues/issues/548" target="_blank" rel="noopener noreferrer">whether or not we should we should Sign all packages</a> for another 2 weeks. Please vote either way if you&#39;d prefer to have ServiceStack binaries signed or not.</p><p>In terms of preparation for v5, we&#39;ll be keeping source compatibility a top priority and we don&#39;t envisage there to be too many source breaking changes except for removing the deprecated APIs so the primary task before upgrading to V5 will be to move off deprecated APIs. Most Obsolete APIs specify which APIs to move to in their deprecated messages which you can find in your build warning messages.</p><h2 id="script" tabindex="-1"><code>#Script</code>! <a class="header-anchor" href="#script" aria-hidden="true">#</a></h2><p>We&#39;re super excited to announce <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">#Script</a>. At its core <code>#Script</code> is a simple, fast and versatile general-purpose dynamic templating language for .NET and .NET Core. It requires no pre-compilation, is lazily loaded and Starts up instantly with fast runtime performance, is late-bound with no binary coupling, is highly extensible and is evaluated in a Sandbox with complete fine-grain control over what functionality is available to templates running in different contexts.</p><p>These characteristics opens up <code>#Script</code> into a number of exciting new use-cases, some of which we cover in our comprehensive and interactive documentation at <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">sharpscript.net</a>.</p><h3 id="starter-projects" tabindex="-1">Starter Projects <a class="header-anchor" href="#starter-projects" aria-hidden="true">#</a></h3><p>The Starter Projects below provide a quick way to get started with a pre-configured ServiceStack Template App:</p><h4 id="net-core-2-0-bootstrap-starter" tabindex="-1"><a href="https://github.com/NetCoreApps/TemplatesBootstrapStarter" target="_blank" rel="noopener noreferrer">.NET Core 2.0 Bootstrap Starter</a> <a class="header-anchor" href="#net-core-2-0-bootstrap-starter" aria-hidden="true">#</a></h4><p>Clone the <a href="https://github.com/NetCoreApps/TemplatesBootstrapStarter" target="_blank" rel="noopener noreferrer">TemplatesBootstrapStarter</a> GitHub project to start from a Bootstrap v4 and jQuery .NET Core 2.0 App:</p><p><a href="https://github.com/NetCoreApps/TemplatesBootstrapStarter" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/NetCoreApps/TemplatePages/master/src/wwwroot/assets/img/screenshots/templates-bootstrap.png" alt=""></a></p><h4 id="asp-net-v4-5-bootstrap-starter" tabindex="-1"><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> v4.5 Bootstrap Starter <a class="header-anchor" href="#asp-net-v4-5-bootstrap-starter" aria-hidden="true">#</a></h4><p>For <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> v4.5 projects create a new <strong>ServiceStack <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Templates with Bootstrap</strong> from the <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> Templates in <a href="https://docs.servicestack.net/templates-overview#servicestackvs-vsnet-extension" target="_blank" rel="noopener noreferrer">ServiceStackVS VS.NET Extension</a> to create an <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> v4.5 Project using <a href="https://docs.servicestack.net/create-your-first-webservice#step-4-exploring-the-servicestack-solution" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s recommended project structure</a>:</p><p><a href="https://github.com/ServiceStack/ServiceStackVS" target="_blank" rel="noopener noreferrer"><img src="https://sharpscript.net/assets/img/screenshots/ssvs-bootstrap.png" alt=""></a></p><h2 id="why-templates" tabindex="-1">Why Templates? <a class="header-anchor" href="#why-templates" aria-hidden="true">#</a></h2><p>Whilst we expect to see Templates used in a number of new use-cases we haven&#39;t thought of yet, it&#39;s primarily used as an alternative to Razor for developing server-generated Web Apps. Given Razor is so pervasive in .NET it may come as a surprise as to why we&#39;d want an alternative.</p><h3 id="the-razor-problem" tabindex="-1">The Razor Problem <a class="header-anchor" href="#the-razor-problem" aria-hidden="true">#</a></h3><p>In summary, it&#39;s because we want to be able to offer a simple, clean, highly-productive and innovative end-to-end solution for building ServiceStack Web Apps without the external baggage and issues Razor brings to a project. If interested in the finer details, we&#39;ve published some of the limitations and issues we&#39;ve hit in <a href="/why-not-razor.html">Why not Razor</a>.</p><p>Of particular concern is the <a href="/why-not-razor.html#invasive-magic-behavior">invasive magic behavior</a> it relies on which trades its hidden complexity with making Projects not using it appear more complex by virtue of being forced to include special configuration to opt-out of Razor&#39;s hidden magic behavior breaking their Apps. We&#39;re disappointed to see this practice continue in .NET Core which is actively harmful to all .NET Core Web Projects not using MVC or Razor.</p><p>Razor&#39;s fragility, complexity and limitations imposed by its surrounding tooling prevents us from continuing to innovate around Razor further and has caused us to remove it from our <a href="/templates-single-page-apps.html">Single Page App Templates</a> which adds marginal value in SPA&#39;s that doesn&#39;t justify the added configuration, complexity, infrastructure and potential source of issues it adds to projects.</p><h3 id="utilizing-asp-net-s-stewardship-of-razor-in-net-core" tabindex="-1">Utilizing <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a>&#39;s stewardship of Razor in .NET Core <a class="header-anchor" href="#utilizing-asp-net-s-stewardship-of-razor-in-net-core" aria-hidden="true">#</a></h3><p>In a testament to <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core&#39;s development model, one of the benefits it enables is being able to seamlessly integrate different frameworks together within the same HTTP Request pipeline. The rewrite of <a href="http://razor.servicestack.net" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s Razor features</a> on top of MVC&#39;s Razor means we both share the same Razor implementation which ServiceStack projects benefit from by automatically having access to new features the <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> team adds to Razor.</p><h3 id="end-user-language-with-low-roi" tabindex="-1">End User Language with low ROI <a class="header-anchor" href="#end-user-language-with-low-roi" aria-hidden="true">#</a></h3><p>Another reason for our reduced focus around Razor is similar to VB6&#39;s one-way consumption of COM APIs, Razor is an &quot;end-user language&quot; for .NET APIs, i.e. server logic embedded in Razor pages is &quot;one-off code&quot; providing minimal utility and code reuse that&#39;s only applicable to HTML clients (i.e. Browsers) for the page it&#39;s embedded in whilst delivering a worse UX compared to the alternative <a href="https://github.com/ServiceStackApps/EmailContacts#api-first-development" target="_blank" rel="noopener noreferrer">API First Development</a> model where Web Pages use Ajax as just another client to call the same back-end Services that Mobile and Desktop clients use.</p><p>So instead of having browsers perform full-page POST backs and creating specific Controllers/Services that can only handle browser requests, you&#39;ll get better responsiveness, utility and code-reuse by just developing &quot;pure&quot; back-end Services and using JavaScript to make Ajax requests. JavaScript is also much better than C# at being able to <a href="https://docs.servicestack.net/ss-utils-js#fluent-validation" target="_blank" rel="noopener noreferrer">use a generic routine</a> to automatically update Form UIs with Service&#39;s structured error responses where it benefits from reduced development effort.</p><p>In this light it&#39;s more important to interoperate with JavaScript than it is to have C# logic embedded in HTML pages.</p><h3 id="endless-pursuit-of-value-and-simplicity" tabindex="-1">Endless pursuit of Value and Simplicity <a class="header-anchor" href="#endless-pursuit-of-value-and-simplicity" aria-hidden="true">#</a></h3><p>For the various reasons above our focus for Web Apps has shifted towards providing the simplest and most productive development experience using the best-in-class npm-based tooling for the most popular JavaScript frameworks. As JavaScript frameworks and tooling continue to evolve it&#39;s become a delicate balance at adopting a modern JavaScript stack with tools that integrate well together and yield the most value for minimal amount of tooling, configuration and complexity. We believe our recommended <a href="/templates-single-page-apps.html">Webpack and TypeScript Integrated SPA VS.NET Templates</a> scores well within these constraints that provides a productive development experience whilst generating optimal production build outputs.</p><p>At the same time adopting a modern SPA development stack has become an overkill solution for many small and medium-sized projects and there exists a large class of websites that still benefit from being a traditional server-generated Website.</p><p>But if not a modern SPA stack, what other options are there for .NET? For .NET Core you can use <a href="https://github.com/aspnet/JavaScriptServices" target="_blank" rel="noopener noreferrer">JavaScript Services</a> to integrate .NET and JavaScript, but this adds even more complexity and overhead that&#39;s destined to always be a 2nd Rate experience to using a pure node.js development stack directly. You could use <a href="https://github.com/mattjcowan/servicestack-nuxt-example" target="_blank" rel="noopener noreferrer">ServiceStack with a static generator like nuxt.js</a>, this provides a clean separation for your front-end UI and backend Services but that requires managing 2 different development frameworks requiring additional build steps and can only integrate via Ajax. Falling back to Razor is still a viable option but we dislike its baggage and issues and would prefer to spend our complexity budget on a SPA Stack which yields a more productive development workflow and better end user UX.</p><h3 id="a-new-net-templating-language-was-born" tabindex="-1">A new .NET templating language was born <a class="header-anchor" href="#a-new-net-templating-language-was-born" aria-hidden="true">#</a></h3><p>The remaining option is to build the server templating language we wanted, one without the complexity, issues, design problems and static coupling of Razor, with great Startup and runtime performance, is highly-extensible and promotes reuse, integrates cleanly with .NET but still adopts the strengths that make the premier JavaScript frameworks enjoyable and productive to build HTML UIs with. The decision to use JavaScript syntax instead of C# was based on our experience using both where:</p><ul><li>Most innovation in HTML UIs is happening in JavaScript</li><li>Server generated HTML needs to interop with JavaScript</li><li>JavaScript is more productive at HTML UIs than C#</li><li>JavaScript syntax is smaller and simpler than C#</li><li>JavaScript lets us use a common language for client/server logic in HTML</li></ul><p>We didn&#39;t want to invent a new syntax so we evaluated various syntax from multiple JavaScript frameworks and ultimately settled on <a href="https://vuejs.org/v2/guide/filters.html" target="_blank" rel="noopener noreferrer">Vue.js Filters syntax</a> which had several benefits going for it:</p><ul><li>It&#39;s simple and intuitive</li><li>It&#39;s not coupled to any text format</li><li>It works well with HTML and HTML designers/editors</li><li>It has minimal, wrist-friendly syntax</li><li>It&#39;s composable and expressive</li><li>It&#39;s declarative and functional</li></ul><p>Above all we share Vue&#39;s primary focus on simplicity and its incremental approach to layering advanced functionality, a goal that drove the design and development of <code>#Script</code>. The <a href="https://sharpscript.net/docs/syntax" target="_blank" rel="noopener noreferrer">Syntax</a> is essentially compatible with Vue.js filters including supporting JavaScript&#39;s syntax for its native data types and function calls. The only extensions we&#39;ve added is a <a href="https://sharpscript.net/docs/syntax#special-string-argument-syntax" target="_blank" rel="noopener noreferrer">wrist-friendly syntax for single string arguments</a> and an additional syntax for defining string literals using <a href="https://sharpscript.net/docs/syntax#quotes" target="_blank" rel="noopener noreferrer">Prime Quotes</a>.</p><p>Within this minimal syntax we&#39;ve been able to achieve a highly versatile dynamic template language whose expressive power comes from its <a href="https://sharpscript.net/docs/methods" target="_blank" rel="noopener noreferrer">filters</a> of which we&#39;ve included a <a href="https://sharpscript.net/docs/filters-reference" target="_blank" rel="noopener noreferrer">comprehensive suite</a> to handle many of the tasks commonly required in Templates and Web Apps.</p><h3 id="meet-script" tabindex="-1">Meet <code>#Script</code> <a class="header-anchor" href="#meet-script" aria-hidden="true">#</a></h3><p>Even in this initial release we&#39;re extremely pleased with its current form, we&#39;ve spent less time developing Templates than we have on ServiceStack&#39;s Razor Integration and we&#39;ve already innovated past what we&#39;ve been capable to do with Razor. It&#39;s not coupled to any external tooling or susceptible to any of the external factors that has plagued us with Razor. It&#39;s highly testable by design with unit tests being trivial to write that it&#39;s our most tested feature with over 350 new tests added to support its current feature-set, it&#39;s also our <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">most documented feature</a>.</p><p>It&#39;s small, lightweight footprint and built-in <a href="https://sharpscript.net/docs/hot-reloading" target="_blank" rel="noopener noreferrer">Hot Reloading</a> provides a fun, clean and productive alternative to MVC Razor that&#39;s easily <a href="https://sharpscript.net/docs/sharp-pages" target="_blank" rel="noopener noreferrer">integrated into any web framework</a> and runs identically in <a href="https://sharpscript.net/docs/sharp-pages#runs-everywhere" target="_blank" rel="noopener noreferrer">every platform ServiceStack runs on</a>, it can also be returned in <a href="https://sharpscript.net/docs/mvc-netcore#aspnet-mvc--templates-demo" target="_blank" rel="noopener noreferrer">ASP.NET MVC</a> and <a href="https://sharpscript.net/docs/mvc-netcore" target="_blank" rel="noopener noreferrer">ASP.NET MVC Core</a> Controllers - in all cases, using the same <a href="https://sharpscript.net/docs/introduction#instant-startup" target="_blank" rel="noopener noreferrer">high-performance implementation</a> to asynchronously write to a forward-only OutputStream for max performance and maximum potential reuse of your code.</p><p>Templates are lazily loaded and <a href="https://sharpscript.net/docs/introduction#late-bound" target="_blank" rel="noopener noreferrer">late-bound</a> for Instant Startup, doesn&#39;t require any pre-compilation, have coupling to any external configuration files, build tools, designer tooling or have any special deployment requirements. It can be used as a general purpose templating language to enhance <a href="https://sharpscript.net/docs/page-formats" target="_blank" rel="noopener noreferrer">any text format</a> and includes built-in support for <code>.html</code>.</p><p>Templates are evaluated in an <a href="https://sharpscript.net/docs/sandbox" target="_blank" rel="noopener noreferrer">Isolated Sandboxed</a> that enables fine-grained control over exactly what functionality and instances are available to different Templates. They&#39;re pre-configured with a comprehensive suite of safe <a href="https://sharpscript.net/docs/default-scripts" target="_blank" rel="noopener noreferrer">Default Filters</a> which when running in trusted contexts can easily be granted access to <a href="https://sharpscript.net/docs/filters-reference" target="_blank" rel="noopener noreferrer">enhanced functionality</a>.</p><p>Templates are designed to be incrementally adoptable where its initial form is <a href="https://sharpscript.net/docs/sharp-apps#ideal-for-web-designers-and-content-authors" target="_blank" rel="noopener noreferrer">ideal for non-programmers</a>, that can gradually adopt more power and functionality when needed where they can leverage existing Services or MVC Controllers to enable an <a href="https://sharpscript.net/docs/model-view-controller" target="_blank" rel="noopener noreferrer">MVC programming model</a> or have <code>.html</code> pages upgraded to use <a href="https://sharpscript.net/docs/code-pages" target="_blank" rel="noopener noreferrer">Code Pages</a> where they can utilize the full unlimited power of the C# programming language to enable precise control over the rendering of pages and partials. Code pages take precedence and are interchangeable wherever normal <code>.html</code> pages are requested making them a non-invasive layered solution whenever advanced functionality is required.</p><h3 id="surrounding-ecosystem" tabindex="-1">Surrounding Ecosystem <a class="header-anchor" href="#surrounding-ecosystem" aria-hidden="true">#</a></h3><p>These qualities opens Templates up to a number of new use-cases that&#39;s better suited than Razor for maintaining <a href="https://sharpscript.net/usecases/content-websites" target="_blank" rel="noopener noreferrer">content-heavy websites</a>, <a href="https://sharpscript.net/usecases/live-documents" target="_blank" rel="noopener noreferrer">live documents</a>, <a href="https://sharpscript.net/usecases/email-templates" target="_blank" rel="noopener noreferrer">Email Templates</a> and can easily <a href="https://sharpscript.net/usecases/introspect-state" target="_blank" rel="noopener noreferrer">introspect the state of running .NET Apps</a> where they provide <a href="https://sharpscript.net/docs/servicestack-scripts#debug-template" target="_blank" rel="noopener noreferrer">valuable insight at a glance</a> with support for <a href="https://sharpscript.net/usecases/adhoc-querying" target="_blank" rel="noopener noreferrer">Adhoc querying</a>.</p><h2 id="web-apps" tabindex="-1">Web Apps <a class="header-anchor" href="#web-apps" aria-hidden="true">#</a></h2><p>One use-case made possible by Templates we&#39;re extremely excited about is <a href="https://sharpscript.net/docs/sharp-apps" target="_blank" rel="noopener noreferrer">Web Apps</a> - a new approach to dramatically simplify .NET Web App development and provide the most productive development experience possible whilst maximizing reuse and component sharing.</p><p>Web Apps leverages Templates to develop entire content-rich, data-driven websites without needing to write any C#, compile projects or manually refresh pages - resulting in the easiest and fastest way to develop Web Apps in .NET!</p><h3 id="ultimate-simplicity" tabindex="-1">Ultimate Simplicity <a class="header-anchor" href="#ultimate-simplicity" aria-hidden="true">#</a></h3><p>Not having to write any C# code or perform any app builds dramatically reduces the cognitive overhead and conceptual knowledge required for development where the only thing front-end Web developers need to know is <a href="https://sharpscript.net/docs/syntax" target="_blank" rel="noopener noreferrer">Template&#39;s syntax</a> and what <a href="https://sharpscript.net/docs/filters-reference" target="_blank" rel="noopener noreferrer">filters are available</a> to call. Because of Template&#39;s high-fidelity with JavaScript, developing a Website with Templates will be instantly familiar to JavaScript developers despite calling and binding directly to .NET APIs behind the scenes.</p><p>All complexity with C#, .NET, namespaces, references, .dlls, strong naming, packages, MVC, Razor, build tools, IDE environments, etc has been eliminated leaving all Web Developers needing to do is run a cross-platform <a href="https://github.com/ServiceStack/Web" target="_blank" rel="noopener noreferrer">web/app.dll</a> .NET Core 2.0 executable and configure a simple <a href="https://github.com/NetCoreTemplates/bare-app/blob/master/app.settings" target="_blank" rel="noopener noreferrer">app.settings</a> text file to specify which website folder to use, which ServiceStack features to enable, which db or redis providers to connect to, etc. Not needing to build also greatly simplifies deployments where multiple websites can be deployed with a <a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/WebApp/run.deploy.apps.sh" target="_blank" rel="noopener noreferrer">single rsync</a> or xcopy command or if deploying your App in a Docker Container, you just need to <a href="https://github.com/sharp-apps/rockwind-aws/blob/master/Dockerfile" target="_blank" rel="noopener noreferrer">copy your website files</a>, or just the <code>app.settings</code> if you&#39;re using an S3 or Azure Virtual File System.</p><h3 id="rapid-development-workflow" tabindex="-1">Rapid Development Workflow <a class="header-anchor" href="#rapid-development-workflow" aria-hidden="true">#</a></h3><p>The iterative development experience is also unparalleled for a .NET App, no compilation is required so you can just leave the <code>web/app.dll</code> running whilst you add the template <code>.html</code> files needed to build your App and thanks to the built-in <a href="https://sharpscript.net/docs/hot-reloading" target="_blank" rel="noopener noreferrer">Hot Reloading</a> support, pages will refresh automatically as you save. You&#39;ll just need to do a full page refresh when modifying external .css/.js files to bypass the browser&#39;s cache and you&#39;ll need to restart <code>web/app.dll</code> to pick up any changes to your <code>app.settings</code> or .dlls to your <code>/plugins</code> folder.</p><h3 id="pure-cloud-apps" tabindex="-1">Pure Cloud Apps <a class="header-anchor" href="#pure-cloud-apps" aria-hidden="true">#</a></h3><p>Web Apps also enable the development of <a href="https://sharpscript.net/docs/sharp-apps#pure-cloud-apps" target="_blank" rel="noopener noreferrer">Pure Cloud Apps</a> where the same Web App can be developed and run entirely on <strong>AWS S3 and RDS</strong> or <strong>Azure Blob Storage and SQL Server</strong> by just changing the <code>app.settings</code> that&#39;s deployed with the pre-compiled <a href="https://github.com/ServiceStack/Web" target="_blank" rel="noopener noreferrer">Web App Binary</a>.</p><h2 id="example-web-apps" tabindex="-1">Example Web Apps <a class="header-anchor" href="#example-web-apps" aria-hidden="true">#</a></h2><p>We&#39;ve developed a number of Web Apps to illustrate the various features available and to showcase its strengths and the different kind of Web Apps that can easily be developed with it. The source code for each app is maintained in <a href="https://github.com/sharp-apps" target="_blank" rel="noopener noreferrer">NetCoreWebApps</a> and each Web App runs the same <a href="https://github.com/ServiceStack/Web" target="_blank" rel="noopener noreferrer">pre-compiled web/app.dll binary</a>.</p><h3 id="bare-web-app" tabindex="-1">Bare Web App <a class="header-anchor" href="#bare-web-app" aria-hidden="true">#</a></h3><blockquote><p>source <a href="https://github.com/sharp-apps/bare" target="_blank" rel="noopener noreferrer">/Bare Web App</a> - demo <a href="http://bare.web-app.io" target="_blank" rel="noopener noreferrer">bare.web-app.io</a></p></blockquote><p>The Web App Starter project is representative of a typical Company splash Website:</p><p><a href="http://bare.web-app.io" target="_blank" rel="noopener noreferrer"><img src="https://sharpscript.net/assets/img/screenshots/bare.png" alt=""></a></p><p>The benefits over using a static website is improved maintenance as you can extract and use its common <a href="https://github.com/sharp-apps/bare/blob/master/_layout.html" target="_blank" rel="noopener noreferrer">_layout.html</a> instead of having it duplicated in each page. The <a href="https://github.com/sharp-apps/bare/blob/master/menu.html" target="_blank" rel="noopener noreferrer">menu.html</a> partial also makes menu items easier to maintain by just adding an entry in the JavaScript object literal. The dynamic menu also takes care of highlighting the active menu item.</p>',68),c=e("div",null,[e("div",{class:"language-html"},[e("pre",{"v-pre":""},[e("code",null,[n(`{{ { '/':         'Home',
     '/about':    'About',
     '/services': 'Services',
     '/contact':  'Contact'
   } | toList | assignTo: links }}

`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("div")]),n(),e("span",{class:"token attr-name"},"class"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("collapse navbar-collapse"),e("span",{class:"token punctuation"},'"')]),n(),e("span",{class:"token attr-name"},"id"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("navbarResponsive"),e("span",{class:"token punctuation"},'"')]),e("span",{class:"token punctuation"},">")]),n(`
    `),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("ul")]),n(),e("span",{class:"token attr-name"},"class"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("navbar-nav ml-auto"),e("span",{class:"token punctuation"},'"')]),e("span",{class:"token punctuation"},">")]),n(`
        {{ links | select: `),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("li")]),n(),e("span",{class:"token attr-name"},"class"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("nav-item { "),e("span",{class:"token punctuation"},"'"),n("active"),e("span",{class:"token punctuation"},"'"),n(" | ifMatchesPathInfo(it.Key) }"),e("span",{class:"token punctuation"},'"')]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("a")]),n(),e("span",{class:"token attr-name"},"class"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("nav-link"),e("span",{class:"token punctuation"},'"')]),n(),e("span",{class:"token attr-name"},"href"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("{ it.Key }"),e("span",{class:"token punctuation"},'"')]),e("span",{class:"token punctuation"},">")]),n("{ it.Value }"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("a")]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("li")]),e("span",{class:"token punctuation"},">")]),n(` }}
    `),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("ul")]),e("span",{class:"token punctuation"},">")]),n(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("div")]),e("span",{class:"token punctuation"},">")]),n(`
`)])])])],-1),i=a(`<h4 id="ideal-for-web-designers-and-content-authors" tabindex="-1">Ideal for Web Designers and Content Authors <a class="header-anchor" href="#ideal-for-web-designers-and-content-authors" aria-hidden="true">#</a></h4><p>The other primary benefit is that this is an example of a website that can be maintained by employees who don&#39;t have any programming experience as Templates in their basic form are intuitive and approachable to non-developers, e.g: The title of each page is maintained as metadata HTML comments:</p><div class="language-html"><pre><code><span class="token comment">&lt;!--
title: About Us
--&gt;</span>
</code></pre></div><div><p>Template&#39;s syntax is also the ideal way to convey variable substitution, e.g: <code>&lt;title&gt;{{ title }}&lt;/title&gt;</code> and even embedding a partial reads like english <code>{{ &#39;menu&#39; | partial }}</code> which is both intuitive and works well with GUI HTML designers.</p></div><h4 id="app-settings" tabindex="-1"><a href="https://github.com/NetCoreTemplates/bare-app/blob/master/app.settings" target="_blank" rel="noopener noreferrer">app.settings</a> <a class="header-anchor" href="#app-settings" aria-hidden="true">#</a></h4><p>Below is the <code>app.settings</code> for a Basic App:</p><div class="language-"><pre><code>debug true
name Bare WebApp
</code></pre></div><blockquote><p><code>debug true</code> controls the level of internal diagnostics available and whether or not <a href="https://sharpscript.net/docs/hot-reloading" target="_blank" rel="noopener noreferrer">Hot Reloading</a> is enabled.</p></blockquote><h3 id="redis-web-app" tabindex="-1">Redis Web App <a class="header-anchor" href="#redis-web-app" aria-hidden="true">#</a></h3><blockquote><p>source <a href="https://github.com/sharp-apps/redis-html" target="_blank" rel="noopener noreferrer">/RedisHtml</a> - demo <a href="http://redis-html.web-app.io" target="_blank" rel="noopener noreferrer">redis-html.web-app.io</a></p></blockquote><p>For the Redis Browser Web App, we wanted to implement an App that was an ideal candidate for a Single Page App but constrain ourselves to do all HTML rendering on the server and have each interaction request a full-page reload to see how a traditional server-generated Web App feels like with the performance of .NET Core 2.0 and Templates. We&#39;re pleasantly surprised with the result as when the App is run locally the responsiveness is effectively indistinguishable from an Ajax App. When hosted on the Internet there is a sub-second delay which causes a noticeable flicker but it still retains a pleasant UX that&#39;s faster than most websites.</p><p>The benefits of a traditional website is that it doesn&#39;t break the web where the back button and deep linking work without effort and you get to avoid the complexity train of adopting a premier JavaScript SPA Framework&#39;s configuration, dependencies, workflow and build system which has become overkill for small projects.</p><p><a href="http://redis-html.web-app.io" target="_blank" rel="noopener noreferrer"><img src="https://sharpscript.net/assets/img/screenshots/redis-html.png" alt=""></a></p><p>We&#39;ve had a sordid history developing Redis UI&#39;s which we&#39;re built using the popular JavaScript frameworks that appeared dominant at the time but have since seen their ecosystem decline, starting with the <a href="http://redisadminui.servicestack.net" target="_blank" rel="noopener noreferrer">Redis Admin UI</a> built using <a href="https://github.com/google/closure-library" target="_blank" rel="noopener noreferrer">Google&#39;s Closure Library</a> that as it works different to everything else needed a complete rewrite when creating <a href="http://redisreact.servicestack.net" target="_blank" rel="noopener noreferrer">redisreact.servicestack.net</a> using the hot new React framework, unfortunately it uses React&#39;s old deprecated ES5 syntax and Reflux which is sufficiently different from our current recommended <a href="https://docs.servicestack.net/templates-single-page-apps" target="_blank" rel="noopener noreferrer">TypeScript + React + Redux + WebPack</a> JavaScript SPA Stack, that is going to require a significant refactor to adopt our preferred SPA tech stack.</p><h4 id="beautiful-succinct-declarative-code" tabindex="-1">Beautiful, succinct, declarative code <a class="header-anchor" href="#beautiful-succinct-declarative-code" aria-hidden="true">#</a></h4><p>The nice thing about generating HTML is that it&#39;s the one true constant in Web development that will always be there. The entire functionality for the Redis Web App is contained in a single <a href="https://github.com/sharp-apps/redis-html/blob/master/index.html" target="_blank" rel="noopener noreferrer">/RedisHtml/index.html</a> which includes all Template and JavaScript Source Code in <strong>&lt; 200 lines</strong> which also includes all as server logic as it doesn&#39;t rely on any back-end Services and just uses the <a href="https://sharpscript.net/docs/redis-scripts" target="_blank" rel="noopener noreferrer">Redis Scripts</a> to interface with Redis directly. The <a href="https://github.com/sharp-apps/redis-html/blob/master/index.html" target="_blank" rel="noopener noreferrer">source code</a> also serves as a good demonstration of the declarative coding style that Templates encourages that in addition to being highly-readable requires orders of magnitude less code than our previous Redis JavaScript SPA&#39;s with a comparable feature-set.</p><p>Having a much smaller code-base makes it much easier to maintain and enhance whilst being less susceptible to becoming obsolete by the next new JavaScript framework as it would only require rewriting 75 lines of JavaScript instead of the complete rewrite that would be required to convert the existing JavaScript Apps to a use different JavaScript fx.</p><h4 id="app-settings-1" tabindex="-1"><a href="https://github.com/sharp-apps/redis-html/blob/master/app.settings" target="_blank" rel="noopener noreferrer">app.settings</a> <a class="header-anchor" href="#app-settings-1" aria-hidden="true">#</a></h4><p>The <code>app.settings</code> for Redis is similar to Web App Starter above except it adds a <code>redis.connection</code> to configure a <a href="https://github.com/ServiceStack/ServiceStack.Redis#redismanagerpool" target="_blank" rel="noopener noreferrer">RedisManagerPool</a> at the <a href="https://github.com/ServiceStack/ServiceStack.Redis#redis-connection-strings" target="_blank" rel="noopener noreferrer">connection string</a> provided as well as <a href="https://sharpscript.net/docs/redis-scripts" target="_blank" rel="noopener noreferrer">Redis Scripts</a> to give Templates access to the Redis instance.</p><div class="language-"><pre><code>debug true
name Redis Web App
port 5000
contentRoot ~/../redis
webRoot ~/../redis
redis.connection localhost:6379
</code></pre></div><h3 id="rockwind" tabindex="-1">Rockwind <a class="header-anchor" href="#rockwind" aria-hidden="true">#</a></h3><blockquote><p>source <a href="https://github.com/sharp-apps/rockwind" target="_blank" rel="noopener noreferrer">/Rockwind</a> - demo <a href="http://rockwind-sqlite.web-app.io" target="_blank" rel="noopener noreferrer">rockwind-sqlite.web-app.io</a></p></blockquote><p>The Rockwind website shows an example of combining multiple websites in a single Web App by having them separated in different folders - a <strong><code>Rock</code>stars</strong> Content Website and a dynamic data-driven UI for the <strong>North<code>wind</code></strong> database which can run against either SQL Server, MySql or SQLite database using just configuration. It also includes <a href="https://sharpscript.net/docs/sharp-apis" target="_blank" rel="noopener noreferrer">Sharp APIs</a> examples for rapidly developing Web APIs.</p><h4 id="rockstars" tabindex="-1">Rockstars <a class="header-anchor" href="#rockstars" aria-hidden="true">#</a></h4><p><a href="https://github.com/sharp-apps/rockwind/tree/master/rockstars" target="_blank" rel="noopener noreferrer">/rockstars</a> is an example of a Content Website that maintains multiple sub sections itself, each with their own layouts - <a href="https://github.com/sharp-apps/rockwind/tree/master/rockstars/alive" target="_blank" rel="noopener noreferrer">/rockstars/alive</a> for living Rockstars and <a href="https://github.com/sharp-apps/rockwind/tree/master/rockstars/dead" target="_blank" rel="noopener noreferrer">/rockstars/dead</a> for those that have died. Each Rockstar maintains their own encapsulated <a href="https://github.com/sharp-apps/rockwind/tree/master/rockstars/alive/grohl" target="_blank" rel="noopener noreferrer">mix of HTML, markdown content and splash image</a> that intuitively uses the closest <code>_layout.html</code>, <code>content.md</code> and <code>splash.jpg</code> from the page they&#39;re referenced from. This approach makes it easy to move entire sub sections over by just moving a folder and it will automatically use the relevant layout and partials of its parent.</p><p><a href="http://rockwind-sqlite.web-app.io" target="_blank" rel="noopener noreferrer"><img src="https://sharpscript.net/assets/img/screenshots/rockwind.png" alt=""></a></p><h4 id="northwind" tabindex="-1">Northwind <a class="header-anchor" href="#northwind" aria-hidden="true">#</a></h4><p><a href="https://github.com/sharp-apps/rockwind/tree/master/northwind" target="_blank" rel="noopener noreferrer">/northwind</a> is an example of a dynamic UI for a database containing a <a href="http://rockwind-sqlite.web-app.io/northwind/customers?country=Germany" target="_blank" rel="noopener noreferrer">form to filter results</a>, multi-nested <a href="http://rockwind-sqlite.web-app.io/northwind/customer?id=ALFKI" target="_blank" rel="noopener noreferrer">detail pages</a> and <a href="http://rockwind-sqlite.web-app.io/northwind/order?id=10643" target="_blank" rel="noopener noreferrer">deep-linking</a> for quickly navigating between referenced data. Templates is also a great solution for rapidly developing Web APIs where the <a href="https://github.com/sharp-apps/rockwind/blob/master/api/customers.html" target="_blank" rel="noopener noreferrer">/api/customers.html</a> API Page below:</p>`,28),l=e("div",null,[e("div",{class:"language-js"},[e("pre",{"v-pre":""},[e("code",null,[e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" limit "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token keyword"},"default"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"100"),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token operator"},"|"),n(" assignTo"),e("span",{class:"token operator"},":"),n(" limit "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`

`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(),e("span",{class:"token string"},"'select Id, CompanyName, ContactName, ContactTitle, City, Country from Customer'"),n(),e("span",{class:"token operator"},"|"),n(" assignTo"),e("span",{class:"token operator"},":"),n(" sql "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`

`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" PathArgs "),e("span",{class:"token operator"},"|"),n(" endIfEmpty "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"useFmt"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'{0} where Id = @id'"),e("span",{class:"token punctuation"},","),n(" sql"),e("span",{class:"token punctuation"},")"),n(` 
            `),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"dbSingle"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),n(" id"),e("span",{class:"token operator"},":"),n(" PathArgs"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},"]"),n(),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),n(` 
            `),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token keyword"},"return"),n(),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`

`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" id       "),e("span",{class:"token operator"},"|"),n(" endIfEmpty "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"use"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'Id = @id'"),e("span",{class:"token punctuation"},")"),n("           "),e("span",{class:"token operator"},"|"),n(" addTo"),e("span",{class:"token operator"},":"),n(" filters "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`
`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" city     "),e("span",{class:"token operator"},"|"),n(" endIfEmpty "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"use"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'City = @city'"),e("span",{class:"token punctuation"},")"),n("       "),e("span",{class:"token operator"},"|"),n(" addTo"),e("span",{class:"token operator"},":"),n(" filters "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`
`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" country  "),e("span",{class:"token operator"},"|"),n(" endIfEmpty "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"use"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'Country = @country'"),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token operator"},"|"),n(" addTo"),e("span",{class:"token operator"},":"),n(" filters "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`
`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" filters  "),e("span",{class:"token operator"},"|"),n(" endIfEmpty "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"useFmt"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'{0} where {1}'"),e("span",{class:"token punctuation"},","),n(" sql"),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token function"},"join"),e("span",{class:"token punctuation"},"("),n("filters"),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token string"},"' and '"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),n("     "),e("span",{class:"token operator"},"|"),n(" assignTo"),e("span",{class:"token operator"},":"),n(" sql "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`
`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" sql      "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"appendFmt"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'" ORDER BY CompanyName {0}"'),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token function"},"sqlLimit"),e("span",{class:"token punctuation"},"("),n("limit"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),n("               "),e("span",{class:"token operator"},"|"),n(" assignTo"),e("span",{class:"token operator"},":"),n(" sql "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`

`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" sql      "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"dbSelect"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),n(" id"),e("span",{class:"token punctuation"},","),n(" city"),e("span",{class:"token punctuation"},","),n(" country "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),n(` 
            `),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token keyword"},"return"),n(),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`
`)])])])],-1),u=a(`<p>Contains all the code needed to generate the following API endpoints:</p><table class="table table-striped api-table"><tr class="bg-success"><td colspan="2" style="text-align:center;color:#fff;">/customers API</td></tr><tr><th>All Customers</th><td><div><a href="http://rockwind-sqlite.web-app.io/api/customers">/api/customers</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers.csv">/api/customers.csv</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers.html">/api/customers.html</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers?format=html">/api/customers?format=html</a></div><div style="margin:5px 0 0 0;color:#888;font-size:13px;"><b>Accept</b> HTTP Header also supported</div></td></tr><tr><th>Alfreds Futterkiste Details</th><td><div><a href="http://rockwind-sqlite.web-app.io/api/customers/ALFKI">/api/customers/ALFKI</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers/ALFKI.csv">/api/customers/ALFKI.csv</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers/ALFKI.html">/api/customers/ALFKI.html</a></div></td></tr><tr><th>As List</th><td><div><a href="http://rockwind-sqlite.web-app.io/api/customers?id=ALFKI">/api/customers?id=ALFKI</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers.csv?id=ALFKI">/api/customers.csv?id=ALFKI</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers.html?id=ALFKI">/api/customers.html?id=ALFKI</a></div></td></tr><tr><th>Customers in Germany</th><td><div><a href="http://rockwind-sqlite.web-app.io/api/customers?country=Germany">/api/customers?country=Germany</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers.csv?country=Germany">/api/customers.csv?country=Germany</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers.html?country=Germany">/api/customers.html?country=Germany</a></div></td></tr><tr><th>Customers in London</th><td><div><a href="http://rockwind-sqlite.web-app.io/api/customers?city=London">/api/customers?city=London</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers.csv?city=London">/api/customers.csv?city=London</a></div><div><a href="http://rockwind-sqlite.web-app.io/api/customers.html?city=London">/api/customers.html?city=London</a></div></td></tr><tr><th>Combination Query</th><td><a href="http://rockwind-sqlite.web-app.io/api/customers?city=London&amp;country=UK&amp;limit=3">/api/customers?city=London&amp;country=UK&amp;limit=3</a></td></tr></table><h4 id="multi-platform-configurations" tabindex="-1">Multi platform configurations <a class="header-anchor" href="#multi-platform-configurations" aria-hidden="true">#</a></h4><p>In addition to being a .NET Core 2.0 App that runs flawlessly cross-platform on Windows, Linux and OSX, Web Apps can also support multiple RDBMS&#39;s and <a href="https://docs.servicestack.net/virtual-file-system" target="_blank" rel="noopener noreferrer">Virtual File Systems</a> using just configuration:</p><ul><li><a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/web.sqlite.settings" target="_blank" rel="noopener noreferrer">web.sqlite.settings</a></li><li><a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/web.sqlserver.settings" target="_blank" rel="noopener noreferrer">web.sqlserver.settings</a></li><li><a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/web.mysql.settings" target="_blank" rel="noopener noreferrer">web.mysql.settings</a></li></ul><p>The Web App can be run using different settings with:</p><pre><code>dotnet web/app.dll ../rockwind/web.sqlserver.settings
</code></pre><h4 id="try-rockwind-against-your-local-rdbms" tabindex="-1">Try Rockwind against your local RDBMS <a class="header-anchor" href="#try-rockwind-against-your-local-rdbms" aria-hidden="true">#</a></h4><p>The <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/support/northwind-data" target="_blank" rel="noopener noreferrer">/support/northwind-data</a> project lets you quickly try out Rockwind against your local RDBMS by populating it with a copy of the Northwind database using the same <code>sqlserver</code> identifier and connection string from the App&#39;s settings, e.g:</p><pre><code>dotnet run sqlserver &quot;Server=localhost;Database=northwind;User Id=test;Password=test;&quot;
</code></pre><h4 id="web-azure-settings" tabindex="-1"><a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/web.azure.settings" target="_blank" rel="noopener noreferrer">web.azure.settings</a> <a class="header-anchor" href="#web-azure-settings" aria-hidden="true">#</a></h4><p>The example Azure configuration is also configured to use a different Virtual File System where instead of sourcing Web App files from the filesystem they&#39;re sourced from an <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-dotnet-how-to-use-blobs" target="_blank" rel="noopener noreferrer">Azure Blob Container</a>. In this case we&#39;re not using any files from the App so we don&#39;t need to set a <code>contentRoot</code> or <code>webRoot</code> path. This also means for deployment we&#39;re just deploying the <a href="https://github.com/ServiceStack/Web" target="_blank" rel="noopener noreferrer">WebApp</a> binary along with <a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/web.azure.settings" target="_blank" rel="noopener noreferrer">app.settings</a> since both Web App files and database are sourced remotely from managed Azure services.</p><h4 id="upload-rockwind-files-to-your-azure-blob-storage-container" tabindex="-1">Upload Rockwind files to your Azure Blob Storage Container <a class="header-anchor" href="#upload-rockwind-files-to-your-azure-blob-storage-container" aria-hidden="true">#</a></h4><p>The <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/support/copy-files" target="_blank" rel="noopener noreferrer">/support/copy-files</a> project lets you run Rockwind against your own Azure Blob Container by populating it with a copy of the <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/apps/rockwind" target="_blank" rel="noopener noreferrer">/rockwind</a> App&#39;s files using the same configuration in <a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/web.azure.settings" target="_blank" rel="noopener noreferrer">web.azure.settings</a>:</p><pre><code>dotnet run azure &quot;{ConnectionString:$AZURE_BLOB_CONNECTION_STRING,ContainerName:rockwind}&quot;
</code></pre><h4 id="multi-rdbms-sql" tabindex="-1">Multi-RDBMS SQL <a class="header-anchor" href="#multi-rdbms-sql" aria-hidden="true">#</a></h4><p>As Templates is unable to use a Typed ORM like <a href="https://github.com/ServiceStack/ServiceStack.OrmLite" target="_blank" rel="noopener noreferrer">OrmLite</a> to hide the nuances of each database, we need to be more diligent when creating parameterized SQL that works across multiple databases by using the <a href="https://sharpscript.net/docs/filters-reference?nameContains=sql&amp;tab=db-filters" target="_blank" rel="noopener noreferrer"><code>sql*</code> DB Scriptss</a> to avoid using RDBMS-specific SQL syntax. The <a href="https://github.com/sharp-apps/rockwind/blob/master/northwind/customer.html" target="_blank" rel="noopener noreferrer">/northwind/customer.html</a> contains a good example containing a number of things to watch out for:</p>`,17),d=e("div",null,[e("div",{class:"language-js"},[e("pre",{"v-pre":""},[e("code",null,[e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(" id "),e("span",{class:"token operator"},"|"),n(" endIfEmpty "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"useFmt"),e("span",{class:"token punctuation"},"("),n(`
    `),e("span",{class:"token template-string"},[e("span",{class:"token template-punctuation string"},"`"),e("span",{class:"token string"},`select o.Id, 
           {0} Employee, 
           OrderDate, ShipCountry, ShippedDate, 
           {1} Total 
      from {2} o
           inner join
           OrderDetail d on o.Id = d.OrderId
           inner join 
           Employee e on o.EmployeeId = e.Id
     where CustomerId = @id
     group by o.Id, EmployeeId, FirstName, LastName, OrderDate, ShipCountry, ShippedDate`),e("span",{class:"token template-punctuation string"},"`")]),e("span",{class:"token punctuation"},","),n(`
     `),e("span",{class:"token function"},"sqlConcat"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"["),e("span",{class:"token string"},'"e.FirstName"'),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token string"},`"' '"`),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token string"},'"e.LastName"'),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),n(` 
     `),e("span",{class:"token function"},"sqlCurrency"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"sum((d.Unitprice * d.Quantity) - d.discount)"'),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),n(` 
     `),e("span",{class:"token function"},"sqlQuote"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"Order"'),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),n(`
   `),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"dbSelect"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),n(" id "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token operator"},"|"),n(" assignTo"),e("span",{class:"token operator"},":"),n(" orders "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`
`)])])])],-1),k=a('<p>Use <code>sqlConcat</code> to concatenate strings using the RDBMS-specific SQL for the configured database. Likewise <code>sqlCurrency</code> utilizes RDBMS-specific SQL functions to return monetary values in a currency format, whilst <code>sqlQuote</code> is used for quoting tables and columns named after a reserved word.</p><blockquote><p>Of course if you don&#39;t intend on supporting multiple RDBMS&#39;s, you can ignore this and use RDBMS-specific syntax.</p></blockquote><h3 id="rockwind-vfs" tabindex="-1">Rockwind VFS <a class="header-anchor" href="#rockwind-vfs" aria-hidden="true">#</a></h3><blockquote><p>source <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/apps/rockwind-vfs" target="_blank" rel="noopener noreferrer">/rockwind-vfs</a> - demo <a href="http://rockwind-aws.web-app.io" target="_blank" rel="noopener noreferrer">rockwind-aws.web-app.io</a></p></blockquote><p><a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/apps/rockwind-vfs" target="_blank" rel="noopener noreferrer">/rockwind-vfs</a> is a clone of the Rockwind Web App with 3 differences: It uses the <code>resolveAsset</code> filter for each <code>.js</code>, <code>.css</code> and <code>image</code> web asset so that it&#39;s able to generate external URLs directly to the S3 Bucket, Azure Blob Container or CDN hosting a copy of the App&#39;s files where it both reduces the load on your Web App and maximize the responsiveness for the end user.</p><p>To maximize responsiveness when using remote storage, all <a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind-vfs/rockstars/alive/grohl/index.html" target="_blank" rel="noopener noreferrer">embedded files also utilize caching</a>:</p>',6),h=e("div",null,[e("div",{class:"language-js"},[e("pre",{"v-pre":""},[e("code",null,[e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"{"),n(),e("span",{class:"token string"},'"content.md"'),n(),e("span",{class:"token operator"},"|"),n(" includeFileWithCache "),e("span",{class:"token operator"},"|"),n(" markdown "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},"}"),n(`
`)])])])],-1),g=a('<p>The other difference is that each table and column has been quoted in &quot;double-quotes&quot; so that it works in PostgreSQL which otherwise treats unquoted symbols as lowercase. This version of Rockwind also works using SQL Server and SQLite as they also support <code>&quot;Table&quot;</code> quotes but not MySql which uses <code>Back Ticks</code> or <code>[SquareBrackets]</code>. These differences makes it infeasible to develop Web Apps that support both PostgreSQL and MySql unless you&#39;re willing to use all <strong>lowercase</strong>, <strong>snake_case</strong> or the <code>sqlQuote</code> filter for every table and column.</p><p><a href="http://rockwind-aws.web-app.io" target="_blank" rel="noopener noreferrer"><img src="https://sharpscript.net/assets/img/screenshots/rockwind.png" alt=""></a></p><h4 id="resolveasset" tabindex="-1">resolveAsset <a class="header-anchor" href="#resolveasset" aria-hidden="true">#</a></h4><p>When using a remote file storage like AWS S3 or Azure Blob Storage it&#39;s a good idea to use the <code>resolveAsset</code> filter for each external file reference. By default it returns the same path it was called with so it will continue to work locally but then ServiceStack effectively becomes a proxy where it calls the remote Storage Service for each requested download.</p>',4),m=e("div",null,[e("div",{class:"language-html"},[e("pre",{"v-pre":""},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("link")]),n(),e("span",{class:"token attr-name"},"rel"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("stylesheet"),e("span",{class:"token punctuation"},'"')]),n(),e("span",{class:"token attr-name"},"href"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("{{ "),e("span",{class:"token punctuation"},"'"),n("assets/css/bootstrap.css"),e("span",{class:"token punctuation"},"'"),n(" | resolveAsset }}"),e("span",{class:"token punctuation"},'"')]),n(),e("span",{class:"token punctuation"},"/>")]),n(`

`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("img")]),n(),e("span",{class:"token attr-name"},"src"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("{{ "),e("span",{class:"token punctuation"},"'"),n("splash.jpg"),e("span",{class:"token punctuation"},"'"),n(" | resolveAsset }}"),e("span",{class:"token punctuation"},'"')]),n(),e("span",{class:"token attr-name"},"id"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("splash"),e("span",{class:"token punctuation"},'"')]),n(),e("span",{class:"token attr-name"},"alt"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),n("Dave Grohl"),e("span",{class:"token punctuation"},'"')]),n(),e("span",{class:"token punctuation"},"/>")]),n(`
`)])])])],-1),f=a(`<p>ServiceStack asynchronously writes each file to the Response Stream with the last <code>Last-Modified</code> HTTP Header to enable browser caching so it&#39;s still a workable solution but for optimal performance you can specify <code>args.assetsBase</code> in your app.settings to populate the assetsBase <code>TemplateContext</code> Argument the <code>resolveAsset</code> filter uses to generate an external URL reference to the remote file, reducing the load and improving the performance of your App, especially when configured to use a CDN.</p><h3 id="aws-cloud-apps" tabindex="-1">AWS Cloud Apps <a class="header-anchor" href="#aws-cloud-apps" aria-hidden="true">#</a></h3><p>The AWS settings below shows an example of this where every external resource in <a href="http://rockwind-aws.web-app.io" target="_blank" rel="noopener noreferrer">rockwind-aws.web-app.io</a> has been replaced with a direct reference to the asset on its configured S3 bucket:</p><h4 id="rockwind-aws-app-settings" tabindex="-1"><a href="https://github.com/sharp-apps/rockwind-aws/blob/master/app.settings" target="_blank" rel="noopener noreferrer">Rockwind.Aws/app.settings</a> <a class="header-anchor" href="#rockwind-aws-app-settings" aria-hidden="true">#</a></h4><div class="language-"><pre><code># Note: values prefixed with &#39;$&#39; are resolved from Environment Variables
debug false
name AWS S3 PostgreSQL Web App
bind *
port 5000
db postgres
db.connection $AWS_RDS_POSTGRES
files s3
files.config {AccessKey:$AWS_ACCESS_KEY,SecretKey:$AWS_SECRET_KEY,Region:us-east-1,Bucket:rockwind}
args.assetsBase http://s3-postgresql.s3-website-us-east-1.amazonaws.com/

# Reduces an S3 API call, but takes longer for modified pages to appear
checkForModifiedPagesAfterSecs 60
defaultFileCacheExpirySecs     60
</code></pre></div><p>With all files being sourced from S3 and the App configured to use AWS RDS PostgreSQL the entire App is hosted on AWS&#39;s managed cloud services that&#39;s decoupled from the .NET Core 2.0 binary that runs it that for the most part won&#39;t require redeploying unless making configuration changes or upgrading the <code>web/app.dll</code> as any App changes can just be uploaded straight to S3 where changes will reflected after <code>checkForModifiedPagesAfterSecs</code>, which tells the Web App how long to wait before checking for file changes whilst <code>defaultFileCacheExpirySecs</code> specifies how long to cache included files like <code>content.md</code>.</p><h4 id="dockerfile" tabindex="-1"><a href="https://github.com/sharp-apps/rockwind-aws/blob/master/Dockerfile" target="_blank" rel="noopener noreferrer">DockerFile</a> <a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a></h4><p>Deployments are also greatly simplified as all that&#39;s needed is to deploy the WebApp binary and the app.settings of your Cloud App, e.g. This is the DockerFile for <a href="http://rockwind-aws.web-app.io" target="_blank" rel="noopener noreferrer">rockwind-aws.web-app.io</a> - deployed to AWS ECS using the deployment scripts in <a href="https://github.com/sharp-apps/rockwind-aws" target="_blank" rel="noopener noreferrer">Rockwind.Aws</a> as per our <a href="https://docs.servicestack.net/deploy-netcore-docker-aws-ecs" target="_blank" rel="noopener noreferrer">.NET Core Docker Deployment Guideline</a>:</p><div class="language-"><pre><code>FROM microsoft/dotnet:2.0-sdk
COPY web /web
ADD https://raw.githubusercontent.com/NetCoreWebApps/rockwind-aws/master/app.settings /web/app.settings
WORKDIR /web
EXPOSE 5000/tcp
ENV ASPNETCORE_URLS https://*:5000
ENTRYPOINT [&quot;dotnet&quot;, &quot;/web/app.dll&quot;]
</code></pre></div><h3 id="azure-cloud-apps" tabindex="-1">Azure Cloud Apps <a class="header-anchor" href="#azure-cloud-apps" aria-hidden="true">#</a></h3><p>We can also create Azure Cloud Apps in the same we&#39;ve done above for AWS which we&#39;ve deployed to <a href="http://rockwind.azurewebsites.net" target="_blank" rel="noopener noreferrer">rockwind.azurewebsites.net</a>. It&#39;s running the same <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/apps/rockwind-vfs" target="_blank" rel="noopener noreferrer">/rockwind-vfs</a> Web App but using an Azure hosted SQL Server database and all its files are hosted on Azure Blob Storage:</p><h4 id="rockwind-azure-app-settings" tabindex="-1"><a href="https://github.com/sharp-apps/rockwind-azure/blob/master/app.settings" target="_blank" rel="noopener noreferrer">Rockwind.Azure/app.settings</a> <a class="header-anchor" href="#rockwind-azure-app-settings" aria-hidden="true">#</a></h4><div class="language-"><pre><code># Note: values prefixed with &#39;$&#39; are resolved from Environment Variables
debug false
name Azure Blob SQL Server Web App
bind *
port 5000
db sqlserver
db.connection $AZURE_SQL_CONNECTION_STRING
files azure
files.config {ConnectionString:$AZURE_BLOB_CONNECTION_STRING,ContainerName:rockwind}
args.assetsBase https://servicestack.blob.core.windows.net/rockwind/

# Reduces an Azure Blob API call, but takes longer for modified pages to appear
checkForModifiedPagesAfterSecs 60
defaultFileCacheExpirySecs     60
</code></pre></div><p>See <a href="https://github.com/sharp-apps/rockwind-azure" target="_blank" rel="noopener noreferrer">NetCoreWebApps/rockwind-azure</a> for a detailed step-by-step guide for deploying Web Apps to Azure.</p><h3 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h3><blockquote><p>source <a href="https://github.com/sharp-apps/plugins" target="_blank" rel="noopener noreferrer">/Plugins</a> - demo <a href="http://plugins.web-app.io" target="_blank" rel="noopener noreferrer">plugins.web-app.io</a></p></blockquote><p>Up till now the Apps above only have only used functionality built into ServiceStack, to enable even greater functionality but still retain all the benefits of developing Web Apps you can drop <strong>.dll&#39;s</strong> with custom functionality into your Web App&#39;s <code>/plugins</code> folder. The plugins support in Web Apps is as frictionless as we could make it, there&#39;s no configuration to maintain or special interfaces to implement, you can just drop your <strong>existing implementation .dll&#39;s</strong> as-is into the App&#39;s <code>/plugins</code> folder.</p><p>Plugins allow &quot;no touch&quot; sharing of <a href="https://docs.servicestack.net/plugins" target="_blank" rel="noopener noreferrer">ServiceStack Plugins</a>, <a href="https://docs.servicestack.net/create-your-first-webservice" target="_blank" rel="noopener noreferrer">Services</a>, <a href="https://sharpscript.net/docs/methods" target="_blank" rel="noopener noreferrer">Template Filters</a>, <a href="https://sharpscript.net/docs/code-pages" target="_blank" rel="noopener noreferrer">Template Code Pages</a>, <a href="https://docs.servicestack.net/validation" target="_blank" rel="noopener noreferrer">Validators</a>, etc. contained within <strong>.dll&#39;s</strong> or <strong>.exe&#39;s</strong> dropped in a Web App&#39;s <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/apps/plugins/plugins" target="_blank" rel="noopener noreferrer">/plugins</a> folder which are auto-registered on startup. The source code for all plugins used in this App were built from the .NET Core 2.0 projects in the <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/example-plugins" target="_blank" rel="noopener noreferrer">/example-plugins</a> folder. The <a href="http://plugins.web-app.io" target="_blank" rel="noopener noreferrer">plugins.web-app.io</a> Web App below walks through examples of using Custom Filters, Services and Validators:</p><p><a href="http://plugins.web-app.io" target="_blank" rel="noopener noreferrer"><img src="https://sharpscript.net/assets/img/screenshots/plugins.png" alt=""></a></p><h3 id="registering-servicestack-plugins" tabindex="-1">Registering ServiceStack Plugins <a class="header-anchor" href="#registering-servicestack-plugins" aria-hidden="true">#</a></h3><p><a href="https://docs.servicestack.net/plugins" target="_blank" rel="noopener noreferrer">ServiceStack Plugins</a> can be added to your App by listing it&#39;s Type Name in the <code>features</code> config entry in <a href="https://github.com/sharp-apps/plugins/tree/master/app.settings" target="_blank" rel="noopener noreferrer">app.settings</a>:</p><div class="language-"><pre><code>debug true
name Web App Plugins
port 5000
contentRoot ~/../plugins
webRoot ~/../plugins
features CustomPlugin, OpenApiFeature, PostmanFeature, CorsFeature, ValidationFeature
CustomPlugin { ShowProcessLinks: true }
ValidationFeature { ScanAppHostAssemblies: true }
</code></pre></div><p>All plugins listed in <code>features</code> will be added to your Web App&#39;s AppHost in the order they&#39;re specified. They can further customized by adding a separate config entry with the Plugin Name and a JavaScript Object literal to populate the Plugin at registration, e.g the config above is equivalent to:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomPlugin</span> <span class="token punctuation">{</span> ShowProcessLinks <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostmanFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CorsFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationFeature</span> <span class="token punctuation">{</span> ScanAppHostAssemblies <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="custom-plugin" tabindex="-1">Custom Plugin <a class="header-anchor" href="#custom-plugin" aria-hidden="true">#</a></h4><p>In this case it tells our <a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/example-plugins/ServerInfo/CustomPlugin.cs" target="_blank" rel="noopener noreferrer">CustomPlugin</a> from <strong>/plugins/ServerInfo.dll</strong> to also show Process Links in its <a href="http://plugins.web-app.io/metadata" target="_blank" rel="noopener noreferrer">/metadata</a> Page:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> ShowDrivesLinks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> ShowProcessLinks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token class-name">IAppHost</span> appHost<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ShowDrivesLinks<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> diskFormat <span class="token operator">=</span> Env<span class="token punctuation">.</span>IsWindows <span class="token punctuation">?</span> <span class="token string">&quot;NTFS&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;ext2&quot;</span><span class="token punctuation">;</span>
            appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MetadataFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">AddPluginLink</span><span class="token punctuation">(</span><span class="token string">&quot;/drives&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;All Disks&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">AddPluginLink</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;/drives?DriveFormatIn=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">diskFormat</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">diskFormat</span><span class="token punctuation">}</span></span><span class="token string"> Disks&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ShowProcessLinks<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MetadataFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">AddPluginLink</span><span class="token punctuation">(</span><span class="token string">&quot;/processes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;All Processes&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">AddPluginLink</span><span class="token punctuation">(</span><span class="token string">&quot;/process/current&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Current Process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where as it was first registered in the list will appear before any links registered by other plugins:</p><p><a href="http://plugins.web-app.io/metadata" target="_blank" rel="noopener noreferrer"><img src="http://plugins.web-app.io/assets/img/metadata-screenshot.png" alt=""></a></p><h3 id="chat" tabindex="-1">Chat <a class="header-anchor" href="#chat" aria-hidden="true">#</a></h3><blockquote><p>source <a href="https://github.com/sharp-apps/plugins" target="_blank" rel="noopener noreferrer">/ </a> - demo <a href="http://chat.web-app.io" target="_blank" rel="noopener noreferrer">chat.web-app.io</a></p></blockquote><p><a href="https://github.com/sharp-apps/chat/tree/master" target="_blank" rel="noopener noreferrer">/Chat</a> is an example of the ultimate form of extensibility where instead of just being able to add Services, Filters and Plugins, etc. You can add your entire <code>AppHost</code> which Web Apps will use instead of its own. This vastly expands the use-cases that can be built with Web Apps as it gives you complete fine-grained control over how your App is configured.</p><p><a href="http://chat.web-app.io" target="_blank" rel="noopener noreferrer"><img src="https://sharpscript.net/assets/img/screenshots/chat.png" alt=""></a></p><h4 id="develop-back-end-using-net-ide-s" tabindex="-1">Develop back-end using .NET IDE&#39;s <a class="header-anchor" href="#develop-back-end-using-net-ide-s" aria-hidden="true">#</a></h4><p>For <a href="http://chat.web-app.io" target="_blank" rel="noopener noreferrer">chat.web-app.io</a> we&#39;ve taken a copy of the existing .NET Core 2.0 <a href="https://github.com/NetCoreApps/Chat" target="_blank" rel="noopener noreferrer">Chat App</a> and moved its C# code to <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/example-plugins/Chat" target="_blank" rel="noopener noreferrer">/example-plugins/Chat</a> and its files to <a href="https://github.com/sharp-apps/chat/tree/master" target="_blank" rel="noopener noreferrer">/Chat</a> where it can be developed like any other Web App except it utilizes the Chat AppHost and implementation in the <a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/example-plugins/Chat/Program.cs" target="_blank" rel="noopener noreferrer">SelfHost Chat App</a>.</p><p>Customizations from the original <a href="https://github.com/NetCoreApps/Chat/blob/master/src/Chat/Startup.cs" target="_blank" rel="noopener noreferrer">.NET Core Chat implementation</a> includes removing MVC and Razor dependencies and configuration, extracting its <a href="https://github.com/sharp-apps/chat/tree/master/_layout.html" target="_blank" rel="noopener noreferrer">_layout.html</a> and converting <a href="https://github.com/sharp-apps/chat/tree/master/index.html" target="_blank" rel="noopener noreferrer">index.html</a> to use Templates from its original <a href="https://github.com/NetCoreApps/Chat/blob/master/src/Chat/wwwroot/default.cshtml" target="_blank" rel="noopener noreferrer">default.cshtml</a>. It&#39;s also been enhanced with the ability to evaluate Templates from the Chat window, as seen in the screenshot above.</p><h4 id="chat-apphost" tabindex="-1">Chat AppHost <a class="header-anchor" href="#chat-apphost" aria-hidden="true">#</a></h4><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IHostingEnvironment</span> env<span class="token punctuation">,</span> <span class="token class-name">ILoggerFactory</span> loggerFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        loggerFactory<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> appSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFileSettings</span><span class="token punctuation">(</span><span class="token string">&quot;~/../../apps/chat/app.settings&quot;</span><span class="token punctuation">.</span><span class="token function">MapProjectPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span><span class="token function">UseServiceStack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;Chat Web App&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ServerEventsServices</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token class-name">IAppSettings</span> appSettings<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AppSettings <span class="token operator">=</span> appSettings<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Plugins<span class="token punctuation">.</span><span class="token function">AddIfNotExists</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SharpPagesFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Already added if it&#39;s running as a Web App</span>
        
        Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerEventsFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span>
        <span class="token punctuation">{</span>
            DefaultContentType <span class="token operator">=</span> MimeTypes<span class="token punctuation">.</span>Json<span class="token punctuation">,</span>
            AllowSessionIdsInHttpParams <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>CustomErrorHttpHandlers<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>Forbidden<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Register all Authentication methods you want to enable for this web app.            </span>
        Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthUserSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TwitterAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">//Sign-in with Twitter</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FacebookAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//Sign-in with Facebook</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GithubAuthProvider</span><span class="token punctuation">(</span>AppSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//Sign-in with GitHub</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAutoWiredAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MemoryChatHistory<span class="token punctuation">,</span> IChatHistory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CorsFeature</span><span class="token punctuation">(</span>
            <span class="token named-parameter punctuation">allowOriginWhitelist</span><span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;http://localhost&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://null.jsbin.com&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">&quot;Content-Type, Allow, Authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="reusing-web-app-s-web-setting-and-files" tabindex="-1">Reusing Web App&#39;s web.setting and files <a class="header-anchor" href="#reusing-web-app-s-web-setting-and-files" aria-hidden="true">#</a></h4><p>One nice thing from being able to reuse existing AppHost&#39;s is being able to develop all back-end C# Services and Custom Filters as a stand-alone .NET Core Project where it&#39;s more productive with access to .NET IDE tooling and debugging.</p><p>To account for these 2 modes we use <code>AddIfNotExists</code> to only register the <code>SharpPagesFeature</code> plugin when running as a stand-alone App and add an additional constructor so it reuses the existing <code>app.settings</code> as its <a href="https://docs.servicestack.net/appsettings" target="_blank" rel="noopener noreferrer">IAppSettings</a> provider for is custom App configuration like OAuth App keys required for enabling Sign-In&#39;s via with Twitter, Facebook and GitHub when running on <code>http://localhost:5000</code> as seen in Chat&#39;s <a href="https://github.com/sharp-apps/chat/blob/master/app.settings" target="_blank" rel="noopener noreferrer">app.settings</a>.</p><p>After the back-end has been implemented we can build and copy the compiled <strong>Chat.dll</strong> into the Chat&#39;s <a href="https://github.com/sharp-apps/chat/tree/master/plugins" target="_blank" rel="noopener noreferrer">/plugins</a> folder where we can take advantage of the improved development experience for rapidly developing its UI.</p><h3 id="simplified-web-app-deployments" tabindex="-1">Simplified Web App Deployments <a class="header-anchor" href="#simplified-web-app-deployments" aria-hidden="true">#</a></h3><p>Not having to build projects also greatly simplifies deployments as it just becomes an exercise of deploying your Web App&#39;s static files, <code>app.settings</code> and the pre-compiled <a href="https://github.com/ServiceStack/Web" target="_blank" rel="noopener noreferrer">Web App binary</a>. We&#39;re maintaining step-by-step guides for the most popular deployment methods in <a href="https://sharpscript.net/docs/deploying-sharp-apps" target="_blank" rel="noopener noreferrer">sharpscript.net/docs/deploying-sharp-apps</a> which we&#39;ll continue adding to in future.</p><p>To give you an idea of how easy deployments are, after a <a href="https://sharpscript.net/docs/deploying-sharp-apps#setup-supervisor" target="_blank" rel="noopener noreferrer">one-time setup of supervisor and nginx configuration for each App</a> we deploy all Web Apps above (excl AWS and Azure Cloud Apps which are deployed to AWS/Azure using Docker) in seconds by running <a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/WebApp/run.deploy.apps.sh" target="_blank" rel="noopener noreferrer">this script</a> below:</p><div class="language-shell"><pre><code><span class="token function">cat</span> <span class="token punctuation">..</span>/apps/bare/app.settings <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/debug/s/ .*/ false/&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/port/s/ .*/ 5001/&quot;</span> <span class="token operator">&gt;</span> <span class="token punctuation">..</span>/apps/web/web.bare.settings
<span class="token function">cat</span> <span class="token punctuation">..</span>/apps/redis/app.settings <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/debug/s/ .*/ false/&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/port/s/ .*/ 5002/&quot;</span> <span class="token operator">&gt;</span> <span class="token punctuation">..</span>/apps/web/web.redis.settings
<span class="token function">cat</span> <span class="token punctuation">..</span>/apps/rockwind/web.sqlite.settings <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/debug/s/ .*/ false/&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/port/s/ .*/ 5003/&quot;</span> <span class="token operator">&gt;</span> <span class="token punctuation">..</span>/apps/web/web.rockwind-sqlite.settings
<span class="token function">cat</span> <span class="token punctuation">..</span>/apps/rockwind-vfs/web.sqlite.settings <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/debug/s/ .*/ false/&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/port/s/ .*/ 5004/&quot;</span> <span class="token operator">&gt;</span> <span class="token punctuation">..</span>/apps/web/web.rockwind-vfs-sqlite.settings
<span class="token function">cat</span> <span class="token punctuation">..</span>/apps/plugins/app.settings <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/debug/s/ .*/ false/&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/port/s/ .*/ 5005/&quot;</span> <span class="token operator">&gt;</span> <span class="token punctuation">..</span>/apps/web/web.plugins.settings
<span class="token function">cat</span> <span class="token punctuation">..</span>/apps/chat/web.release.settings <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&quot;/port/s/ .*/ 5006/&quot;</span> <span class="token operator">&gt;</span> <span class="token punctuation">..</span>/apps/web/web.chat.settings

<span class="token function">rsync</span> -avz -e <span class="token string">&#39;ssh&#39;</span> <span class="token punctuation">..</span>/apps deploy@web-app.io:/home/deploy

<span class="token function">ssh</span> deploy@web-app.io <span class="token string">&quot;sudo supervisorctl restart all&quot;</span>
</code></pre></div><p>Which generates deployment <code>app.settings</code> from each App&#39;s development app.settings by flipping the <code>debug</code> flag and configuring each App to run on a different port. <code>rsync</code> is then used to incrementally upload just the files that have changed before <code>supervisorctl</code> is run remotely to restart all Web Apps.</p><p>If prefered you can choose to only restart the App that&#39;s changed by replacing the last line with:</p><pre><code>sudo supervisorctl restart &lt;app name&gt;
</code></pre><p>If you&#39;re not running a Linux or OSX Desktop OS, this script can be run using <a href="https://github.com/ServiceStack/redis-windows#option-1-install-redis-on-ubuntu-on-windows" target="_blank" rel="noopener noreferrer">Windows Subsystem for Linux (WSL)</a>.</p><h3 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-hidden="true">#</a></h3><p>Templates supports a very limited subset of JavaScript, namely all primitive data types, calling functions, bindings and the <code>-</code> and <code>!</code> unary operators. This current limitation is similar to LISP where named functions are used instead of operators. We&#39;re still undecided on whether to add support for more JavaScript operators as we&#39;d prefer to have as minimal non-overridable behavior as possible and currently filters define all functionality in Templates.</p><p>Currently you&#39;ll need to use <a href="https://sharpscript.net/docs/default-scripts#arithmetic" target="_blank" rel="noopener noreferrer">named Math functions</a> to perform arithmetic operations, likewise for <a href="https://sharpscript.net/docs/default-scripts#conditional-tests" target="_blank" rel="noopener noreferrer">boolean logic</a> or <a href="https://sharpscript.net/docs/syntax#boolean-expressions" target="_blank" rel="noopener noreferrer">Boolean Expressions</a> for filters that support it.</p><h3 id="current-status" tabindex="-1">Current Status <a class="header-anchor" href="#current-status" aria-hidden="true">#</a></h3><p>Whilst we expect there to be some bugs from our initial release the existing Apps and use-cases we&#39;ve already developed with it have served as good tests cases to harden its implementation. Will continue adding more rigorous tests, complex expressions and example Apps in future releases.</p><p>To make it easy to compare Template to C# syntax we&#39;ve also ported <a href="https://sharpscript.net/linq/" target="_blank" rel="noopener noreferrer">C#&#39;s LINQ Examples</a> where of all the <a href="https://github.com/mythz/swift-linq-examples" target="_blank" rel="noopener noreferrer">languages we&#39;ve ported</a>, it&#39;s the most succinct and only interactive example.</p><h3 id="free-for-oss-and-commercial-projects" tabindex="-1">Free for OSS and Commercial Projects <a class="header-anchor" href="#free-for-oss-and-commercial-projects" aria-hidden="true">#</a></h3><p>We believe we&#39;ve only just scratched the surface of what&#39;s possible with Templates and we&#39;d love to see what new use-cases it can help achieve and help encourage an ecosystem of pluggable and reusable filters, that the core of Templates is being developed in <a href="https://www.nuget.org/packages/ServiceStack.Common" target="_blank" rel="noopener noreferrer">ServiceStack.Common</a> which is an unrestricted library that&#39;s free for OSS and commercial usage.</p><p>ServiceStack&#39;s <a href="https://servicestack.net/download#free-quotas" target="_blank" rel="noopener noreferrer">existing free-quota restrictions</a> only applies if you&#39;re using OrmLite, ServiceStack.Redis or exceed the allowed free-quota of ServiceStack Services.</p><h2 id="debug-inspector" tabindex="-1">Debug Inspector <a class="header-anchor" href="#debug-inspector" aria-hidden="true">#</a></h2><p><a href="https://sharpscript.net/metadata/debug" target="_blank" rel="noopener noreferrer"><img src="https://sharpscript.net/assets/img/screenshots/metadata-debug.png" alt=""></a></p><p>All ServiceStack Apps now have access to rich introspection and queryability for inspecting remote ServiceStack instances with the new <a href="https://sharpscript.net/docs/servicestack-scripts#debug-template" target="_blank" rel="noopener noreferrer">Metadata Debug Inspector</a>.</p><p>The Debug Template is a Service in <code>SharpPagesFeature</code> that&#39;s pre-registered in <a href="https://docs.servicestack.net/debugging#debugmode" target="_blank" rel="noopener noreferrer">DebugMode</a>. The Service can also be available when not in <strong>DebugMode</strong> by enabling it with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SharpPagesFeature</span> <span class="token punctuation">{</span> 
    MetadataDebugAdminRole <span class="token operator">=</span> RoleNames<span class="token punctuation">.</span>Admin<span class="token punctuation">,</span>        <span class="token comment">// Only allow Admin users</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>This registers the Service but limits it to Users with the <code>Admin</code> role, alternatively you configure an <a href="https://docs.servicestack.net/debugging#authsecret" target="_blank" rel="noopener noreferrer">Admin Secret</a>:</p><div class="language-csharp"><pre><code><span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span> AdminAuthSecret <span class="token operator">=</span> <span class="token string">&quot;secret&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Which will let you access it by appending the authsecret to the querystring: <code>/metadata/debug?authsecret=secret</code></p><p>Alternatively if preferred you can make the Debug Template Service available to all users with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SharpPagesFeature</span> <span class="token punctuation">{</span> 
    MetadataDebugAdminRole <span class="token operator">=</span> RoleNames<span class="token punctuation">.</span>AllowAnyUser<span class="token punctuation">,</span>  <span class="token comment">// Allow Authenticated Users</span>
    MetadataDebugAdminRole <span class="token operator">=</span> RoleNames<span class="token punctuation">.</span>AllowAnon<span class="token punctuation">,</span>     <span class="token comment">// Allow anyone</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Which is the configuration that allows <a href="https://sharpscript.net/metadata/debug" target="_blank" rel="noopener noreferrer">sharpscript.net//metadata/debug</a> to be accessible to anyone.</p><h2 id="javascript-utils" tabindex="-1">JavaScript Utils <a class="header-anchor" href="#javascript-utils" aria-hidden="true">#</a></h2><p>The development of Templates also brought with it the development of a number of high-performance utilities that are useful for use on their own. The ServiceStack.Text JSON Serializer was only designed for serializing Typed POCOs, you can still use it to <a href="https://github.com/ServiceStack/ServiceStack.Text#supports-dynamic-json" target="_blank" rel="noopener noreferrer">deserialize dynamic JSON</a> but you would need to specify the Type to deserialize into on the call-site otherwise the value would be returned as a string.</p><p>Templates implementation of JavaScript preserves the Type which can be used to parse JavaScript or JSON literals:</p><div class="language-csharp"><pre><code>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>      <span class="token comment">//= int 1 </span>
JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;1.1&quot;</span><span class="token punctuation">)</span>    <span class="token comment">//= double 1.1</span>
JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;a&#39;&quot;</span><span class="token punctuation">)</span>    <span class="token comment">//= string &quot;a&quot;</span>
JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;{a:1}&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//= new Dictionary&lt;string, object&gt; { {&quot;a&quot;, 1 } }</span>
</code></pre></div><p>It can be used to parse dynamic JSON and any primitive JavaScript data type. The inverse API of <code>JSON.stringify()</code> is also available.</p><h3 id="eval" tabindex="-1">Eval <a class="header-anchor" href="#eval" aria-hidden="true">#</a></h3><p>Eval is useful if you want to execute custom JavaScript functions, or if you want to have a text DSL or scripting language for executing custom logic or business rules you want to be able to change without having to compile or redeploy your App. It uses <a href="https://sharpscript.net/docs/sandbox" target="_blank" rel="noopener noreferrer">Templates Sandbox</a> which lets you evaluate the script within a custom scope that defines what functions and arguments it has access to, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TemplateFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span>
         <span class="token named-parameter punctuation">args</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;arg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token named-parameter punctuation">functions</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;arg&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>                                        <span class="token comment">//= &quot;value&quot;</span>
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;reverse(arg)&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>                               <span class="token comment">//= &quot;eulav&quot;</span>
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;itemsOf(3, padRight(reverse(arg), 8, &#39;_&#39;))&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span> <span class="token comment">//= [&quot;eulav___&quot;, &quot;eulav___&quot;, &quot;eulav___&quot;]</span>

<span class="token comment">//= { a: [&quot;eulav___&quot;, &quot;eulav___&quot;, &quot;eulav___&quot;] }</span>
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;{a: itemsOf(3, padRight(reverse(arg), 8, &#39;_&#39;)) }&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>
</code></pre></div><h2 id="simple-container" tabindex="-1">Simple Container <a class="header-anchor" href="#simple-container" aria-hidden="true">#</a></h2><p>In order for Templates to be free of external dependencies and be decoupled from any one Web Framework but still retain AutoWired functionality it uses a new <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/SimpleContainer.cs" target="_blank" rel="noopener noreferrer">SimpleContainer</a> which implements <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/IContainer.cs" target="_blank" rel="noopener noreferrer">IContainer</a> - the smallest interface we could define for a minimal but useful IOC:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IContainer</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">CreateFactory</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">IContainer</span> <span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token return-type class-name">IContainer</span> <span class="token function">AddTransient</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Exists</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>It&#39;s late-bound API supports registering dependencies in the 2 most useful Scopes: Singleton and Transient. Leveraging the utility of extension methods, every IOC implementing <code>IContainer</code> also gains the same <a href="https://github.com/ServiceStack/ServiceStack/blob/710da129005f3df5dc93ea0e51e6d8a8681ec04e/src/ServiceStack.Common/SimpleContainer.cs#L114" target="_blank" rel="noopener noreferrer">Typed Generic API</a>, e.g:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">,</span>Foo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IBar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FooImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FooImpl<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

container<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> foo <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> bar <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IBar</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> hasFoo <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Exists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Both <code>Funq.Container</code> and <code>SimpleContainer</code> implement the <code>IContainer</code> interface which <a href="https://sharpscript.net/docs/sharp-pages" target="_blank" rel="noopener noreferrer">ServiceStack&#39;s SharpPagesFeature</a> utilizes to replace the TemplateContext&#39;s built-in IOC to use Funq where it shares the same IOC instance and is able to resolve ServiceStack&#39;s AppHost dependencies.</p><h3 id="fast-small-dependency-free-ioc" tabindex="-1">Fast, small, dependency-free IOC <a class="header-anchor" href="#fast-small-dependency-free-ioc" aria-hidden="true">#</a></h3><p>We initially chose <code>Funq</code> because it was the amongst the fastest, smallest and most embeddable IOC&#39;s available with a pleasant Typed API, we&#39;ve since had several requests in the past to extract ServiceStack&#39;s enhanced version of <code>Funq</code> so it can be used outside of <code>ServiceStack.dll</code> but it would have resulted in unnecessary friction and overhead for little gain as <code>Funq</code> is still usable outside of a ServiceStack App, it just required a reference to <code>ServiceStack.dll</code>.</p><p>We&#39;re happy to report <code>SimpleContainer</code> is even smaller and faster than Funq and only requires a dependency to <code>ServiceStack.Common.dll</code>. It supports AutoWiring, constructor and public property injection but not Funq&#39;s other less used features like Child Containers, named dependencies and Request Scoped dependencies.</p><h2 id="simple-appsettings" tabindex="-1">Simple AppSettings <a class="header-anchor" href="#simple-appsettings" aria-hidden="true">#</a></h2><p><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/SimpleAppSettings.cs" target="_blank" rel="noopener noreferrer">SimpleAppSettings</a> is an <a href="https://docs.servicestack.net/appsettings" target="_blank" rel="noopener noreferrer">IAppSettings provider</a> that you can use to maintain substitutable App Configuration without a dependency to <code>ServiceStack.dll</code> which can be populated with a string Dictionary:</p><div class="language-csharp"><pre><code>AppSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SimpleAppSettings</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;EnableFeature.1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;AllowedUsers&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tom,Mick,Harry&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> enableFeature1 <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;EnableFeature.1&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">defaultValue</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> enableFeature2 <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;EnableFeature.2&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">defaultValue</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> allowedUsers <span class="token operator">=</span> AppSettings<span class="token punctuation">.</span><span class="token function">GetList</span><span class="token punctuation">(</span><span class="token string">&quot;AllowedUsers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="virtual-file-system" tabindex="-1">Virtual File System <a class="header-anchor" href="#virtual-file-system" aria-hidden="true">#</a></h2><p>The major change added in order for Templates to be isolated from the ServiceStack Web Framework was to decouple the <a href="https://docs.servicestack.net/virtual-file-system" target="_blank" rel="noopener noreferrer">Virtual File System providers</a> from ServiceStack&#39;s AppHost and move them to <code>ServiceStack.Common</code>.</p><p>This separation makes it easier to use VFS providers outside of ServiceStack AppHost which is a useful abstraction for copying files from different file sources as done in the <a href="https://github.com/ServiceStack/dotnet-app/tree/master/src/support/copy-files" target="_blank" rel="noopener noreferrer">copy-files</a> project to upload files to AWS S3 or Azure Blob Storage.</p><h3 id="addvirtualfilesources" tabindex="-1">AddVirtualFileSources <a class="header-anchor" href="#addvirtualfilesources" aria-hidden="true">#</a></h3><p>Registering an additional VFS provider in AppHost&#39;s previously required overriding <code>GetVirtualFileSources()</code>, they can now also be registered by adding them to <code>AddVirtualFileSources</code>, e.g:</p><div class="language-csharp"><pre><code>AddVirtualFileSources<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>vfsProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="vfs-breaking-change" tabindex="-1">VFS Breaking Change <a class="header-anchor" href="#vfs-breaking-change" aria-hidden="true">#</a></h3><p>ServiceStack App&#39;s typically don&#39;t create instances of VFS providers directly but all VFS provider constructors needed to be changed to remove its <code>IAppHost</code> dependency. We used the same breaking change window to also give the user-facing VFS providers better names, changing from <code>*VirtualPathProvider</code> to <code>*VirtualFiles</code>, e.g:</p><ul><li><code>FileSystemVirtualFiles</code></li><li><code>MemoryVirtualFiles</code></li><li><code>ResourceVirtualFiles</code></li><li><code>S3VirtualFiles</code></li><li><code>AzureBlobVirtualFiles</code></li><li><code>MultiVirtualFiles</code></li></ul><p>The VFS providers and extension methods in <code>ServiceStack.Common</code> use the same <code>ServiceStack.IO</code> namespace that the <a href="https://github.com/ServiceStack/ServiceStack/tree/master/src/ServiceStack.Interfaces/IO" target="_blank" rel="noopener noreferrer">VFS Interfaces are defined in</a> where typically this would be the only change required, including <code>using ServiceStack.IO;</code> if you&#39;re using any VFS extension methods.</p><h2 id="servicestack-azure" tabindex="-1">ServiceStack.Azure <a class="header-anchor" href="#servicestack-azure" aria-hidden="true">#</a></h2><p>We&#39;ve added deeper integration with Azure with <a href="https://github.com/ServiceStack/ServiceStack.Azure" target="_blank" rel="noopener noreferrer">ServiceStack.Azure</a> - a new project containing Azure backed managed implementations for popular ServiceStack providers (as we&#39;ve done with <a href="https://github.com/ServiceStack/ServiceStack.Aws" target="_blank" rel="noopener noreferrer">ServiceStack.Aws</a>):</p><ul><li><code>ServiceBusMqServer</code> - <a href="https://docs.servicestack.net/messaging" target="_blank" rel="noopener noreferrer">MQ Server</a> for invoking ServiceStack Services via Azure ServiceBus</li><li><code>AzureBlobVirtualFiles</code> - <a href="https://docs.servicestack.net/virtual-file-system" target="_blank" rel="noopener noreferrer">Virtual File System</a> provider using Azure Blob Storage</li><li><code>AzureTableCacheClient</code> - <a href="https://docs.servicestack.net/caching" target="_blank" rel="noopener noreferrer">Cache Client</a> provider using Azure Table Storage</li></ul><p>We intend to add support for additional providers in future and make it even easier for ServiceStack Apps to be able to move freely between hosting on an Azure or an AWS managed infrastructure.</p><h3 id="servicebus-mq-server" tabindex="-1">ServiceBus MQ Server <a class="header-anchor" href="#servicebus-mq-server" aria-hidden="true">#</a></h3><p>Configuring to use ServiceBus is the same as other <a href="/messaging.html">MQ Servers</a>, by first registering the ServiceBus <code>IMessageService</code> provider followed by registering all ServiceStack Services you want to be able to invoke via MQ&#39;s:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMessageService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceBusMqServer</span><span class="token punctuation">(</span>ConnectionString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> mqServer <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMessageService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mqServer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyRequest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>ExecuteMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

AfterInitCallbacks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>appHost <span class="token operator">=&gt;</span> mqServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="azure-blob-storage-vfs" tabindex="-1">Azure Blob Storage VFS <a class="header-anchor" href="#azure-blob-storage-vfs" aria-hidden="true">#</a></h3><p>The <code>AzureBlobVirtualFiles</code> VFS provider can be used to serve website content directly from an Azure Blob Storage container:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//Specify to use Azure Blob Container for uploading / writing files</span>
        VirtualFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AzureBlobVirtualFiles</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">,</span> containerName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Register an additional File Source for static files</span>
        AddVirtualFileSources<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>VirtualFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="azure-table-storage-cache-client" tabindex="-1">Azure Table Storage Cache Client <a class="header-anchor" href="#azure-table-storage-cache-client" aria-hidden="true">#</a></h3><p>The <code>AzureTableCacheClient</code> <a href="https://docs.servicestack.net/caching" target="_blank" rel="noopener noreferrer">Caching provider</a> lets you use an Azure Table for your App&#39;s distributed caching:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICacheClient<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AzureTableCacheClient</span><span class="token punctuation">(</span>CacheConnectionString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="servicestack" tabindex="-1">ServiceStack <a class="header-anchor" href="#servicestack" aria-hidden="true">#</a></h2><p>A number of internal improvements were made for making ServiceStack run better than ever on .NET Core:</p><h3 id="internal-improvements" tabindex="-1">Internal improvements <a class="header-anchor" href="#internal-improvements" aria-hidden="true">#</a></h3><p>In preparation for .NET Core&#39;s plans <a href="https://github.com/aspnet/Announcements/issues/252" target="_blank" rel="noopener noreferrer">to disallow sync read / writes to Request and Responses</a> a number of internal handlers were refactored to use async APIs when writing to the Response Stream including static files and all raw <code>byte[]</code>, <code>Stream</code> responses, including <a href="/service-return-types.html#partial-content-support">HTTP Partial Content</a> responses. Custom Results can implement the new <code>IStreamWriterAsync</code> and <code>IPartialWriterAsync</code> interfaces to return results that asynchronously writes to the Response Stream. These interfaces should be used instead of the existing sync <code>IStreamWriter</code> and <code>IPartialWriter</code> interfaces which have been deprecated, although they&#39;re safe to continue using in <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> v4.5 and HttpListener self-hosts as it&#39;s very unlikely they&#39;ll ever have sync writes disabled by default.</p><p><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a>, HttpListener and .NET Core hosts were refactored to use as much of the same code-paths as possible to ensure better consistency and code maintenance.</p><p>The HTTP Request Pipeline was refactored to only use VFS APIs when determining static file requests resulting in more consistent behavior for all VFS sources. It&#39;s also been updated to use minimal I/O requests for better performance when using remote storage VFS sources like AWS S3 or Azure Blob Storage.</p><p>Requests to directories are automatically redirected to enforce a trailing slash, it can be disabled with <code>Config.RedirectDirectoriesToTrailingSlashes=false</code>.</p><h2 id="strict-mode" tabindex="-1">Strict Mode <a class="header-anchor" href="#strict-mode" aria-hidden="true">#</a></h2><p>We&#39;re adding a new Strict Mode to ServiceStack which you can use to make ServiceStack behave stricter and throw Exceptions when it sees certain failure conditions. To enable Strict Mode across all libraries use:</p><div class="language-csharp"><pre><code>Env<span class="token punctuation">.</span>StrictMode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><p>Otherwise to just enable StrictMode for ServiceStack:</p><div class="language-csharp"><pre><code><span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span>
    StrictMode <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>When enabled ServiceStack will perform runtime checks to catch invalid state, currently:</p><ul><li>Checks if Services return Value Types</li><li>Checks if UserSession has circular dependencies</li><li>Fails fast for exceptions on Startup</li></ul><p>It hasn&#39;t been expanded to other libraries yet, but in future we&#39;ll use it to change the default mode of deserializing as much as possible without error, to fail fast when it detects an error condition. Initially it will be used in Text Serializers and OrmLite to detect mapping errors.</p><h3 id="content-type-specific-service-implementations" tabindex="-1">Content-Type Specific Service Implementations <a class="header-anchor" href="#content-type-specific-service-implementations" aria-hidden="true">#</a></h3><p>Service implementations can now use <code>Verb{Format}</code> method names to provide a different implementation for handling a specific Content-Type. The Service below defines several different implementation for handling the same Request:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/my-request&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRequest</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContentTypeServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">MyRequest</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token comment">// Handles all other unspecified Verbs/Formats to /my-request</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">GetJson</span><span class="token punctuation">(</span><span class="token class-name">MyRequest</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token range operator">..</span><span class="token punctuation">;</span> <span class="token comment">// Handles GET /my-request for JSON responses</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">AnyHtml</span><span class="token punctuation">(</span><span class="token class-name">MyRequest</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>     <span class="token comment">// Handles POST/PUT/DELETE/etc /my-request for HTML Responses</span>
<span class="token interpolation-string"><span class="token string">$@&quot;&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;AnyHtml </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;&quot;</span></span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">GetHtml</span><span class="token punctuation">(</span><span class="token class-name">MyRequest</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>     <span class="token comment">// Handles GET /my-request for HTML Responses</span>
<span class="token interpolation-string"><span class="token string">$@&quot;&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;GetHtml </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This convention can be used for any of the formats listed in <code>ContentTypes.KnownFormats</code>, which by default includes:</p><ul><li>json</li><li>xml</li><li>jsv</li><li>csv</li><li>html</li><li>protobuf</li><li>msgpack</li><li>wire</li></ul><h3 id="redirect-paths" tabindex="-1">Redirect Paths <a class="header-anchor" href="#redirect-paths" aria-hidden="true">#</a></h3><p>The <code>RedirectPaths</code> dictionary can be used to maintain a redirect mapping of redirect paths, e.g. we use this to redirect all requests to <code>/metadata/</code> to redirect to <code>/metadata</code>:</p><div class="language-csharp"><pre><code><span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span> 
    RedirectPaths <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;/metadata/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/metadata&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="forbidden-paths" tabindex="-1">Forbidden Paths <a class="header-anchor" href="#forbidden-paths" aria-hidden="true">#</a></h3><p>The <code>ForbiddenPaths</code> can be used to prevent access to different folders in your Web Root, e.g:</p><div class="language-csharp"><pre><code><span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span> 
    ForbiddenPaths <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;/private-folder&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="serviceassemblies" tabindex="-1">ServiceAssemblies <a class="header-anchor" href="#serviceassemblies" aria-hidden="true">#</a></h3><p>The list of Service Implementation Assemblies specified in your AppHost constructor is available from <code>IAppHost.ServiceAssemblies</code> which plugins can use to enable auto-wired features, e.g. you can use <code>ScanAppHostAssemblies</code> in <code>ValidationFeature</code> to automatically register any validators defined in the Service Implementation Assemblies:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationFeature</span> <span class="token punctuation">{</span>
    ScanAppHostAssemblies <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="servicestack-minor-features" tabindex="-1">ServiceStack Minor Features <a class="header-anchor" href="#servicestack-minor-features" aria-hidden="true">#</a></h2><ul><li>New <code>Config.Metadata.GetAllDtos()</code> metadata API to return all DTO Types</li><li><a href="/encrypted-messaging.html">Encrypted Messaging</a> Requests are now marked as Secure in <code>IRequest.RequestAttributes</code></li><li><code>VaryByHeaders</code> option added to <code>[CacheResponse]</code> attribute</li><li>New <code>[ExcludeMetadata]</code> attribute as alias for <code>[Exclude(Feature.Metadata | Feature.Soap)]</code></li><li>Added example for <a href="https://github.com/ServiceStack/ServiceStack/blob/1904ced22f046aef13ec9ce005d0dd7f52d48aa6/tests/ServiceStack.WebHost.Endpoints.Tests/UseCases/JwtAuthProviderTests.cs#L85-L121" target="_blank" rel="noopener noreferrer">manually creating a JWT Token</a></li></ul><h2 id="service-clients" tabindex="-1">Service Clients <a class="header-anchor" href="#service-clients" aria-hidden="true">#</a></h2><p>New <code>*Body</code> and <code>*BodyAsync</code> APIs have been added to all Service Clients which lets you post a separate Request Body for Request DTOs that implement <code>IRequiresRequestStream</code> where they contain both properties and a custom Request Body, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/json&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendJson</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequiresRequestStream</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Stream</span> RequestStream <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/text&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendText</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequiresRequestStream</span><span class="token punctuation">,</span> <span class="token class-name">IReturn<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ContentType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Stream</span> RequestStream <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendRawService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonOnly</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">SendJson</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> request<span class="token punctuation">.</span>RequestStream<span class="token punctuation">.</span><span class="token function">ReadFully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">SendText</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>ResponseContentType <span class="token operator">=</span> request<span class="token punctuation">.</span>ContentType <span class="token operator">??</span> <span class="token keyword">base</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>AcceptTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> request<span class="token punctuation">.</span>RequestStream<span class="token punctuation">.</span><span class="token function">ReadFully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The new APIs accept both a Request DTO which specifies which Service to call and what properties to add to the QueryString and another object to send in the raw HTTP Request Body, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonServiceClient</span><span class="token punctuation">(</span>BaseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">PostBody</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SendJson</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;JSON body&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PocoRequest</span> <span class="token punctuation">{</span> Foo <span class="token operator">=</span> <span class="token string">&quot;Bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
json<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PocoRequest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Foo <span class="token comment">//= Bar</span>

json <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">PutBodyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SendJson</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;JSON body&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;{\\&quot;Foo\\&quot;:\\&quot;Bar\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
json<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PocoRequest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Foo <span class="token comment">//= Bar</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonHttpClient</span><span class="token punctuation">(</span>BaseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SendText</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Text body&quot;</span><span class="token punctuation">,</span> ContentType <span class="token operator">=</span> <span class="token string">&quot;text/plain&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> text <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">PostBodyAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
text <span class="token comment">//= foo</span>
</code></pre></div><ul><li>The new <code>ClientConfig.SkipEmptyArrays</code> option can be used to ignore empty arrays when generating urls</li></ul><h2 id="autoquery-changes" tabindex="-1">AutoQuery Changes <a class="header-anchor" href="#autoquery-changes" aria-hidden="true">#</a></h2><p>Previously all AutoQuery Requests would execute an additional Aggregate query to return the total records available for that query. As this can be unnecessary overhead for requests that don&#39;t need it, we&#39;ve made it opt-in where requests that need the total can add it on the QueryString, e.g:</p><pre><code>/query?Include=Total
</code></pre><p>Or on the Request DTO:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyQuery</span> <span class="token punctuation">{</span> Include <span class="token operator">=</span> <span class="token string">&quot;Total&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can restore the previous behavior and have the Total returned in every request with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span> <span class="token punctuation">{</span>
    IncludeTotal <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>The 2 places where this is need in ServiceStack, the <code>GetLazy</code> Service Client API and the Admin UI have been changed to include the total in each request.</p><ul><li>Empty Collections in AutoQuery are now ignored, the same as <code>null</code> collections.</li></ul><h2 id="native-types" tabindex="-1">Native Types <a class="header-anchor" href="#native-types" aria-hidden="true">#</a></h2><p>User defined interfaces on Request DTOs are now being exported in the generated DTOs. It can be disabled with:</p><div class="language-csharp"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NativeTypesFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MetadataTypesConfig<span class="token punctuation">.</span>ExcludeImplementedInterfaces <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>Support was also added for Arrays of Nullable Types.</li></ul><h3 id="open-api-refinements" tabindex="-1">Open API Refinements <a class="header-anchor" href="#open-api-refinements" aria-hidden="true">#</a></h3><p>You can register <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#tagObject" target="_blank" rel="noopener noreferrer">Open API Tags</a> by adding them to the <code>Tags</code> collection:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiFeature</span>
<span class="token punctuation">{</span>
    Tags <span class="token operator">=</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiTag</span>
        <span class="token punctuation">{</span>
            Name <span class="token operator">=</span> <span class="token string">&quot;TheTag&quot;</span><span class="token punctuation">,</span>
            Description <span class="token operator">=</span> <span class="token string">&quot;TheTag Description&quot;</span><span class="token punctuation">,</span>
            ExternalDocs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiExternalDocumentation</span>
            <span class="token punctuation">{</span>
                Description <span class="token operator">=</span> <span class="token string">&quot;Link to External Docs Desc&quot;</span><span class="token punctuation">,</span>
                Url <span class="token operator">=</span> <span class="token string">&quot;http://example.org/docs/path&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li><code>[ApiMember(IsRequired = true)]</code> is now included in <code>OpenApiSchema</code></li><li><code>[ApiResponse(IsDefaultResponse = true)]</code> can be used to specify the default Service response</li><li>The <code>LogoHref</code> and <code>LogoUrl</code> properties can be used to customize the <code>/swagger-ui</code> logo</li><li>A <code>RequestType</code> was added in <code>OpenApiOperation</code> to make it easy for filters to map Open API classes back to Services</li><li>Added support for <code>IReturnVoid</code> NoContent responses</li></ul><h2 id="request-logging" tabindex="-1">Request Logging <a class="header-anchor" href="#request-logging" aria-hidden="true">#</a></h2><ul><li>Add logging for short-circuited requests terminated in Request Filters</li><li>Allow logging of non-Service Requests, opt-in with <code>LimitToServiceRequests=false</code></li><li>Add <code>SkipLogging</code> delegate to control which requests should be logged</li></ul><h2 id="servicestack-rabbitmq" tabindex="-1">ServiceStack.RabbitMq <a class="header-anchor" href="#servicestack-rabbitmq" aria-hidden="true">#</a></h2><p>You can send MQ Request bodies using a different registered Content-Type which ServiceStack will use to deserialize into the Request DTO.</p><h2 id="litedb-auth-provider" tabindex="-1">LiteDB Auth Provider <a class="header-anchor" href="#litedb-auth-provider" aria-hidden="true">#</a></h2><p><a href="https://github.com/stefandevo" target="_blank" rel="noopener noreferrer">Stefan de Vogelaere</a> from the ServiceStack Community released the <a href="https://github.com/CaveBirdLabs/ServiceStack.Authentication.LiteDB" target="_blank" rel="noopener noreferrer">ServiceStack.Authentication.LiteDB</a> AuthProvider for <a href="https://github.com/mbdavid/LiteDB" target="_blank" rel="noopener noreferrer">LiteDB</a> - A .NET NoSQL Document Store in a single data file.</p><h2 id="servicestack-text" tabindex="-1">ServiceStack.Text <a class="header-anchor" href="#servicestack-text" aria-hidden="true">#</a></h2><p>Several enhancements were added in ServiceStack.Text to improve support for Object Dictionaries and KeyValuePair&#39;s which are extensively used in Templates, including support in CSV, QueryStrings and AutoMapping/Conversion Utils.</p><h3 id="string-segment-extensions" tabindex="-1">String Segment Extensions <a class="header-anchor" href="#string-segment-extensions" aria-hidden="true">#</a></h3><p>We use <code>StringSegment</code> extensively for parsing strings as it avoids creating strings on the heap by returning a sliced view of the original string. It&#39;s a new struct Type available in .NET Core which we include a polyfil of for .NET v4.5 in ServiceStack.Text. We&#39;ve further enhanced it with several StringSegment extension methods to make it easier to work with:</p><ul><li>ToStringSegment()</li><li>IsNullOrEmpty()</li><li>GetChar()</li><li>IndexOf()</li><li>IndexOfAny()</li><li>LastIndexOf()</li><li>LastIndexOfAny()</li><li>Substring()</li><li>Advance()</li><li>Subsegment()</li><li>SafeSubsegment()</li><li>LeftPart()</li><li>LastLeftPart()</li><li>RightPart()</li><li>LastRightPart()</li><li>LastRightPart()</li><li>SplitOnFirst()</li><li>SplitOnLast()</li><li>WithoutExtension()</li><li>GetExtension()</li><li>ParentDirectory()</li><li>TrimEnd()</li><li>EqualsIgnoreCase()</li><li>StartsWith()</li><li>StartsWithIgnoreCase()</li><li>EndsWith()</li><li><code>TryParse*()</code> / <code>Parse*()</code> - Several overloads for parsing different primitive types</li><li>TryReadPart()</li><li>TryReadLine()</li></ul><p>TryReadLine is particularly nice for efficiently reading lines from a large string without generating any string references on the heap:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringSegment</span><span class="token punctuation">(</span>fileContents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">TryReadLine</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name">StringSegment</span> line<span class="token punctuation">,</span> <span class="token keyword">ref</span> pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// line</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="resolve-paths" tabindex="-1">Resolve Paths <a class="header-anchor" href="#resolve-paths" aria-hidden="true">#</a></h3><p>The <code>ResolvePaths()</code> extension method evaluates string paths containing directory commands, e.g:</p><div class="language-csharp"><pre><code><span class="token string">&quot;/a/b/../&quot;</span><span class="token punctuation">.</span><span class="token function">ResolvePaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//= /a/</span>
<span class="token string">&quot;/a/b/..&quot;</span><span class="token punctuation">.</span><span class="token function">ResolvePaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">//= /a</span>
<span class="token string">&quot;a/../b&quot;</span><span class="token punctuation">.</span><span class="token function">ResolvePaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//= b</span>
<span class="token string">&quot;a/../b/./c&quot;</span><span class="token punctuation">.</span><span class="token function">ResolvePaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//= b/c</span>
</code></pre></div><h3 id="dynamicnumber" tabindex="-1">DynamicNumber <a class="header-anchor" href="#dynamicnumber" aria-hidden="true">#</a></h3><p><code>DynamicNumber</code> provides a number of APIs for efficiently handling unknown object numeric Types which can be used to perform arithmetic operations on unknown types:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">object</span></span> objInt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">object</span></span> objDouble <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>

DynamicNumber<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>objInt<span class="token punctuation">,</span> objInt<span class="token punctuation">)</span>      <span class="token comment">//= int 2</span>
DynamicNumber<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>objInt<span class="token punctuation">,</span> objDouble<span class="token punctuation">)</span>   <span class="token comment">//= double 2.1</span>
DynamicNumber<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token string character">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.1&quot;</span><span class="token punctuation">)</span>     <span class="token comment">//= double 2.2</span>
</code></pre></div><p>It automatically upcasts to perform the operation on the appropriate number type. It also automatically parses strings and returns them in the best fitting common numeric type, e.g. int, long, ulong, double or decimal.</p><p>Or if preferred you can have numbers parsed into their best fitting numeric type with:</p><div class="language-csharp"><pre><code>DynamicNumber<span class="token punctuation">.</span><span class="token function">TryParseIntoBestFit</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">object</span></span> result<span class="token punctuation">)</span> <span class="token comment">//= byte 1</span>

JsConfig<span class="token punctuation">.</span>TryParseIntoBestFit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
DynamicNumber<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">object</span></span> result<span class="token punctuation">)</span>            <span class="token comment">//= byte 1</span>
</code></pre></div><p>There&#39;s a <code>Dynamic*</code> class for each of .NET&#39;s primitive number types. They can be used individually to force an operation to use a particular numeric type, e.g:</p><div class="language-csharp"><pre><code>DynamicULong<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>ServiceStack&#39;s <a href="/auto-mapping.html">AutoMapping</a> generic <code>object.ConvertTo&lt;T&gt;</code> extension method was refactored to use this more efficient implementation.</p><h2 id="ormlite" tabindex="-1">OrmLite <a class="header-anchor" href="#ormlite" aria-hidden="true">#</a></h2><h3 id="sql-server-json" tabindex="-1">SQL Server JSON <a class="header-anchor" href="#sql-server-json" aria-hidden="true">#</a></h3><p><a href="https://github.com/KevinHoward" target="_blank" rel="noopener noreferrer">@KevinHoward</a> added preliminary support for SQL Server JSON queries, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> Sql<span class="token punctuation">.</span><span class="token function">JsonValue</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>JsonColumn<span class="token punctuation">,</span> <span class="token string">&quot;$.State&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;NV&quot;</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>See <a href="https://github.com/ServiceStack/ServiceStack.OrmLite/blob/master/src/ServiceStack.OrmLite.SqlServerTests/Expressions/JsonExpressionsTest.cs" target="_blank" rel="noopener noreferrer">JsonExpressionsTest.cs</a> for more examples.</p><blockquote><p>Requires <code>SqlServer2016Dialect.Provider</code></p></blockquote><h3 id="normalizing-postgresql" tabindex="-1">Normalizing PostgreSQL <a class="header-anchor" href="#normalizing-postgresql" aria-hidden="true">#</a></h3><p>By default PostgreSQL&#39;s dialect provider uses quoted <strong>snake_case</strong> for all Table and Column names. It can be configured to generate similar SQL as other RDBMS&#39;s with:</p><div class="language-csharp"><pre><code>PostgreSqlDialectProvider<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>Normalize <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
</code></pre></div><p>Where it will use the default Naming strategy and only quote tables and columns using reserved words. OrmLite&#39;s mapping is case-insensitive so will still be able to map columns as a result of PostgreSQL&#39;s lowercase names for unquoted symbols.</p><h3 id="ignore-properties" tabindex="-1">Ignore properties <a class="header-anchor" href="#ignore-properties" aria-hidden="true">#</a></h3><p>The new <code>[IgnoreOnInsert]</code> and <code>[IgnoreOnUpdate]</code> attributes can be used to ignore properties from INSERT&#39;s and UPDATE&#39;s.</p><ul><li>Added <code>[Computed]</code> attribute as a better named alias for <code>[Compute]</code></li><li>Added support for using string params larger than default string length</li><li>The new <code>SqlConcat</code>, <code>SqlCurrency</code>, <code>SqlBool</code> and <code>SqlLimit</code> APIs can help creating cross-platform SQL, see <a href="https://github.com/ServiceStack/ServiceStack.OrmLite/blob/master/tests/ServiceStack.OrmLite.Tests/SqlDialectTests.cs" target="_blank" rel="noopener noreferrer">SqlDialectTests.cs</a> for examples.</li></ul><h1 id="v4-5-10-release-notes" tabindex="-1"><a href="/releases/v4.5.10.html">v4.5.10 Release Notes</a> <a class="header-anchor" href="#v4-5-10-release-notes" aria-hidden="true">#</a></h1>`,206),b=[r,c,i,l,u,d,k,h,g,m,f];function v(w,y,S,A,q,T){return o(),t("div",null,b)}var C=s(p,[["render",v]]);export{x as __pageData,C as default};
