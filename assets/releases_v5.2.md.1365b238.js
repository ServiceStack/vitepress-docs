import{_ as e,c as t,o,a as s,b as n,e as a}from"./app.14440598.js";const ea='{"title":"v5.2 Release Notes","description":"","frontmatter":{"title":"v5.2 Release Notes","slug":"v5-2"},"headers":[{"level":2,"title":"Spanified ServiceStack","slug":"spanified-servicestack"},{"level":3,"title":"StringSegment extensions replaced with Span","slug":"stringsegment-extensions-replaced-with-span"},{"level":3,"title":"New Span APIs","slug":"new-span-apis"},{"level":3,"title":"Performance Improvements","slug":"performance-improvements"},{"level":3,"title":".NET Core Memory Provider Abstraction","slug":"net-core-memory-provider-abstraction"},{"level":3,"title":"MemoryStream Pooling","slug":"memorystream-pooling"},{"level":3,"title":"Support for UWP .NET Native","slug":"support-for-uwp-net-native"},{"level":2,"title":"Support for .NET Core 2.1","slug":"support-for-net-core-2-1"},{"level":2,"title":".NET Core Templates","slug":"net-core-templates"},{"level":3,"title":"vue-spa","slug":"vue-spa"},{"level":3,"title":"react-spa","slug":"react-spa"},{"level":3,"title":"angular-spa","slug":"angular-spa"},{"level":3,"title":"aurelia-spa","slug":"aurelia-spa"},{"level":3,"title":"vuetify-spa","slug":"vuetify-spa"},{"level":3,"title":"vue-nuxt","slug":"vue-nuxt"},{"level":3,"title":"vuetify-nuxt","slug":"vuetify-nuxt"},{"level":3,"title":"SPA Project Templates Dev Workflow","slug":"spa-project-templates-dev-workflow"},{"level":3,"title":"New Parcel SPA Template","slug":"new-parcel-spa-template"},{"level":2,"title":"#Script Remastered","slug":"script-remastered"},{"level":3,"title":"JavaScript Expressions","slug":"javascript-expressions"},{"level":2,"title":"Template Blocks","slug":"template-blocks"},{"level":3,"title":"noop","slug":"noop"},{"level":3,"title":"Registering Blocks","slug":"registering-blocks"},{"level":3,"title":"bold","slug":"bold"},{"level":3,"title":"with","slug":"with"},{"level":3,"title":"if","slug":"if"},{"level":3,"title":"each","slug":"each"},{"level":3,"title":"raw","slug":"raw"},{"level":3,"title":"capture","slug":"capture"},{"level":3,"title":"markdown","slug":"markdown"},{"level":3,"title":"partial","slug":"partial"},{"level":3,"title":"html","slug":"html"},{"level":3,"title":"Removing Blocks","slug":"removing-blocks"},{"level":2,"title":"Page Based Routing","slug":"page-based-routing"},{"level":3,"title":"Dynamic Page Routes","slug":"dynamic-page-routes"},{"level":3,"title":"Layout and partial recommended naming conventions","slug":"layout-and-partial-recommended-naming-conventions"},{"level":2,"title":"Init Pages","slug":"init-pages"},{"level":2,"title":"Buffered View Pages","slug":"buffered-view-pages"},{"level":2,"title":"Dynamic Sharp APIs","slug":"dynamic-sharp-apis"},{"level":3,"title":"/hello API Page","slug":"hello-api-page"},{"level":3,"title":"/preview API Page","slug":"preview-api-page"},{"level":3,"title":"/_user/api Page","slug":"user-api-page"},{"level":3,"title":"/posts/_slug/api Page","slug":"posts-slug-api-page"},{"level":3,"title":"Order Report Example","slug":"order-report-example"},{"level":3,"title":"SQL Studio Example","slug":"sql-studio-example"},{"level":3,"title":"Live Development Workflow","slug":"live-development-workflow"},{"level":2,"title":"New in Sharp Apps","slug":"new-in-sharp-apps"},{"level":3,"title":"Customizable Auth Providers","slug":"customizable-auth-providers"},{"level":3,"title":"Customizable Markdown Providers","slug":"customizable-markdown-providers"},{"level":3,"title":"Rich Template Config Arguments","slug":"rich-template-config-arguments"},{"level":3,"title":"New Parcel Web App Template","slug":"new-parcel-web-app-template"},{"level":2,"title":"New Blog Web App","slug":"new-blog-web-app"},{"level":3,"title":"Ultimate Simplicity","slug":"ultimate-simplicity"},{"level":3,"title":"Minimal","slug":"minimal"},{"level":3,"title":"Multi User Blogging Platform","slug":"multi-user-blogging-platform"},{"level":3,"title":"Rich Content","slug":"rich-content"},{"level":3,"title":"Rich Markdown Editor","slug":"rich-markdown-editor"},{"level":3,"title":"Auto saved drafts","slug":"auto-saved-drafts"},{"level":3,"title":"Server Validation","slug":"server-validation"},{"level":3,"title":"Live Previews","slug":"live-previews"},{"level":2,"title":"Templates Admin Service","slug":"templates-admin-service"},{"level":3,"title":"Zero downtime deployments","slug":"zero-downtime-deployments"},{"level":2,"title":"New Template Filters","slug":"new-template-filters"},{"level":3,"title":"Global Filters","slug":"global-filters"},{"level":3,"title":"HTML Scriptss","slug":"html-scriptss"},{"level":3,"title":"Hot reloading","slug":"hot-reloading"},{"level":3,"title":"Info filters","slug":"info-filters"},{"level":3,"title":"DB Scriptss","slug":"db-scriptss"},{"level":3,"title":"Date/Time Filters","slug":"date-time-filters"},{"level":3,"title":"Misc","slug":"misc"},{"level":2,"title":"OrmLite","slug":"ormlite"},{"level":3,"title":"Support for Npgsql 4.0","slug":"support-for-npgsql-4-0"},{"level":3,"title":"Support for MySql.Data 8.0.12","slug":"support-for-mysql-data-8-0-12"},{"level":3,"title":"Bitwise operators","slug":"bitwise-operators-1"},{"level":3,"title":"Extended Select SqlExpression APIs","slug":"extended-select-sqlexpression-apis"},{"level":3,"title":"OrmLite variables in CustomField","slug":"ormlite-variables-in-customfield"},{"level":3,"title":"Update from Object Dictionary","slug":"update-from-object-dictionary"},{"level":3,"title":"Custom Index Name","slug":"custom-index-name"},{"level":3,"title":"Array parameters in ExecuteSql","slug":"array-parameters-in-executesql"},{"level":2,"title":"Redis","slug":"redis"},{"level":3,"title":"Debugging Data Corruption Issues","slug":"debugging-data-corruption-issues"},{"level":2,"title":"Add ServiceStack Reference","slug":"add-servicestack-reference"},{"level":3,"title":"Swift","slug":"swift"},{"level":3,"title":"Dart","slug":"dart"},{"level":3,"title":"TypeScript","slug":"typescript"},{"level":3,"title":"Customize DTO Type generation","slug":"customize-dto-type-generation"},{"level":3,"title":"Interfaces Exported on DTOs","slug":"interfaces-exported-on-dtos"},{"level":2,"title":"ServiceStack.Azure","slug":"servicestack-azure"},{"level":2,"title":"ServiceStack","slug":"servicestack"},{"level":3,"title":"Async overloads in Service Clients","slug":"async-overloads-in-service-clients"},{"level":3,"title":"BearerToken in Request DTOs","slug":"bearertoken-in-request-dtos"},{"level":3,"title":"New FallbackHandlers filters","slug":"new-fallbackhandlers-filters"},{"level":3,"title":"Multitenancy","slug":"multitenancy"},{"level":3,"title":"Authentication","slug":"authentication"},{"level":3,"title":"Serilog","slug":"serilog"},{"level":2,"title":"ServiceStack.Text","slug":"servicestack-text"}],"relativePath":"releases/v5.2.md","lastUpdated":1634495308442}',p={},c=s(`<p>This release includes support for .NET Core 2.1, number of performance improvements with internals rewritten to use .NET&#39;s new <code>Span&lt;T&gt;</code> Memory Types, all SPA Templates upgraded to utilize latest CLI projects, new simpler zero-configuration Parcel SPA Templates, exciting enhanced capabilities added to <code>#Script</code> - providing a fun and productive alternative to Razor, more capable and versatile Web Apps, a minimal multi-user .NET Core Blog Web App developed in a real-time live development workflow, enhancements to Swift, Dart, TypeScript end-to-end Typed integrations, support for the latest 3rd Party dependencies, and lots more.</p><h1 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h1><p><strong><a href="#spanified-servicestack">Spanified ServiceStack</a></strong></p><ul><li><a href="#performance-improvements">Performance Improvements</a></li><li><a href="#net-core-memory-provider-abstraction">.NET Core Memory Provider Abstraction</a></li><li><a href="#memorystream-pooling">MemoryStream Pooling</a></li><li><a href="#support-for-net-core-21">Support for .NET Core 2.1</a></li></ul><p><strong><a href="#net-core-templates">.NET Core Templates</a></strong></p><ul><li><a href="#vue-spa">vue-spa</a></li><li><a href="#react-spa">react-spa</a></li><li><a href="#angular-spa">angular-spa</a></li><li><a href="#aurelia-spa">aurelia-spa</a></li><li><a href="#vuetify-spa">vuetify-spa</a></li><li><a href="#vue-nuxt">vue-nuxt</a></li><li><a href="#vuetify-nuxt">vuetify-nuxt</a></li><li><a href="#spa-project-templates-dev-workflow">SPA Project Templates Dev Workflow</a></li><li><a href="#new-parcel-spa-template">New Parcel SPA Template</a></li></ul><p><strong><a href="#script-remastered">#Script Remastered</a></strong></p><ul><li><a href="#javascript-expressions">JavaScript Expressions</a></li><li><a href="#template-blocks">Template Blocks</a></li><li><a href="#page-based-routing">Page Based Routing</a></li><li><a href="#dynamic-page-routes">Dynamic Page Routes</a></li><li><a href="#init-pages">Init Pages</a></li><li><a href="#buffering-view-pages">Buffered View Pages</a></li><li><a href="#dynamic-api-pages">Dynamic Sharp APIs</a></li><li><a href="#order-report-example">Order Report Example</a></li><li><a href="#sql-studio-example">SQL Studio Example</a></li></ul><p><strong><a href="#new-in-web-apps">New in Web Apps</a></strong></p><ul><li><a href="#customizable-auth-providers">Customizable Auth Providers</a></li><li><a href="#customizable-markdown-providers">Customizable Markdown Providers</a></li><li><a href="#rich-template-config-arguments">Rich Template Config Arguments</a></li><li><a href="#new-parcel-web-app-template">New Parcel Web App Template</a></li></ul><p><strong><a href="#new-blog-web-app">New Blog Web App</a></strong></p><p><strong><a href="#templates-admin-service">Templates Admin Service</a></strong></p><ul><li><a href="#zero-downtime-deployments">Zero downtime deployments</a></li></ul><p><strong><a href="#new-template-filters">New Template Filters</a></strong></p><p><strong><a href="#ormlite">OrmLite</a></strong></p><ul><li><a href="#support-for-npgsql-40">Support for Npgsql 4.0</a></li><li><a href="#support-for-mysqldata-8012">Support for MySql.Data 8.0.12</a></li><li><a href="#bitwise-operators">Bitwise operators</a></li><li><a href="#extended-select-sqlexpression-apis">Extended Select SqlExpression APIs</a></li><li><a href="#ormlite-variables-in-customfield">OrmLite variables in CustomField</a></li><li><a href="#update-from-object-dictionary">Update from Object Dictionary</a></li><li><a href="#custom-index-name">Custom Index Name</a></li><li><a href="#array-parameters-in-executesql">Array parameters in ExecuteSql</a></li></ul><p><strong><a href="#redis">Redis</a></strong></p><ul><li><a href="#debugging-data-corruption-issues">Debugging Data Corruption Issues</a></li></ul><p><strong><a href="#add-servicestack-reference">Add ServiceStack Reference</a></strong></p><ul><li><a href="#swift">Swift</a></li><li><a href="#dart">Dart</a></li><li><a href="#typescript">TypeScript</a></li><li><a href="#customize-dto-type-generation">Customize DTO Type generation</a></li><li><a href="#interfaces-exported-on-all-dtos">Interfaces Exported on all DTOs</a></li></ul><p><strong><a href="#servicestackazure">ServiceStack.Azure</a></strong></p><p><strong><a href="#servicestack">ServiceStack</a></strong></p><ul><li><a href="#async-overloads-in-service-clients">Async overloads in Service Clients</a></li><li><a href="#bearertoken-in-request-dtos">BearerToken in Request DTOs</a></li><li><a href="#new-fallbackhandlers-filters">New FallbackHandlers filters</a></li><li><a href="#multitenancy">Multitenancy</a></li><li><a href="#authentication">Authentication</a></li><li><a href="#serilog">Serilog</a></li></ul><h2 id="spanified-servicestack" tabindex="-1">Spanified ServiceStack <a class="header-anchor" href="#spanified-servicestack" aria-hidden="true">#</a></h2><p>Major rework was performed across the ServiceStack.Text and ServiceStack.Common foundational libraries to replace its internal usage of <code>StringSegment</code> with .NET&#39;s new high-performance <a href="https://www.codemag.com/article/1807051/Introducing-.NET-Core-2.1-Flagship-Types-Span-T-and-Memory-T" target="_blank" rel="noopener noreferrer">Span and Memory Types</a> primitives which are now used for all JSON/JSV deserialization and many other String utilities.</p><p>The new <code>Span&lt;T&gt;</code> and <code>ReadOnlyMemory&lt;char&gt;</code> Types is the successor to <code>StringSegment</code> which are both allocation-free, but Span also enjoys additional runtime support as a JIT intrinsic for improved performance.</p><p>This change was primarily an internal refactor so there shouldn&#39;t be any user visible differences except for the addition of the <a href="https://www.nuget.org/packages/System.Memory" target="_blank" rel="noopener noreferrer">System.Memory</a> dependency which contains the new Memory types. As a general rule we&#39;re averse to adopting new dependencies but the added performance of these new primitives makes it a required dependency for maintaining high-performance libraries.</p><h3 id="stringsegment-extensions-replaced-with-span" tabindex="-1">StringSegment extensions replaced with Span <a class="header-anchor" href="#stringsegment-extensions-replaced-with-span" aria-hidden="true">#</a></h3><p>The additional dependency replaces <a href="https://www.nuget.org/packages/Microsoft.Extensions.Primitives" target="_blank" rel="noopener noreferrer">Microsoft.Extensions.Primitives</a> containing the <code>StringSegment</code> Type. This removal would be a breaking change if you were utilizing our <code>StringSegment</code> extension methods, but is easily resolvable as all existing extension methods are <a href="https://github.com/ServiceStack/ServiceStack.Text/blob/master/src/ServiceStack.Text/StringSpanExtensions.cs" target="_blank" rel="noopener noreferrer">available on <code>ReadOnlySpan&lt;char&gt;</code></a> which are accessible using <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.primitives.stringsegment.asspan?view=aspnetcore-2.1" target="_blank" rel="noopener noreferrer">AsSpan()</a> to return it as a <code>ReadOnlySpan&lt;char&gt;</code>, e.g:</p><pre><code>var name = filename.AsSpan().LeftPart(&#39;.&#39;);
</code></pre><p>Although as it&#39;s the preferred Type for allocation-free string utils in .NET we recommend updating your code to use the newer <code>ReadOnlySpan&lt;char&gt;</code> and <code>ReadOnlyMemory&lt;char&gt;</code> Types also. But if needed, the existing <a href="https://gist.github.com/mythz/9825689f0db7464d1d541cb62954614c" target="_blank" rel="noopener noreferrer">StringSegment polyfill and extension methods</a> can be dropped into your project to retain source code compatibility.</p><h3 id="new-span-apis" tabindex="-1">New Span APIs <a class="header-anchor" href="#new-span-apis" aria-hidden="true">#</a></h3><p>Additional public APIs are available to deserialize directly from a <code>ReadOnlySpan&lt;char&gt;</code> source:</p><div class="language-csharp"><pre><code><span class="token comment">//JSON</span>
JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeFromSpan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span>
JsonSerializer<span class="token punctuation">.</span><span class="token function">DeserializeFromSpan</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span>

<span class="token comment">//JSV</span>
TypeSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeFromSpan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> jsv<span class="token punctuation">)</span>
TypeSerializer<span class="token punctuation">.</span><span class="token function">DeserializeFromSpan</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> jsv<span class="token punctuation">)</span>

<span class="token comment">//Extension methods</span>
<span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">FromJsonSpan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span>
<span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">FromJsvSpan</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">ReadOnlySpan<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> jsv<span class="token punctuation">)</span>
</code></pre></div><p>One place where the conversion resulted in a user-visible change is in <a href="/autoquery-rdbms.html#autoquery-response-filters">AutoQuery Response Filters</a> where the parsed <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Command.cs" target="_blank" rel="noopener noreferrer">Commands</a> now have <code>ReadOnlyMemory&lt;char&gt;</code> properties instead of <code>StringSegment</code>.</p><h3 id="performance-improvements" tabindex="-1">Performance Improvements <a class="header-anchor" href="#performance-improvements" aria-hidden="true">#</a></h3><p>To provide some insight on the performance that can be expected we&#39;ve taken the most recently published <a href="https://github.com/Alois-xx/SerializerTests" target="_blank" rel="noopener noreferrer">.NET Serializer benchmarks</a> created by <a href="https://aloiskraus.wordpress.com" target="_blank" rel="noopener noreferrer">Alois Kraus</a> and upgraded the ServiceStack dependency to use the latest version.</p><p>These are results of <code>BookShelf</code> JSON Serialization performance for <strong>ServiceStack.Text vs <a href="http://JSON.NET" target="_blank" rel="noopener noreferrer">JSON.NET</a></strong> (run on an iMac 5k):</p><h4 id="net-core-benchmarks" tabindex="-1">.NET Core Benchmarks <a class="header-anchor" href="#net-core-benchmarks" aria-hidden="true">#</a></h4><table class="table table-striped"><thead><tr><th>Serializer</th><th>Objects</th><th>&quot;Time to serialize in s&quot;</th><th>&quot;Time to deserialize in s&quot;</th><th>&quot;Size in bytes&quot;</th><th>FileVersion</th></tr></thead><tbody><tr><td>ServiceStack</td><td>1</td><td>0.000</td><td>0.000</td><td>69</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>1</td><td>0.000</td><td>0.000</td><td>69</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>10</td><td>0.000</td><td>0.000</td><td>305</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>100</td><td>0.000</td><td>0.000</td><td>2827</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>500</td><td>0.000</td><td>0.000</td><td>14827</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>1000</td><td>0.000</td><td>0.001</td><td>29829</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>10000</td><td>0.004</td><td>0.006</td><td>317831</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>50000</td><td>0.018</td><td>0.031</td><td>1677831</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>100000</td><td>0.036</td><td>0.068</td><td>3377833</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>200000</td><td>0.073</td><td>0.146</td><td>6977833</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>500000</td><td>0.181</td><td>0.374</td><td>17777833</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>800000</td><td>0.290</td><td>0.606</td><td>28577833</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>1000000</td><td>0.363</td><td>0.756</td><td>35777835</td><td>5.0.0.0</td></tr><tr><td>JsonNet</td><td>1</td><td>0.000</td><td>0.000</td><td>69</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>1</td><td>0.000</td><td>0.000</td><td>69</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>10</td><td>0.000</td><td>0.000</td><td>305</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>100</td><td>0.000</td><td>0.000</td><td>2827</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>500</td><td>0.000</td><td>0.000</td><td>14827</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>1000</td><td>0.001</td><td>0.001</td><td>29829</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>10000</td><td>0.005</td><td>0.006</td><td>317831</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>50000</td><td>0.025</td><td>0.035</td><td>1677831</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>100000</td><td>0.051</td><td>0.073</td><td>3377833</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>200000</td><td>0.105</td><td>0.153</td><td>6977833</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>500000</td><td>0.253</td><td>0.404</td><td>17777833</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>800000</td><td>0.400</td><td>0.726</td><td>28577833</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>1000000</td><td>0.520</td><td>0.920</td><td>35777835</td><td>11.0.2.21924</td></tr></tbody></table><p>Which shows ServiceStack.Text being about <strong>~30% faster</strong> for serialization and <strong>17.8% for deserialization</strong> for 1M objects.</p><h4 id="net-v4-7-1-benchmarks" tabindex="-1">.NET v4.7.1 Benchmarks <a class="header-anchor" href="#net-v4-7-1-benchmarks" aria-hidden="true">#</a></h4><table class="table table-striped"><thead><tr><th>Serializer</th><th>Objects</th><th>&quot;Time to serialize in s&quot;</th><th>&quot;Time to deserialize in s&quot;</th><th>&quot;Size in bytes&quot;</th><th>FileVersion</th></tr></thead><tbody><tr><td>ServiceStack</td><td>1</td><td>0.000</td><td>0.000</td><td>69</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>1</td><td>0.000</td><td>0.000</td><td>69</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>10</td><td>0.000</td><td>0.000</td><td>305</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>100</td><td>0.000</td><td>0.000</td><td>2827</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>500</td><td>0.000</td><td>0.000</td><td>14827</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>1000</td><td>0.000</td><td>0.001</td><td>29829</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>10000</td><td>0.004</td><td>0.007</td><td>317831</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>50000</td><td>0.021</td><td>0.035</td><td>1677831</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>100000</td><td>0.043</td><td>0.072</td><td>3377833</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>200000</td><td>0.087</td><td>0.161</td><td>6977833</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>500000</td><td>0.208</td><td>0.413</td><td>17777833</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>800000</td><td>0.340</td><td>0.669</td><td>28577833</td><td>5.0.0.0</td></tr><tr><td>ServiceStack</td><td>1000000</td><td>0.417</td><td>0.836</td><td>35777835</td><td>5.0.0.0</td></tr><tr><td>JsonNet</td><td>1</td><td>0.000</td><td>0.000</td><td>69</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>1</td><td>0.000</td><td>0.000</td><td>69</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>10</td><td>0.000</td><td>0.000</td><td>305</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>100</td><td>0.000</td><td>0.000</td><td>2827</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>500</td><td>0.000</td><td>0.000</td><td>14827</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>1000</td><td>0.001</td><td>0.001</td><td>29829</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>10000</td><td>0.005</td><td>0.007</td><td>317831</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>50000</td><td>0.025</td><td>0.038</td><td>1677831</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>100000</td><td>0.050</td><td>0.078</td><td>3377833</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>200000</td><td>0.100</td><td>0.170</td><td>6977833</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>500000</td><td>0.250</td><td>0.439</td><td>17777833</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>800000</td><td>0.402</td><td>0.777</td><td>28577833</td><td>11.0.2.21924</td></tr><tr><td>JsonNet</td><td>1000000</td><td>0.503</td><td>0.992</td><td>35777835</td><td>11.0.2.21924</td></tr></tbody></table><p>Under ServiceStack.Text is about <strong>~17% faster for serialization</strong> and <strong>~15.7% faster for deserialization</strong> for 1M objects.</p><p>The benchmarks also show .NET Core (v2.0.7) is <strong>~12.9% faster</strong> for serialization and <strong>~9.5% faster</strong> for deserialization than .NET Framework (v4.7.3110.0).</p><h3 id="net-core-memory-provider-abstraction" tabindex="-1">.NET Core Memory Provider Abstraction <a class="header-anchor" href="#net-core-memory-provider-abstraction" aria-hidden="true">#</a></h3><p>Whilst the <code>Span&lt;T&gt;</code> Type itself is available for .NET Standard libraries, the base-class libraries which accept <code>Span&lt;T&gt;</code> types directly are not which makes them unavailable to .NET Standard 2.0 or .NET Framework builds. To be able to make use of the allocation-free alternatives in .NET Core 2.1, a <a href="https://github.com/ServiceStack/ServiceStack.Text/blob/master/src/ServiceStack.Text/MemoryProvider.cs" target="_blank" rel="noopener noreferrer">MemoryProvider</a> abstraction was added to allow using the most efficient APIs available on each platform. This also requires creating <strong>.NET Core 2.1</strong> platform specific builds of ServiceStack.Text which contains bindings to the native APIs which will continued to be published going forward.</p><p>Although our Micro benchmarks are still showing many of the new <code>Span&lt;T&gt;</code> overloads in the base class library like <code>int.Parse(ReadOnlySpan&lt;char&gt;)</code> are <a href="https://github.com/ServiceStack/ServiceStack.Text/blob/master/tests/ServiceStack.Text.Benchmarks/MemoryProviderBenchmarks.cs" target="_blank" rel="noopener noreferrer">still not as performant</a> as our own non-allocating implementations which continued to be used until more performant APIs are available.</p><p>But other APIs like like writing to <strong>Streams</strong> or <strong>UTF-8</strong> conversions are now using .NET Core&#39;s native implementations.</p><h3 id="memorystream-pooling" tabindex="-1">MemoryStream Pooling <a class="header-anchor" href="#memorystream-pooling" aria-hidden="true">#</a></h3><p>Bing&#39;s <a href="http://www.philosophicalgeek.com/2015/02/06/announcing-microsoft-io-recycablememorystream/" target="_blank" rel="noopener noreferrer">RecyclableMemoryStream</a> for pooling Memory Streams that was previously only enabled in .NET Core is now enabled by default in .NET Framework.</p><p>This is utilized everywhere a <code>MemoryStream</code> is needed in ServiceStack except for a few identified places where they&#39;re found to be incompatible like in .NET&#39;s Compression APIs.</p><p>We haven&#39;t been notified of any, but if this change results in any issues, <code>MemoryStream</code> pooling can be disabled with:</p><div class="language-csharp"><pre><code><span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span> EnableOptimizations <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>If this does resolve any issues, <a href="https://github.com/ServiceStack/Issues/issues/new" target="_blank" rel="noopener noreferrer">please let us know</a> so we can resolve them permanently without disabling any other optimizations.</p><h3 id="support-for-uwp-net-native" tabindex="-1">Support for UWP .NET Native <a class="header-anchor" href="#support-for-uwp-net-native" aria-hidden="true">#</a></h3><p>AOT Environments like UWP&#39;s .NET Native will fail at both build and runtime if <strong>Reflection.Emit</strong> symbols are referenced, even if they&#39;re not used. As we&#39;ve started publishing .NET Core builds of ServiceStack.Text, we&#39;ve decided to remove dependencies of <strong>Reflection.Emit</strong> from <strong>.NET Standard 2.0</strong> builds so they remain as portable as possible in <strong>.NET Standard 2.0</strong> supported platforms like UWP/iOS/Android which now fallback to use Compiled Expressions.</p><p>To retain maximum performance Reflection.Emit is still enabled in .NET Core and .NET Framework builds.</p><h4 id="xamarin-ios-requires-vs-net-15-8" tabindex="-1">Xamarin.iOS requires <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> 15.8 <a class="header-anchor" href="#xamarin-ios-requires-vs-net-15-8" aria-hidden="true">#</a></h4><p>In order to be able to use the latest ServiceStack Service Clients in Xamarin platforms you&#39;ll need to upgrade to the latest Visual Studio 15.8 which <a href="https://github.com/aspnet/SignalR/issues/1886" target="_blank" rel="noopener noreferrer">resolves issues from using System.Memory in Xamarin</a>.</p><p>The <a href="https://github.com/ServiceStackApps/HelloMobile" target="_blank" rel="noopener noreferrer">HelloMobile</a> project has also upgraded its UWP, iOS, Android and Xamarin.Forms projects to use <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> 15.8 project templates.</p><h2 id="support-for-net-core-2-1" tabindex="-1">Support for .NET Core 2.1 <a class="header-anchor" href="#support-for-net-core-2-1" aria-hidden="true">#</a></h2><p>In following <a href="https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/" target="_blank" rel="noopener noreferrer">Microsoft&#39;s LTS policy for .NET Core</a> we&#39;re also moving to support .NET Core 2.1 for running ServiceStack. Most packages publish <strong>.NET Standard 2.0</strong> builds so they remain unaffected except for <strong>ServiceStack.Kestrel</strong> which has been upgraded to reference .NET Core 2.1 packages.</p><p>In addition all our Test projects, <a href="https://github.com/NetCoreTemplates" target="_blank" rel="noopener noreferrer">.NET Core Templates</a>, <a href="https://sharpscript.net/docs/sharp-apps#example-web-apps" target="_blank" rel="noopener noreferrer">.NET Core Web Apps</a>, etc have all been upgraded to .NET Core 2.1.</p><p>As .NET Core 2.1 is the first LTS release of .NET Core 2 and soon to be the only supported version, we&#39;re also recommending everyone to upgrade when possible.</p><h2 id="net-core-templates" tabindex="-1">.NET Core Templates <a class="header-anchor" href="#net-core-templates" aria-hidden="true">#</a></h2><p>Previously all <a href="/templates-single-page-apps.html">ServiceStack&#39;s Webpack SPA Templates</a> used a similar Webpack v3 configuration and npm-based solution for enabling its client development workflow and packaging. Unfortunately Webpack 4 was a major breaking change which is incompatible with the existing configuration with not all Webpack modules available for v4 yet. This means all projects created using existing Webpack v3 Templates would need to either manually upgrade to use Webpack 4 or stay on Webpack v3 indefinitely.</p><p>In the meantime all major JavaScript frameworks have developed their own <strong>CLI tools</strong> to simplify development by taking over the configuration and development workflow of projects using their frameworks. One of the ways they simplify development is by hiding Webpack configuration as an internal implementation detail whilst ensuring new projects start with same well-known compatible configuration defaults that has been battle tested across a larger user base. By insulating Webpack we&#39;re also expecting upgrades to be a lot smoother as in theory only the JS Framework packages and tools would need to be upgraded to support newer major Webpack versions, instead of every project using Webpack directly.</p><p>Given the simpler development workflow and smoother future upgrades possible with CLI tools, we&#39;ve replaced all our SPA Templates to use the latest templates generated by the CLI tools for each respective framework.</p><p>All templates can be installed using our <a href="/dotnet-new.html">dotnet-new</a> tool, which if not already can be installed with:</p><pre><code>$ npm install -g @servicestack/cli
</code></pre><p>Available SPA Project Templates now bootstrapped with latest CLI tools and project templates include:</p><h3 id="vue-spa" tabindex="-1"><a href="https://github.com/NetCoreTemplates/vue-spa" target="_blank" rel="noopener noreferrer">vue-spa</a> <a class="header-anchor" href="#vue-spa" aria-hidden="true">#</a></h3><p>Bootstrapped with <a href="https://cli.vuejs.org/" target="_blank" rel="noopener noreferrer">Vue CLI 3</a>.</p><p><a href="https://github.com/NetCoreTemplates/vue-spa" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/vue-spa.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://vue-spa.web-templates.io" target="_blank" rel="noopener noreferrer">vue-spa.web-templates.io</a></p></blockquote><p>Create new Vue 2.5 Project for .NET Core 2.1:</p><pre><code>$ dotnet-new vue-spa ProjectName
</code></pre><p>Create new Vue 2.5 Project for .NET Framework:</p><pre><code>$ dotnet-new vue-spa-netfx ProjectName
</code></pre><h3 id="react-spa" tabindex="-1"><a href="https://github.com/NetCoreTemplates/react-spa" target="_blank" rel="noopener noreferrer">react-spa</a> <a class="header-anchor" href="#react-spa" aria-hidden="true">#</a></h3><p>Bootstrapped with <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener noreferrer">create-react-app</a>.</p><p><a href="https://github.com/NetCoreTemplates/react-spa" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/react-spa.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://react-spa.web-templates.io" target="_blank" rel="noopener noreferrer">react-spa.web-templates.io</a></p></blockquote><p>Create new React 16 Project for .NET Core 2.1:</p><pre><code>$ dotnet-new react-spa ProjectName
</code></pre><p>Create new React 16 Project for .NET Framework:</p><pre><code>$ dotnet-new react-spa-netfx ProjectName
</code></pre><h3 id="angular-spa" tabindex="-1"><a href="https://github.com/NetCoreTemplates/angular-spa" target="_blank" rel="noopener noreferrer">angular-spa</a> <a class="header-anchor" href="#angular-spa" aria-hidden="true">#</a></h3><p>Bootstrapped with <a href="https://cli.angular.io" target="_blank" rel="noopener noreferrer">Angular CLI</a>.</p><p><a href="https://github.com/NetCoreTemplates/angular-spa" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/angular-spa.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://angular-spa.web-templates.io" target="_blank" rel="noopener noreferrer">angular-spa.web-templates.io</a></p></blockquote><p>Create new Angular 7 Project for .NET Core 2.1:</p><pre><code>$ dotnet-new angular-spa ProjectName
</code></pre><p>Create new Angular 7 Project for .NET Framework:</p><pre><code>$ dotnet-new angular-spa-netfx ProjectName
</code></pre><h3 id="aurelia-spa" tabindex="-1"><a href="https://github.com/NetCoreTemplates/aurelia-spa" target="_blank" rel="noopener noreferrer">aurelia-spa</a> <a class="header-anchor" href="#aurelia-spa" aria-hidden="true">#</a></h3><p>Bootstrapped with <a href="https://aurelia.io/docs/build-systems/aurelia-cli/" target="_blank" rel="noopener noreferrer">Aurelia CLI</a>.</p><p><a href="https://github.com/NetCoreTemplates/aurelia-spa" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/aurelia-spa.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://aurelia-spa.web-templates.io" target="_blank" rel="noopener noreferrer">aurelia-spa.web-templates.io</a></p></blockquote><p>Create new Aurelia Project for .NET Core 2.1:</p><pre><code>$ dotnet-new aurelia-spa ProjectName
</code></pre><p>Create new Aurelia Project for .NET Framework:</p><pre><code>$ dotnet-new aurelia-spa-netfx ProjectName
</code></pre><h3 id="vuetify-spa" tabindex="-1"><a href="https://github.com/NetCoreTemplates/vuetify-spa" target="_blank" rel="noopener noreferrer">vuetify-spa</a> <a class="header-anchor" href="#vuetify-spa" aria-hidden="true">#</a></h3><p>Bootstrapped with <a href="https://cli.vuejs.org/" target="_blank" rel="noopener noreferrer">Vue CLI 3</a> and the <a href="https://github.com/vuetifyjs/vue-cli-plugin-vuetify" target="_blank" rel="noopener noreferrer">vuetify cli plugin</a>.</p><p><a href="https://github.com/NetCoreTemplates/vuetify-spa" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/vuetify-spa.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://vuetify-spa.web-templates.io" target="_blank" rel="noopener noreferrer">vuetify-spa.web-templates.io</a></p></blockquote><p>Create new Vuetify Project for .NET Core 2.1:</p><pre><code>$ dotnet-new vuetify-spa ProjectName
</code></pre><p>Create new Vuetify Project for .NET Framework:</p><pre><code>$ dotnet-new vuetify-spa-netfx ProjectName
</code></pre><h3 id="vue-nuxt" tabindex="-1"><a href="https://github.com/NetCoreTemplates/vue-nuxt" target="_blank" rel="noopener noreferrer">vue-nuxt</a> <a class="header-anchor" href="#vue-nuxt" aria-hidden="true">#</a></h3><p>Bootstrapped with <a href="https://nuxtjs.org/guide/installation" target="_blank" rel="noopener noreferrer">Nuxt.js starter template</a>.</p><p><a href="https://github.com/NetCoreTemplates/vue-nuxt" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/vue-nuxt.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://vue-nuxt.web-templates.io" target="_blank" rel="noopener noreferrer">vue-nuxt.web-templates.io</a></p></blockquote><p>Create new Nuxt.js v1.4.2 Project for .NET Core 2.1:</p><pre><code>$ dotnet-new vue-nuxt ProjectName
</code></pre><p>Create new Nuxt.js v1.4.2 Project for .NET Framework:</p><pre><code>$ dotnet-new vue-nuxt-netfx ProjectName
</code></pre><h3 id="vuetify-nuxt" tabindex="-1"><a href="https://github.com/NetCoreTemplates/vuetify-nuxt" target="_blank" rel="noopener noreferrer">vuetify-nuxt</a> <a class="header-anchor" href="#vuetify-nuxt" aria-hidden="true">#</a></h3><p>Bootstrapped with <a href="https://github.com/vuetifyjs/nuxt" target="_blank" rel="noopener noreferrer">Nuxt.js + Vuetify.js starter template</a>.</p><p><a href="https://github.com/NetCoreTemplates/vuetify-nuxt" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/vuetify-nuxt.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://vuetify-nuxt.web-templates.io" target="_blank" rel="noopener noreferrer">vuetify-nuxt.web-templates.io</a></p></blockquote><p>Create new Nuxt Vuetify Project for .NET Core 2.1:</p><pre><code>$ dotnet-new vuetify-nuxt ProjectName
</code></pre><p>Create new Nuxt Vuetify Project for .NET Framework:</p><pre><code>$ dotnet-new vuetify-nuxt-netfx ProjectName
</code></pre><h3 id="spa-project-templates-dev-workflow" tabindex="-1">SPA Project Templates Dev Workflow <a class="header-anchor" href="#spa-project-templates-dev-workflow" aria-hidden="true">#</a></h3><p>Whilst the client Application has been generated by the official CLI tool from each project, all templates continue to enjoy seamless integration with ServiceStack and follows its recommended <a href="/physical-project-structure.html">Physical Project Structure</a>. As the npm scripts vary slightly between projects, you&#39;ll need to refer to the documentation in the GitHub project of each template for the functionality available, but they all typically share the same functionality below to manage your projects development lifecycle:</p><p>Start a watched client build which will recompile and reload web assets on save:</p><pre><code>$ npm run dev
</code></pre><p>Start a watched .NET Core build which will recompile C# <code>.cs</code> source files on save and restart the ServiceStack .NET Core App:</p><pre><code>$ dotnet watch run
</code></pre><p>Leaving the above 2 commands running takes care of most of the development workflow which handles recompilation of both modified client and server source code.</p><p>Regenerate your client TypeScript DTOs after making a change to any Services:</p><pre><code>$ npm run dtos
</code></pre><p>Create an optimized client and package a Release build of your App:</p><pre><code>$ npm run publish
</code></pre><p>Which will publish your App to <code>bin/Release/netcoreapp2.1/publish</code> ready for deployment.</p><h4 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h4><p>The major JS Framework Templates are also pre-configured with their preferred unit testing solution which are run with npm&#39;s <code>test</code> command:</p><pre><code>$ npm test
</code></pre><p>Whilst Vue and Angular also include support for running end-to-end integration tests in a browser:</p><pre><code>$ npm run e2e
</code></pre><p>This also highlights one of the benefits of utilizing npm&#39;s vibrant ecosystem where it benefits from significant investments like <a href="https://www.cypress.io" target="_blank" rel="noopener noreferrer">cypress.io</a> which provides a complete solution for running integration tests:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/ssvs/vue/cypress.png" alt=""></p><h3 id="new-parcel-spa-template" tabindex="-1">New Parcel SPA Template <a class="header-anchor" href="#new-parcel-spa-template" aria-hidden="true">#</a></h3><p><a href="https://github.com/NetCoreTemplates/parcel" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/parcel.png" alt=""></a></p><p>Create new Parcel Template:</p><pre><code>$ dotnet-new parcel ProjectName
</code></pre><p><a href="https://parceljs.org" target="_blank" rel="noopener noreferrer">Parcel</a> aims to provide the simplest out-of-the-box development experience for creating modern npm-powered Web Apps by getting out of your way and letting you develop Websites without regard for a bundling solution or JS Framework.</p><p>To enlist its functionality you just point <code>parcel</code> to your home page:</p><pre><code>$ parcel index.html
</code></pre><p>This starts a Live Hot Reload Server which inspects all linked <code>*.html</code>, script and stylesheet resources to find all dependencies which it automatically monitors for changes where it will automatically rebuild and reload your webpage. Then when it&#39;s time for deployment you can perform a production build for your website with the <code>build</code> command:</p><pre><code>$ parcel build index.html
</code></pre><p>Where it creates an optimized bundle using advanced minification, compilation and bundling techniques. Despite its instant utility and zero configuration, it comes pre-configured with <a href="https://parceljs.org/transforms.html" target="_blank" rel="noopener noreferrer">popular auto transforms</a> for developing modern Web Apps which lets you utilize PostCSS transforms and advanced transpilers like TypeScript which the new Parcel Template takes advantage of to enable a pleasant development experience by enabling access to the latest ES7/TypeScript language features.</p><p>This template starts from a clean slate and does not use any of the <a href="https://github.com/NetCoreTemplates" target="_blank" rel="noopener noreferrer">popular JavaScript frameworks</a> making it ideal when wanting to use any other <a href="http://microjs.com" target="_blank" rel="noopener noreferrer">micro JS libraries</a> that can be referenced using a simple script include - reminiscent of simpler times.</p><p>Or <a href="https://twitter.com/mislav/status/1022058279000842240" target="_blank" rel="noopener noreferrer">develop without a JS framework</a>, e.g. <a href="https://github.com/NetCoreTemplates/parcel/blob/master/MyApp/src/index.ts" target="_blank" rel="noopener noreferrer">index.ts</a> below uses TypeScript and the native HTML DOM APIs for its functionality:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./shared&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./dtos&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#Name&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span>name <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> response<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The Parcel Template also includes customizations to integrate it with .NET Core Project conventions and <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">#Script</a> Website enabling access to additional flexibility like dynamic Web Pages and server-side rendering when needed. See the <a href="https://github.com/NetCoreTemplates/parcel#development-workflow" target="_blank" rel="noopener noreferrer">Parcel Template docs</a> for information on the available <code>dev</code>, <code>build</code>, <code>dtos</code> and <code>publish</code> npm scripts used to manage the Development workflow.</p><p>Seamless Parcel integration is another example of the benefits of <code>#Script</code> layered approach and non-intrusive handlebars syntax which can be cleanly embedded in existing <code>.html</code> pages without interfering with static HTML analyzers like parcel and Webpack HTML plugins and their resulting HTML minification in optimized production builds - enabling simplified development workflows and integration that&#39;s not possible with Razor.</p><h2 id="script-remastered" tabindex="-1"><code>#Script</code> Remastered <a class="header-anchor" href="#script-remastered" aria-hidden="true">#</a></h2><p>We&#39;re excited to announce the next version of <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">#Script</a> which has gained significant new capabilities and implemented its entire wishlist from the previous version, overcoming all features we felt were missing from the previous release transforming it into a full-featured dynamic templating language that provides a much simpler and more flexible alternative for developing server-generated Web Pages than Razor, that&#39;s suitable for more use-cases than Razor.</p><h4 id="natural-familiar-syntax-for-html-templating" tabindex="-1">Natural familiar syntax for HTML Templating <a class="header-anchor" href="#natural-familiar-syntax-for-html-templating" aria-hidden="true">#</a></h4><p>An elegant characteristic of <code>#Script</code> is its familiar and natural syntax, it introduces very little new syntax as it&#39;s able to adopt popular language syntax that&#39;s prevalently used in Web Apps today, namely JavaScript Expressions, Vue Filters and Handlebars.js block helpers - these combined, adequately describe <code>#Script</code> syntax.</p><h4 id="spanified-templates" tabindex="-1">Spanified Templates <a class="header-anchor" href="#spanified-templates" aria-hidden="true">#</a></h4><p>In amidst of the internal rewrite to be able to add its new capabilities, all parsing was rewritten to use the new <code>Span&lt;T&gt;</code> Type for added performance, minimal allocations and future proofing, ensuring the supporting Data Structures would not need to be changed in future.</p><h4 id="minimal-breaking-changes" tabindex="-1">Minimal Breaking Changes <a class="header-anchor" href="#minimal-breaking-changes" aria-hidden="true">#</a></h4><p>Despite the significant refactor the only known breaking change was to rename the <a href="https://sharpscript.net/docs/default-scripts#conditional-tests" target="_blank" rel="noopener noreferrer">and() and or() conditional test methods</a> to upper case <code>AND()</code> and <code>OR()</code> which was a side-effect of implementing proper JavaScript Expressions with <code>and</code> and <code>or</code> becoming keywords to support <a href="https://sharpscript.net/docs/syntax#sql-like-boolean-expressions" target="_blank" rel="noopener noreferrer">SQL-Like Expressions</a>. Although these methods are no longer needed as they were deficiencies from the previous restriction of having all functionality provided by C# methods. Now you can use the more natural JS/C# or SQL boolean expression syntax, e.g:</p><div class="language-js"><pre><code><span class="token constant">AND</span><span class="token punctuation">(</span><span class="token constant">OR</span><span class="token punctuation">(</span><span class="token function">eq</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">eq</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Filter methods</span>
<span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> it <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>     <span class="token comment">// JavaScript/C#</span>
<span class="token punctuation">(</span>it <span class="token operator">=</span> <span class="token number">2</span> or it <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> and <span class="token function">isOdd</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>      <span class="token comment">// SQL-like</span>
</code></pre></div><h3 id="javascript-expressions" tabindex="-1">JavaScript Expressions <a class="header-anchor" href="#javascript-expressions" aria-hidden="true">#</a></h3><p>As Templates quickly became our preferred method for developing server-generated Websites one feature high on our wishlist was to be able to use JavaScript Expressions in filters. Templates was first and foremost designed for simplicity inspired by languages like LISP and Smalltalk which was able to achieve great power with minimal language features. But as the examples above shows this restriction often compromises on readability and expressiveness which are also design goals for Templates so the first major feature added to Templates was support for JavaScript Expressions.</p><p>As the previous abstract syntax tree (AST) was a naive implementation that only supported its limited featureset, a new AST was needed to support the expanded JavaScript expression syntax, but instead of creating a new one we&#39;ve followed the <a href="https://esprima.readthedocs.io/en/latest/syntax-tree-format.html" target="_blank" rel="noopener noreferrer">syntax tree used by Esprima</a>, JavaScript&#39;s leading lexical language parser for JavaScript, but adapted to suit C# conventions using PascalCase properties and each AST Type prefixed with <code>Js*</code> to avoid naming collisions with C#&#39;s LINQ Expression Types which often has the same name.</p><p>So Esprima&#39;s <a href="https://esprima.readthedocs.io/en/latest/syntax-tree-format.html#member-expression" target="_blank" rel="noopener noreferrer">MemberExpression</a> maps to <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Templates/JsMemberExpression.cs" target="_blank" rel="noopener noreferrer">JsMemberExpression</a> in Templates.</p><p>In addition to adopting Esprima&#39;s AST data structures, Templates can also <a href="https://sharpscript.net/docs/expression-viewer#expression=1%20-%202%20%2B%203%20*%204%20%2F%205" target="_blank" rel="noopener noreferrer">emit the same serialized Syntax Tree</a> that Esprima generates from any AST Expression, e.g:</p><div class="language-csharp"><pre><code><span class="token comment">// Create AST from JS Expression</span>
<span class="token class-name">JsToken</span> expr <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;1 - 2 + 3 * 4 / 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Convert to Object Dictionary in Esprima&#39;s Syntax Tree Format</span>
<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> esprimaAst <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">ToJsAst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Serialize as Indented JSON</span>
esprimaAst<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IndentJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will display the same output as seen in the new <a href="https://sharpscript.net/docs/expression-viewer#expression=1%20-%202%20%2B%203%20*%204%20%2F%205" target="_blank" rel="noopener noreferrer">JS Expression Viewer</a>:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=1%20-%202%20%2B%203%20*%204%20%2F%205" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/expression-viewer.png" alt=""></a></p><p>From the AST output we can visualize how the different operator precedence is applied to an Expression. Expression viewer also lets us explore and evaluate different JavaScript Expressions with custom arguments:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=1%20%3C%202%20%26%26%20(t%20%7C%7C%203%20%3E%204)%20%26%26%20f&amp;t=true&amp;f=false" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/logical-expression.png" alt=""></a></p><p>An <a href="https://brendaneich.com/2012/04/the-infernal-semicolon/" target="_blank" rel="noopener noreferrer">abusage Brendan Eich regrets</a> that we&#39;ve chosen to enforce was limiting the <code>||</code> and <code>&amp;&amp;</code> binary operators to boolean expressions, which themselves always evaluate to a boolean value.</p><p>Instead to replicate <code>||</code> coalescing behavior on falsy values you can use C#&#39;s <code>??</code> null coalescing operator as seen in:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=a%20%3E%20(c%20%3F%3F%20b)%20%3F%20a%20%3A%20b&amp;a=1&amp;b=2" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/ternary-expression.png" alt=""></a></p><h4 id="lambda-expressions" tabindex="-1">Lambda Expressions <a class="header-anchor" href="#lambda-expressions" aria-hidden="true">#</a></h4><p>The new support for lambda expressions is now available to all functional filters:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=map(range(1%2Ccount)%2C%20x%20%3D%3E%20x%20*%20x)&amp;count=5" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/lambda-expression.png" alt=""></a></p><p>Previously to capture expressions without evaluating them they needed to be passed as a string where they would be re-evaluated with an injected with an <code>it</code> binding. To make the experience more pleasant a <a href="https://sharpscript.net/docs/syntax#special-string-argument-syntax" target="_blank" rel="noopener noreferrer">special string argument syntax</a> was also added:</p>`,188),l=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"customers"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"zip"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Orders"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"let"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},"'it[0]'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},"'it[1]'"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"where"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Total"),a(),n("span",{class:"token punctuation"},"<"),a(),n("span",{class:"token number"},"500"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"map"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"o"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlDump"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),i=n("p",null,"Whilst you can still use string expressions, its usage should be considered deprecated in all places that expect an expression given it's unfamiliarity which was only previously used to workaround the lack of lambda expressions which is now supported.",-1),r=n("p",null,"Instead you can now use lambda expression syntax:",-1),u=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"customers"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"zip"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"x"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"x"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Orders"),n("span",{class:"token punctuation"},")"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"let"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"x"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"where"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"_"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Total"),a(),n("span",{class:"token punctuation"},"<"),a(),n("span",{class:"token number"},"500"),n("span",{class:"token punctuation"},")"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"_"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},")"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlDump"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),k=n("p",null,[a("Similar to the "),n("a",{href:"https://sharpscript.net/docs/syntax#special-string-argument-syntax",target:"_blank",rel:"noopener noreferrer"},"Special string argument syntax"),a(" there's also shorthand support for single argument lambda expressions which can instead use "),n("code",null,"=>"),a(" without brackets or named arguments where it will be implicitly assigned to the "),n("code",null,"it"),a(" binding:")],-1),d=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"customers"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"zip"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Orders"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"let"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token punctuation"},"}"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"where"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Total"),a(),n("span",{class:"token punctuation"},"<"),a(),n("span",{class:"token number"},"500"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"map"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"o"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlDump"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),h=n("p",null,[a("As it's results in more wrist-friendly and readable code, "),n("a",{href:"https://sharpscript.net/linq/projection-operators#linq15-selectmany---compound-from-2",target:"_blank",rel:"noopener noreferrer"},"most LINQ Examples"),a(" have been changed to use the shorthand lambda expression syntax above.")],-1),m=n("h4",{id:"shorthand-properties",tabindex:"-1"},[a("Shorthand properties "),n("a",{class:"header-anchor",href:"#shorthand-properties","aria-hidden":"true"},"#")],-1),g=n("p",null,[a("Other language enhancements include support for "),n("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Syntax",target:"_blank",rel:"noopener noreferrer"},"JavaScript's shorthand property names"),a(":")],-1),b=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"name"),n("span",{class:"token punctuation"},","),n("span",{class:"token variable"},"age"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),v=n("p",null,"But like C# also lets you use member property names:",-1),f=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"people"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"let"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Age"),a(),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"select"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Age"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),w=s(`<h4 id="template-literals" tabindex="-1">Template Literals <a class="header-anchor" href="#template-literals" aria-hidden="true">#</a></h4><p>Many of ES6/7 features are also implemented like Template Literals which is very nice to have in a Template Language:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=%60Hello%2C%20%24%7Bname%7D!%20%24%7Ba%20%3F%20pow(1%2B2%2Ca)%20%3A%20&#39;&#39;%7D%60&amp;name=&#39;World&#39;&amp;a=3" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/template-literals.png" alt=""></a></p><blockquote><p>Backtick quoted strings also adopt the same <a href="https://sharpscript.net/docs/syntax#template-literals" target="_blank" rel="noopener noreferrer">escaping behavior of JavaScript strings</a> whilst all other quoted strings preserve unescaped string values.</p></blockquote><h4 id="spread-operators" tabindex="-1">Spread Operators <a class="header-anchor" href="#spread-operators" aria-hidden="true">#</a></h4><p>Other advanced ES6/7 features supported include the object spread, array spread and argument spread operators:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=keys(%7B%20...a%2C%20c%3A3%2C%20...%7Bd%3A%204%7D%20%7D)&amp;a=%7B%20b%3A%202%20%7D" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/object-spread.png" alt=""></a></p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=%5B1%2C%20...%5Brange(2%2Cpow(...%5B3%2Ce%5D))%5D%2C%201%5D&amp;e=2" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/array-spread.png" alt=""></a></p><h4 id="bitwise-operators" tabindex="-1">Bitwise Operators <a class="header-anchor" href="#bitwise-operators" aria-hidden="true">#</a></h4><p>All JavaScript Bitwise operators are also supported:</p><p><a href="https://sharpscript.net/docs/expression-viewer#expression=%5B3%251%2C%203%261%2C%203%7C1%2C%203%5E1%2C%203%3C%3C1%2C%203%20%3E%3E%201%2C%20~1%5D&amp;e=2" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/bitwise-operators.png" alt=""></a></p><p>Essentially Templates now supports most JavaScript Expressions, not statements which are covered with the new Blocks support or mutations using Assignment Expressions and Operators. All assignments still need to be explicitly performed through an <a href="https://sharpscript.net/docs/default-scripts#assignment" target="_blank" rel="noopener noreferrer">Assignment Filter</a>.</p><h4 id="evaluating-javascript-expressions" tabindex="-1">Evaluating JavaScript Expressions <a class="header-anchor" href="#evaluating-javascript-expressions" aria-hidden="true">#</a></h4><p>The built-in JavaScript expressions support is also useful outside of Templates where they can be evaluated with <code>JS.eval()</code>:</p><div class="language-csharp"><pre><code>JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;pow(2,2) + pow(4,2)&quot;</span><span class="token punctuation">)</span> <span class="token comment">//= 20</span>
</code></pre></div><p>The difference over JavaScript&#39;s eval being that methods are calling <a href="https://sharpscript.net/docs/filters-reference" target="_blank" rel="noopener noreferrer">C# method filters</a> in a sandboxed context.</p><p>By default expressions are executed in an empty scope, but can also be executed within a custom scope which can be used to define the arguments expressions are evaluated with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">args</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;pow(a,2) + pow(b,2)&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span> <span class="token comment">//= 20</span>
</code></pre></div><p>Custom methods can also be introduced into the scope which can override existing filters by using the same name and args count, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">MyFilters</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TemplateFilter</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> arg1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> arg2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arg1 <span class="token operator">/</span> arg2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">functions</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JS<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;pow(2,2) + pow(4,2)&quot;</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= 3</span>
</code></pre></div><p>An alternative to injecting arguments by scope is to wrap the expression in a lambda expression, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expr <span class="token operator">=</span> <span class="token punctuation">(</span>JsArrowFunctionExpression<span class="token punctuation">)</span>JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;(a,b) =&gt; pow(a,2) + pow(b,2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Which can then be invoked with positional arguments by calling <code>Invoke()</code>, e.g:</p><div class="language-csharp"><pre><code>expr<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment">//= 20</span>
expr<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//= 3</span>
</code></pre></div><h4 id="parsing-js-expressions" tabindex="-1">Parsing JS Expressions <a class="header-anchor" href="#parsing-js-expressions" aria-hidden="true">#</a></h4><p>Evaluating JS expressions with <code>JS.eval()</code> is a wrapper around parsing the JS expression into an AST tree then evaluating it:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expr <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;pow(2,2) + pow(4,2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
expr<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//= 20</span>
</code></pre></div><p>When needing to evaluate the same expression multiple times you can cache and execute the AST to save the cost of parsing the expression again.</p><h4 id="dsl-example" tabindex="-1">DSL example <a class="header-anchor" href="#dsl-example" aria-hidden="true">#</a></h4><p>If implementing a DSL containing multiple expressions as done in many of the <a href="https://sharpscript.net/docs/blocks" target="_blank" rel="noopener noreferrer">Block argument expressions</a> you can instead use the <code>ParseJsExpression()</code> extension method to return a literal Span advanced to past the end of the expression with the parsed AST token returned in an <code>out</code> parameter.</p><p>This is what the Each block implementation uses to parse its argument expression which can contain a number of LINQ-like expressions:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> literal <span class="token operator">=</span> <span class="token string">&quot;where c.Age == 27 take 1 + 2&quot;</span><span class="token punctuation">.</span><span class="token function">AsSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>literal<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;where &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">Advance</span><span class="token punctuation">(</span><span class="token string">&quot;where &quot;</span><span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#39;c.Age == 27 take 1 + 2&#39;</span>
    literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">ParseJsExpression</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token keyword">where</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39; take 1 + 2&#39;</span>
<span class="token punctuation">}</span>
literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">AdvancePastWhitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// &#39;take 1 + 2&#39;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>literal<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;take &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">Advance</span><span class="token punctuation">(</span><span class="token string">&quot;take &quot;</span><span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &#39;1 + 2&#39;</span>
    literal <span class="token operator">=</span> literal<span class="token punctuation">.</span><span class="token function">ParseJsExpression</span><span class="token punctuation">(</span><span class="token keyword">out</span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Resulting in <code>where</code> populated with the <a href="https://sharpscript.net/docs/expression-viewer#expression=c.Age%20%3D%3D%2027&amp;c=%7B%20Age%3A27%20%7D" target="_blank" rel="noopener noreferrer">c.Age == 27</a> <code>BinaryExpression</code> and <code>take</code> with the <a href="https://sharpscript.net/docs/expression-viewer#expression=1%20%2B%202" target="_blank" rel="noopener noreferrer">1 + 2</a><code>BinaryExpression</code>.</p><h4 id="immutable-and-comparable" tabindex="-1">Immutable and Comparable <a class="header-anchor" href="#immutable-and-comparable" aria-hidden="true">#</a></h4><p>Unlike C#&#39;s LINQ Expressions which can&#39;t be compared for equality, Template Expressions are both Immutable and Comparable which can be used in caches and compared to determine if 2 Expressions are equivalent, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> expr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsLogicalExpression</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsBinaryExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsIdentifier</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsGreaterThan<span class="token punctuation">.</span>Operator<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsLiteral</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    JsAnd<span class="token punctuation">.</span>Operator<span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsBinaryExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsIdentifier</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsLessThan<span class="token punctuation">.</span>Operator<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsLiteral</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

expr<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;a &gt; 1 &amp;&amp; b &lt; 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//= true</span>

expr<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsLogicalExpression</span><span class="token punctuation">(</span>
    JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;a &gt; 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsAnd<span class="token punctuation">.</span>Operator<span class="token punctuation">,</span> JS<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token string">&quot;b &lt; 2&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//= true</span>
</code></pre></div><p>Showing Expressions whether created programmatically, entirely from strings or any combination of both can be compared for equality and evaluated in the same way:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> JS<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">args</span><span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

expr<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span> <span class="token comment">//= true</span>
</code></pre></div><h2 id="template-blocks" tabindex="-1">Template Blocks <a class="header-anchor" href="#template-blocks" aria-hidden="true">#</a></h2><p>Another limitation causing friction was having to compose all logic within filter expressions which made it difficult to do things like selectively evaluate entire fragments. Existing solutions that was best suited to do this whilst maintaining high fidelity with existing Filter Expressions was <a href="https://handlebarsjs.com/block_helpers.html" target="_blank" rel="noopener noreferrer">handlebars block helpers</a>.</p><p>Blocks lets you define reusable statements that can be invoked with a new context allowing the creation custom iterators and helpers - making it easy to encapsulate reusable functionality and reduce boilerplate for common functionality.</p><p>In addition to adopting its syntax, Templates also includes most of handlebars.js block helpers which are useful in a HTML template language whilst minimizing any porting efforts if needing to reuse existing JavaScript handlebars templates. Just like Filters, Blocks support is completely customizable where all built-in blocks can be removed and new ones added.</p><p>We&#39;ll walk through creating a few of the built-in Template blocks to demonstrate how to create them from scratch.</p><h3 id="noop" tabindex="-1">noop <a class="header-anchor" href="#noop" aria-hidden="true">#</a></h3><p>We&#39;ll start with creating the <code>noop</code> block (short for &quot;no operation&quot;) which functions like a block comment by removing its inner contents from the rendered page:</p>`,45),y=n("div",null,[n("div",{class:"language-html"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),a(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("entry"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("h1")]),n("span",{class:"token punctuation"},">")]),a("{{title}}"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("h1")]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),a(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("body"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  {{#noop}}
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("h2")]),n("span",{class:"token punctuation"},">")]),a("Removed Content"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("h2")]),n("span",{class:"token punctuation"},">")]),a(`
    {{page}}
  {{/noop}}
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")]),a(`
`)])])])],-1),S=s(`<p>The <code>noop</code> block is also the smallest implementation possible which needs to inherit <code>TemplateBlock</code> class, overrides the <code>Name</code> getter with the name of the block and implements the <code>WriteAsync()</code> method which for the <code>noop</code> block just returns an empty <code>Task</code> thereby not writing anything to the Output Stream, resulting in its inner contents being ignored:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateNoopBlock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TemplateBlock</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;noop&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token class-name">TemplateScopeContext</span> scope<span class="token punctuation">,</span> <span class="token class-name">PageBlockFragment</span> block<span class="token punctuation">,</span><span class="token class-name">CancellationToken</span> t<span class="token punctuation">)</span>
        <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>All Block&#39;s are executed with 3 parameters:</p><ul><li><code>TemplateScopeContext</code> - The current Execution and Rendering context</li><li><code>PageBlockFragment</code> - The parsed Block contents</li><li><code>CancellationToken</code> - Allows the async render operation to be cancelled</li></ul><h3 id="registering-blocks" tabindex="-1">Registering Blocks <a class="header-anchor" href="#registering-blocks" aria-hidden="true">#</a></h3><p>The same flexible registration options for <a href="https://sharpscript.net/docs/methods#registering-filters" target="_blank" rel="noopener noreferrer">Registering Filters</a> is also available for registering blocks where if it wasn&#39;t already built-in, <code>TemplateNoopBlock</code> could be registered by adding it to the <code>TemplateBlocks</code> collection:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TemplateContext</span> <span class="token punctuation">{</span>
    TemplateBlocks <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TemplateNoopBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="autowired-using-templatecontext-ioc" tabindex="-1">Autowired using TemplateContext IOC <a class="header-anchor" href="#autowired-using-templatecontext-ioc" aria-hidden="true">#</a></h4><p>Autowired instances of blocks and filters can also be created using TemplateContext&#39;s configured IOC where they&#39;re also injected with any registered IOC dependencies by registering them in the <code>ScanTypes</code> collection:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TemplateContext</span>
<span class="token punctuation">{</span>
    ScanTypes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TemplateNoopBlock</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span>Container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICacheClient<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When the <code>TemplateContext</code> is initialized it goes through each Type and creates an autowired instance of each Block or Filter Type it can find and registers them in the <code>TemplateBlocks</code> collection. An alternative to registering individual Types is to register an entire Assembly, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TemplateContext</span>
<span class="token punctuation">{</span>
    ScanAssemblies <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyBlock</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Which automatically registers any Blocks or Filters contained in the Assembly where <code>MyBlock</code> is defined.</p><h3 id="bold" tabindex="-1">bold <a class="header-anchor" href="#bold" aria-hidden="true">#</a></h3><p>A step up from <code>noop</code> is the <strong>bold</strong> Template Block which markup its contents within the <code>&lt;b/&gt;</code> tag:</p>`,15),T=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#bold}}This"),a(),n("span",{class:"token variable"},"text"),a(),n("span",{class:"token variable"},"will"),a(),n("span",{class:"token variable"},"be"),a(),n("span",{class:"token variable"},"bold"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"bold"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),x=s(`<p>Which calls the <code>base.WriteBodyAsync()</code> method to evaluate and write the Block&#39;s contents to the <code>OutputStream</code> using the current <code>TemplateScopeContext</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateBoldBlock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TemplateBlock</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;bold&quot;</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteAsync</span><span class="token punctuation">(</span>
        <span class="token class-name">TemplateScopeContext</span> scope<span class="token punctuation">,</span> <span class="token class-name">PageBlockFragment</span> block<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> token<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> scope<span class="token punctuation">.</span>OutputStream<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;b&gt;&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">WriteBodyAsync</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> block<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> scope<span class="token punctuation">.</span>OutputStream<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/b&gt;&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="with" tabindex="-1">with <a class="header-anchor" href="#with" aria-hidden="true">#</a></h3><p>The <code>with</code> Block shows an example of utilizing arguments. To maximize flexibility arguments passed into your block are captured in a free-form string (specifically a <code>ReadOnlyMemory&lt;char&gt;</code>) which gives Blocks the freedom to accept simple arguments to complex LINQ-like expressions - a feature some built-in Blocks take advantage of.</p>`,4),_=n("div",null,[n("p",null,[a("The "),n("code",null,"with"),a(" block works similarly to "),n("a",{href:"https://handlebarsjs.com/block_helpers.html#with-helper",target:"_blank",rel:"noopener noreferrer"},"handlebars with helper"),a(" or JavaScript's "),n("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with",target:"_blank",rel:"noopener noreferrer"},"with statement"),a(" where it extracts the properties (or Keys) of an object and adds them to the current scope which avoids needing a prefix each property reference, e.g. being able to use "),n("code",null,"{{Name}}"),a(" instead of "),n("code",null,"{{person.Name}}"),a(":")]),n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#with"),a(),n("span",{class:"token variable"},"person"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token variable"},"Hi"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"your"),a(),n("span",{class:"token variable"},"Age"),a(),n("span",{class:"token variable"},"is"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Age"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"."),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"with"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),A=s(`<p>The <code>with</code> Block&#39;s contents are also <strong>only evaluated</strong> if the argument expression is not <code>null</code>.</p><p>The implementation below shows the optimal way to implement <code>with</code> by calling <code>GetJsExpressionAndEvaluate()</code> to resolve a cached AST token that&#39;s then evaluated to return the result of the Argument expression.</p><p>If the argument evaluates to an object it calls the <code>ToObjectDictionary()</code> extension method to convert it into a <code>Dictionary&lt;string,object&gt;</code> then creates a new scope with each property added as arguments and then evaluates the block&#39;s Body contents with the new scope:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateWithBlock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TemplateBlock</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;with&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteAsync</span><span class="token punctuation">(</span>
        <span class="token class-name">TemplateScopeContext</span> scope<span class="token punctuation">,</span> <span class="token class-name">PageBlockFragment</span> block<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> token<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> block<span class="token punctuation">.</span>Argument<span class="token punctuation">.</span><span class="token function">GetJsExpressionAndEvaluate</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">ifNone</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;with&#39; block does not have a valid expression&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> resultAsMap <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">ToObjectDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> withScope <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">ScopeWithParams</span><span class="token punctuation">(</span>resultAsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
             
            <span class="token keyword">await</span> <span class="token function">WriteBodyAsync</span><span class="token punctuation">(</span>withScope<span class="token punctuation">,</span> block<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>To better highlight what&#39;s happening, a non-cached version of <code>GetJsExpressionAndEvaluate()</code> involves parsing the Argument string into an AST Token then evaluating it with the current scope:</p><div class="language-csharp"><pre><code>block<span class="token punctuation">.</span>Argument<span class="token punctuation">.</span><span class="token function">ParseJsExpression</span><span class="token punctuation">(</span><span class="token keyword">out</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>ParseJsExpression()</code> extension method is able to parse virtually any <a href="https://sharpscript.net/docs/expression-viewer" target="_blank" rel="noopener noreferrer">JavaScript Expression</a> into an AST tree which can then be evaluated by calling its <code>token.Evaluate(scope)</code> method.</p><h5 id="final-implementation" tabindex="-1">Final implementation <a class="header-anchor" href="#final-implementation" aria-hidden="true">#</a></h5><p>The actual <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Templates/Blocks/TemplateWithBlock.cs" target="_blank" rel="noopener noreferrer">TemplateWithBlock.cs</a> used in Templates includes extended functionality which uses <code>GetJsExpressionAndEvaluateAsync()</code> to be able to evaluate both <strong>sync</strong> and <strong>async</strong> results.</p><h5 id="else-if-else-statements" tabindex="-1">else if/else statements <a class="header-anchor" href="#else-if-else-statements" aria-hidden="true">#</a></h5><p>It also evaluates any <code>block.ElseBlocks</code> statements which is <strong>functionality available to all blocks</strong> which are able to evaluate any alternative <strong>else/else if</strong> statements when the main template isn&#39;t rendered, e.g. in this case when the <code>with</code> block is called with a <code>null</code> argument:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateWithBlock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TemplateBlock</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;with&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteAsync</span><span class="token punctuation">(</span>
        <span class="token class-name">TemplateScopeContext</span> scope<span class="token punctuation">,</span> <span class="token class-name">PageBlockFragment</span> block<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> token<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> block<span class="token punctuation">.</span>Argument<span class="token punctuation">.</span><span class="token function">GetJsExpressionAndEvaluateAsync</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">ifNone</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;with&#39; block does not have a valid expression&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> resultAsMap <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">ToObjectDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> withScope <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">ScopeWithParams</span><span class="token punctuation">(</span>resultAsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">await</span> <span class="token function">WriteBodyAsync</span><span class="token punctuation">(</span>withScope<span class="token punctuation">,</span> block<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">WriteElseAsync</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> block<span class="token punctuation">.</span>ElseBlocks<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This enables the <code>with</code> block to also evaluate async responses like the async results returned in <a href="https://sharpscript.net/docs/db-scripts" target="_blank" rel="noopener noreferrer">async Database filters</a>, it&#39;s also able to evaluate custom else statements for rendering different results based on alternate conditions, e.g:</p>`,13),C=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#with"),a(),n("span",{class:"token variable"},"dbSingle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"select * from Person where id = @id"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"id"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token variable"},"Hi"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"your"),a(),n("span",{class:"token variable"},"Age"),a(),n("span",{class:"token variable"},"is"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Age"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"."),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"else"),a(),n("span",{class:"token variable"},"if"),a(),n("span",{class:"token variable"},"id"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token variable"},"id"),a(),n("span",{class:"token variable"},"is"),a(),n("span",{class:"token variable"},"required"),n("span",{class:"token punctuation"},"."),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"else"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token variable"},"No"),a(),n("span",{class:"token variable"},"person"),a(),n("span",{class:"token variable"},"with"),a(),n("span",{class:"token variable"},"id"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token variable"},"exists"),n("span",{class:"token punctuation"},"."),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"with"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),q=s('<h3 id="if" tabindex="-1">if <a class="header-anchor" href="#if" aria-hidden="true">#</a></h3><div><p>Since all blocks can call <code>base.WriteElseAsync()</code> to execute any number of <code>{{else}}</code> statements, the implementation for the <code>{{if}}</code> block ends up being even simpler which just needs to evaluate the argument to <code>bool</code>.</p></div><p>If <strong>true</strong> it writes the body with <code>WriteBodyAsync()</code> otherwise it evaluates any <code>else</code> statements with <code>WriteElseAsync()</code>:</p>',3),P=n("div",null,[n("div",{class:"language-csharp"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token comment"},"/// <summary>"),a(`
`),n("span",{class:"token comment"},"/// Handlebars.js like if block"),a(`
`),n("span",{class:"token comment"},"/// Usages: {{#if a > b}} max {{a}} {{/if}}"),a(`
`),n("span",{class:"token comment"},"///         {{#if a > b}} max {{a}} {{else}} max {{b}} {{/if}}"),a(`
`),n("span",{class:"token comment"},"///         {{#if a > b}} max {{a}} {{else if b > c}} max {{b}} {{else}} max {{c}} {{/if}}"),a(`
`),n("span",{class:"token comment"},"/// </summary>"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"TemplateIfBlock"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},"TemplateBlock")]),a(`
`),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"string")]),a(" Name "),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token string"},'"if"'),n("span",{class:"token punctuation"},";"),a(`
    
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token keyword"},"async"),a(),n("span",{class:"token return-type class-name"},"Task"),a(),n("span",{class:"token function"},"WriteAsync"),n("span",{class:"token punctuation"},"("),a(`
        `),n("span",{class:"token class-name"},"TemplateScopeContext"),a(" scope"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"PageBlockFragment"),a(" block"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"CancellationToken"),a(" token"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" result "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"await"),a(" block"),n("span",{class:"token punctuation"},"."),a("Argument"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"GetJsExpressionAndEvaluateToBoolAsync"),n("span",{class:"token punctuation"},"("),a("scope"),n("span",{class:"token punctuation"},","),a(`
            `),n("span",{class:"token named-parameter punctuation"},"ifNone"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token keyword"},"throw"),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token constructor-invocation class-name"},"NotSupportedException"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},`"'if' block does not have a valid expression"`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("result"),n("span",{class:"token punctuation"},")"),a(`
        `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"await"),a(),n("span",{class:"token function"},"WriteBodyAsync"),n("span",{class:"token punctuation"},"("),a("scope"),n("span",{class:"token punctuation"},","),a(" block"),n("span",{class:"token punctuation"},","),a(" token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token keyword"},"else"),a(`
        `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"await"),a(),n("span",{class:"token function"},"WriteElseAsync"),n("span",{class:"token punctuation"},"("),a("scope"),n("span",{class:"token punctuation"},","),a(" block"),n("span",{class:"token punctuation"},"."),a("ElseBlocks"),n("span",{class:"token punctuation"},","),a(" token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),E=n("h3",{id:"each",tabindex:"-1"},[a("each "),n("a",{class:"header-anchor",href:"#each","aria-hidden":"true"},"#")],-1),N=n("p",null,[a("From what we've seen up till now, the "),n("a",{href:"https://handlebarsjs.com/block_helpers.html#iterators",target:"_blank",rel:"noopener noreferrer"},"handlebars.js each block"),a(" is also straightforward to implement which just iterates over a collection argument that evaluates its body with a new scope containing the elements "),n("strong",null,"properties"),a(", a conventional "),n("code",null,"it"),a(" binding for the element and an "),n("code",null,"index"),a(" argument that can be used to determine the index of each element:")],-1),I=n("div",null,[n("div",{class:"language-csharp"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token comment"},"/// <summary>"),a(`
`),n("span",{class:"token comment"},"/// Handlebars.js like each block"),a(`
`),n("span",{class:"token comment"},"/// Usages: {{#each customers}} {{Name}} {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each customers}} {{it.Name}} {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each customers}} Customer {{index + 1}}: {{Name}} {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each numbers}} {{it}} {{else}} no numbers {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each numbers}} {{it}} {{else if letters != null}} has letters {{else}} no numbers {{/each}}"),a(`
`),n("span",{class:"token comment"},"/// </summary>"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"TemplateSimpleEachBlock"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},"TemplateBlock")]),a(`
`),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"string")]),a(" Name "),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token string"},'"each"'),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token keyword"},"async"),a(),n("span",{class:"token return-type class-name"},"Task"),a(),n("span",{class:"token function"},"WriteAsync"),n("span",{class:"token punctuation"},"("),a(`
        `),n("span",{class:"token class-name"},"TemplateScopeContext"),a(" scope"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"PageBlockFragment"),a(" block"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"CancellationToken"),a(" token"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" collection "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"("),a("IEnumerable"),n("span",{class:"token punctuation"},")"),a(" block"),n("span",{class:"token punctuation"},"."),a("Argument"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"GetJsExpressionAndEvaluate"),n("span",{class:"token punctuation"},"("),a("scope"),n("span",{class:"token punctuation"},","),a(`
            `),n("span",{class:"token named-parameter punctuation"},"ifNone"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token keyword"},"throw"),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token constructor-invocation class-name"},"NotSupportedException"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},`"'each' block does not have a valid expression"`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" index "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("collection "),n("span",{class:"token operator"},"!="),a(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),a(`
        `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"foreach"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" element "),n("span",{class:"token keyword"},"in"),a(" collection"),n("span",{class:"token punctuation"},")"),a(`
            `),n("span",{class:"token punctuation"},"{"),a(`
                `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" scopeArgs "),n("span",{class:"token operator"},"="),a(" element"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ToObjectDictionary"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
                scopeArgs`),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"it"'),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" element"),n("span",{class:"token punctuation"},";"),a(`
                scopeArgs`),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"nameof"),n("span",{class:"token punctuation"},"("),a("index"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" index"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),a(`
                
                `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" itemScope "),n("span",{class:"token operator"},"="),a(" scope"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ScopeWithParams"),n("span",{class:"token punctuation"},"("),a("scopeArgs"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
                `),n("span",{class:"token keyword"},"await"),a(),n("span",{class:"token function"},"WriteBodyAsync"),n("span",{class:"token punctuation"},"("),a("itemScope"),n("span",{class:"token punctuation"},","),a(" block"),n("span",{class:"token punctuation"},","),a(" token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
            `),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
        
        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("index "),n("span",{class:"token operator"},"=="),a(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),a(`
        `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"await"),a(),n("span",{class:"token function"},"WriteElseAsync"),n("span",{class:"token punctuation"},"("),a("scope"),n("span",{class:"token punctuation"},","),a(" block"),n("span",{class:"token punctuation"},"."),a("ElseBlocks"),n("span",{class:"token punctuation"},","),a(" token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),R=n("p",null,"Despite its terse implementation, the above Template Block can be used to iterate over any expression that evaluates to a collection, inc. objects, POCOs, strings as well as Value Type collections like ints.",-1),D=n("h5",{id:"built-in-each",tabindex:"-1"},[a("Built-in each "),n("a",{class:"header-anchor",href:"#built-in-each","aria-hidden":"true"},"#")],-1),B=n("p",null,[a("However the built-in "),n("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Templates/Blocks/TemplateEachBlock.cs",target:"_blank",rel:"noopener noreferrer"},"TemplateEachBlock.cs"),a(" has a larger implementation to support its richer feature-set where it also includes support for async results, custom element bindings and LINQ-like syntax for maximum expressiveness whilst utilizing expression caching to ensure any complex argument expressions are only parsed once.")],-1),M=n("div",null,[n("div",{class:"language-csharp"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token comment"},"/// <summary>"),a(`
`),n("span",{class:"token comment"},"/// Handlebars.js like each block"),a(`
`),n("span",{class:"token comment"},"/// Usages: {{#each customers}} {{Name}} {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each customers}} {{it.Name}} {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each num in numbers}} {{num}} {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each num in [1,2,3]}} {{num}} {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each numbers}} {{it}} {{else}} no numbers {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each numbers}} {{it}} {{else if letters != null}} has letters {{else}} no numbers {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each n in numbers where n > 5}} {{it}} {{else}} no numbers > 5 {{/each}}"),a(`
`),n("span",{class:"token comment"},"///         {{#each n in numbers where n > 5 orderby n skip 1 take 2}} {{it}}{{else}}no numbers > 5{{/each}}"),a(`
`),n("span",{class:"token comment"},"/// </summary>"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"TemplateEachBlock"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},"TemplateBlock")]),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token range operator"},".."),n("span",{class:"token punctuation"},"."),a(),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),j=n("p",null,[a("By using "),n("code",null,"ParseJsExpression()"),a(' to parse expressions after each "LINQ modifier", '),n("code",null,"each"),a(" supports evaluating complex JavaScript expressions in each of its LINQ querying modifiers, e.g:")],-1),L=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#each"),a(),n("span",{class:"token variable"},"c"),a(),n("span",{class:"token variable"},"in"),a(),n("span",{class:"token variable"},"customers"),a(`
        `),n("span",{class:"token variable"},"where"),a(),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"City"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token string"},"'London'"),a(),n("span",{class:"token variable"},"and"),a(),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Country"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token string"},"'UK'"),a(),n("span",{class:"token variable"},"orderby"),a(),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"CompanyName"),a(),n("span",{class:"token variable"},"descending"),a(`
        `),n("span",{class:"token variable"},"skip"),a(),n("span",{class:"token number"},"3"),a(),n("span",{class:"token variable"},"-"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),a(),n("span",{class:"token variable"},"-"),a(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),a(`
        `),n("span",{class:"token variable"},"take"),a(),n("span",{class:"token number"},"1"),a(),n("span",{class:"token punctuation"},"+"),a(),n("span",{class:"token number"},"2"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"index"),a(),n("span",{class:"token punctuation"},"+"),a(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"."),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"CustomerId"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token variable"},"from"),a(),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"b"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"CompanyName"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"b"),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"-"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"City"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"c"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Country"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"."),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"each"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),O=s('<h5 id="custom-bindings" tabindex="-1">Custom bindings <a class="header-anchor" href="#custom-bindings" aria-hidden="true">#</a></h5><div><p>When using a custom binding like <code>{{#each c in customers}}</code> above, the element is only accessible with the custom <code>c</code> binding which is more efficient when only needing to reference a subset of the element&#39;s properties as it avoids adding each of the elements properties in the items execution scope.</p><p>For more live previews showcasing advanced usages of <code>{{#each}}</code>, checkout the <a href="https://sharpscript.net/linq/restriction-operators" target="_blank" rel="noopener noreferrer">LINQ Examples</a>.</p></div><h3 id="raw" tabindex="-1">raw <a class="header-anchor" href="#raw" aria-hidden="true">#</a></h3>',3),W=n("div",null,[n("p",null,[a("The "),n("code",null,"{{#raw}}"),a(" block is similar to "),n("a",{href:"https://handlebarsjs.com/block_helpers.html#raw-blocks",target:"_blank",rel:"noopener noreferrer"},"handlebars.js's raw-helper"),a(" which captures the template's raw text content instead of having its content evaluated, making it ideal for emitting content that could contain template expressions like client-side JavaScript or template expressions that shouldn't be evaluated on the server such as Vue, Angular or Ember templates:")]),n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#raw}}"),a(`
`),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"div"),a(),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},"="),n("span",{class:"token string"},'"app"'),n("span",{class:"token punctuation"},">"),a(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"message"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"div"),n("span",{class:"token punctuation"},">"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"raw"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])]),n("p",null,[a("When called with no arguments it will render its unprocessed raw text contents. When called with a single argument, e.g. "),n("code",null,"{{#raw varname}}"),a(" will instead save the raw text contents to the specified global ("),n("code",null,"PageResult"),a(") variable and lastly when called with the "),n("code",null,"appendTo"),a(" modifier it will append its contents to the existing variable, or initialize it if it doesn't exist.")]),n("p",null,[a("This is now the preferred approach used in all "),n("a",{href:"https://docs.servicestack.net/templates-websites",target:"_blank",rel:"noopener noreferrer"},".NET Core and .NET Framework Web Templates"),a(" for pages and partials to append any custom JavaScript script blocks they need to include in the page, e.g:")]),n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#raw"),a(),n("span",{class:"token variable"},"appendTo"),a(),n("span",{class:"token variable"},"scripts"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"script"),n("span",{class:"token punctuation"},">"),a(`
    `),n("span",{class:"token punctuation"},"/"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),a(`
`),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"script"),n("span",{class:"token punctuation"},">"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"raw"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),J=n("p",null,[a("Where any captured custom scripts are rendered at the "),n("a",{href:"https://github.com/NetCoreTemplates/sharp/blob/8a082a299d59a0b53b9b6e0a07a6fbabf7bf6e2c/MyApp/wwwroot/_layout.html#L49",target:"_blank",rel:"noopener noreferrer"},"bottom of _layout.html"),a(" with:")],-1),H=n("div",null,[n("div",{class:"language-html"},[n("pre",{"v-pre":""},[n("code",null,[a("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),a(),n("span",{class:"token attr-name"},"src"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("/assets/js/default.js"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"}),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")]),a(`

    {{ scripts | raw }}
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("body")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("html")]),n("span",{class:"token punctuation"},">")]),a(`
`)])])])],-1),F=n("p",null,[a("The implementation to support each of these usages is contained within "),n("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Templates/Blocks/TemplateRawBlock.cs",target:"_blank",rel:"noopener noreferrer"},"TemplateRawBlock.cs"),a(" which inspects the "),n("code",null,"block.Argument"),a(" to determine whether it should capture the contents into the specified variable or write its raw string contents directly to the "),n("code",null,"OutputStream"),a(".")],-1),z=n("div",null,[n("div",{class:"language-csharp"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token comment"},"/// <summary>"),a(`
`),n("span",{class:"token comment"},"/// Special block which captures the raw body as a string fragment"),a(`
`),n("span",{class:"token comment"},"///"),a(`
`),n("span",{class:"token comment"},"/// Usages: {{#raw}}emit {{ verbatim }} body{{/raw}}"),a(`
`),n("span",{class:"token comment"},"///         {{#raw varname}}assigned to varname{{/raw}}"),a(`
`),n("span",{class:"token comment"},"///         {{#raw appendTo varname}}appended to varname{{/raw}}"),a(`
`),n("span",{class:"token comment"},"/// </summary>"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"TemplateRawBlock"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},"TemplateBlock")]),a(`
`)])])])],-1),V=n("h3",{id:"capture",tabindex:"-1"},[a("capture "),n("a",{class:"header-anchor",href:"#capture","aria-hidden":"true"},"#")],-1),U=n("div",null,[n("p",null,[a("The "),n("code",null,"{{#capture}}"),a(" block in "),n("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Templates/Blocks/TemplateCaptureBlock.cs",target:"_blank",rel:"noopener noreferrer"},"TemplateCaptureBlock.cs"),a(" is similar to the raw block except instead of using its raw text contents, it evaluates its contents and captures the output. It also supports evaluating the contents with scoped arguments where by each property in the object dictionary is added in the scoped arguments that the template is executed with:")]),n("div",{class:"language-csharp"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token comment"},"/// <summary>"),a(`
`),n("span",{class:"token comment"},"/// Captures the output and assigns it to the specified variable."),a(`
`),n("span",{class:"token comment"},"/// Accepts an optional Object Dictionary as scope arguments when evaluating body."),a(`
`),n("span",{class:"token comment"},"///"),a(`
`),n("span",{class:"token comment"},"/// Usages: {{#capture output}} {{#each args}} - [{{it}}](/path?arg={{it}}) {{/each}} {{/capture}}"),a(`
`),n("span",{class:"token comment"},"///         {{#capture output {nums:[1,2,3]} }} {{#each nums}} {{it}} {{/each}} {{/capture}}"),a(`
`),n("span",{class:"token comment"},"///         {{#capture appendTo output {nums:[1,2,3]} }} {{#each nums}} {{it}} {{/each}} {{/capture}}"),a(`
`),n("span",{class:"token comment"},"/// </summary>"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"TemplateCaptureBlock"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},"TemplateBlock")]),a(`
`)])])]),n("p",null,[a("With this we can dynamically generate some markdown, capture its contents and convert the resulting markdown to html using the "),n("code",null,"markdown"),a(" Filter transformer:")]),n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#capture"),a(),n("span",{class:"token variable"},"todoMarkdown"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"items"),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"#"),n("span",{class:"token punctuation"},"#"),a(),n("span",{class:"token variable"},"TODO"),a(),n("span",{class:"token variable"},"List"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"#"),n("span",{class:"token variable"},"each"),a(),n("span",{class:"token variable"},"items"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token variable"},"-"),a(),n("span",{class:"token variable"},"Item"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"each"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"capture"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"todoMarkdown"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"markdown"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])]),n("h3",{id:"markdown",tabindex:"-1"},[a("markdown "),n("a",{class:"header-anchor",href:"#markdown","aria-hidden":"true"},"#")]),n("p",null,[a("The "),n("code",null,"{{#markdown}}"),a(" block in "),n("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack/MarkdownTemplatePlugin.cs",target:"_blank",rel:"noopener noreferrer"},"MarkdownTemplatePlugin.cs"),a(" makes it even easier to embed markdown content directly in web pages which works as you'd expect where content in a "),n("code",null,"markdown"),a(" block is converted into HTML:")]),n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#markdown}}"),a(`
`),n("span",{class:"token block keyword"},"##"),a(),n("span",{class:"token variable"},"TODO"),a(),n("span",{class:"token variable"},"List"),a(`
  `),n("span",{class:"token variable"},"-"),a(),n("span",{class:"token variable"},"Item"),a(),n("span",{class:"token number"},"1"),a(`
  `),n("span",{class:"token variable"},"-"),a(),n("span",{class:"token variable"},"Item"),a(),n("span",{class:"token number"},"2"),a(`
  `),n("span",{class:"token variable"},"-"),a(),n("span",{class:"token variable"},"Item"),a(),n("span",{class:"token number"},"3"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"markdown"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])]),n("p",null,[a("Which is now the easiest and preferred way to embed Markdown content in content-rich hybrid web pages like "),n("a",{href:"https://github.com/NetCoreTemplates/bare-app/blob/master/rockstars/dead/cobain/index.html",target:"_blank",rel:"noopener noreferrer"},"Razor Rockstars content pages"),a(", or even the "),n("a",{href:"https://github.com/NetCoreApps/TemplatePages/blob/master/src/wwwroot/docs/blocks.html",target:"_blank",rel:"noopener noreferrer"},"blocks.html WebPage itself"),a(" which makes extensive use of markdown.")]),n("p",null,[a("As "),n("code",null,"markdown"),a(" block only supports 2 usages its implementation is much simpler than the "),n("code",null,"capture"),a(" block above:")]),n("div",{class:"language-csharp"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token comment"},"/// <summary>"),a(`
`),n("span",{class:"token comment"},"/// Converts markdown contents to HTML using the configured MarkdownConfig.Transformer."),a(`
`),n("span",{class:"token comment"},"/// If a variable name is specified the HTML output is captured and saved instead. "),a(`
`),n("span",{class:"token comment"},"///"),a(`
`),n("span",{class:"token comment"},"/// Usages: {{#markdown}} ## The Heading {{/markdown}}"),a(`
`),n("span",{class:"token comment"},"///         {{#markdown content}} ## The Heading {{/markdown}} HTML: {{content}}"),a(`
`),n("span",{class:"token comment"},"/// </summary>"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"TemplateMarkdownBlock"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},"TemplateBlock")]),a(`
`),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"string")]),a(" Name "),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token string"},'"markdown"'),n("span",{class:"token punctuation"},";"),a(`
    
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"override"),a(),n("span",{class:"token keyword"},"async"),a(),n("span",{class:"token return-type class-name"},"Task"),a(),n("span",{class:"token function"},"WriteAsync"),n("span",{class:"token punctuation"},"("),a(`
        `),n("span",{class:"token class-name"},"TemplateScopeContext"),a(" scope"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"PageBlockFragment"),a(" block"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"CancellationToken"),a(" token"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" strFragment "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"("),a("PageStringFragment"),n("span",{class:"token punctuation"},")"),a("block"),n("span",{class:"token punctuation"},"."),a("Body"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`

        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),a("block"),n("span",{class:"token punctuation"},"."),a("Argument"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"IsNullOrWhiteSpace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
        `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token function"},"Capture"),n("span",{class:"token punctuation"},"("),a("scope"),n("span",{class:"token punctuation"},","),a(" block"),n("span",{class:"token punctuation"},","),a(" strFragment"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token keyword"},"else"),a(`
        `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"await"),a(" scope"),n("span",{class:"token punctuation"},"."),a("OutputStream"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"WriteAsync"),n("span",{class:"token punctuation"},"("),a("MarkdownConfig"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Transform"),n("span",{class:"token punctuation"},"("),a("strFragment"),n("span",{class:"token punctuation"},"."),a("ValueString"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(" token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token keyword"},"static"),a(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"void")]),a(),n("span",{class:"token function"},"Capture"),n("span",{class:"token punctuation"},"("),a(`
        `),n("span",{class:"token class-name"},"TemplateScopeContext"),a(" scope"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"PageBlockFragment"),a(" block"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"PageStringFragment"),a(" strFragment"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" literal "),n("span",{class:"token operator"},"="),a(" block"),n("span",{class:"token punctuation"},"."),a("Argument"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"AdvancePastWhitespace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        literal `),n("span",{class:"token operator"},"="),a(" literal"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ParseVarName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"out"),a(),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),a(" nameString "),n("span",{class:"token operator"},"="),a(" name"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ToString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
        scope`),n("span",{class:"token punctuation"},"."),a("PageResult"),n("span",{class:"token punctuation"},"."),a("Args"),n("span",{class:"token punctuation"},"["),a("nameString"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" MarkdownConfig"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Transform"),n("span",{class:"token punctuation"},"("),a("strFragment"),n("span",{class:"token punctuation"},"."),a("ValueString"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ToRawString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),$=s(`<h4 id="use-alternative-markdown-implementation" tabindex="-1">Use Alternative Markdown Implementation <a class="header-anchor" href="#use-alternative-markdown-implementation" aria-hidden="true">#</a></h4><p>By default ServiceStack uses an interned implementation of <code>MarkdownDeep</code> for rendering markdown, you can get ServiceStack to use an alternate Markdown implementation by overriding <code>MarkdownConfig.Transformer</code>.</p><p>E.g. to use the richer <a href="https://github.com/lunet-io/markdig" target="_blank" rel="noopener noreferrer">Markdig</a> implementation, install the <a href="https://www.nuget.org/packages/Markdig/" target="_blank" rel="noopener noreferrer">Markdig</a> NuGet package:</p><pre><code>PM&gt; Install-Package Markdig
</code></pre><p>Then assign a custom <code>IMarkdownTransformer</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MarkdigTransformer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMarkdownTransformer</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name">Markdig<span class="token punctuation">.</span>MarkdownPipeline</span> Pipeline <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> 
        Markdig<span class="token punctuation">.</span>MarkdownExtensions<span class="token punctuation">.</span><span class="token function">UseAdvancedExtensions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Markdig<span class="token punctuation">.</span>MarkdownPipelineBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Transform</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> markdown<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Markdig<span class="token punctuation">.</span>Markdown<span class="token punctuation">.</span><span class="token function">ToHtml</span><span class="token punctuation">(</span>markdown<span class="token punctuation">,</span> Pipeline<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MarkdownConfig<span class="token punctuation">.</span>Transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MarkdigTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="partial" tabindex="-1">partial <a class="header-anchor" href="#partial" aria-hidden="true">#</a></h3>`,7),Q=n("div",null,[n("p",null,[a("The "),n("code",null,"{{#partial}}"),a(" block in "),n("a",{href:"https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/Templates/Blocks/TemplatePartialBlock.cs",target:"_blank",rel:"noopener noreferrer"},"TemplatePartialBlock.cs"),a(" lets you create In Memory partials which is useful when working with partial filters like "),n("code",null,"selectPartial"),a(" as it lets you declare multiple partials within the same page, instead of needing to define them in individual files, e.g:")]),n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#partial"),a(),n("span",{class:"token variable"},"order"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token variable"},"Order"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"OrderId"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"OrderDate"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dateFormat"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"partial"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"#"),n("span",{class:"token variable"},"partial"),a(),n("span",{class:"token variable"},"customer"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token variable"},"Customer"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"CustomerId"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"CompanyName"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"raw"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Orders"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"selectPartial"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"order"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"partial"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"customers"),a(` 
    `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"where"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Region"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token string"},"'WA'"),a(` 
    `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"waCustomers"),a(` 
 `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
 `),n("span",{class:"token variable"},"Customers"),a(),n("span",{class:"token variable"},"from"),a(),n("span",{class:"token variable"},"Washington"),a(),n("span",{class:"token variable"},"and"),a(),n("span",{class:"token variable"},"their"),a(),n("span",{class:"token variable"},"orders"),n("span",{class:"token punctuation"},":"),a(`
 `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"waCustomers"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"selectPartial"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"customer"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),G=s('<p>See docs on <a href="https://sharpscript.net/docs/partials#inline-partials" target="_blank" rel="noopener noreferrer">Inline partials</a> for a Live comparison of using in memory partials.</p><h3 id="html" tabindex="-1">html <a class="header-anchor" href="#html" aria-hidden="true">#</a></h3><p>The purpose of the html blocks is to pack a suite of generically useful functionality commonly used when generating html. All html blocks inherit the same functionality with blocks registered for the most popular HTML elements, currently:</p><p><code>ul</code>, <code>ol</code>, <code>li</code>, <code>div</code>, <code>p</code>, <code>form</code>, <code>input</code>, <code>select</code>, <code>option</code>, <code>textarea</code>, <code>button</code>, <code>table</code>, <code>tr</code>, <code>td</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>, <code>dl</code>, <code>dt</code>, <code>dd</code>, <code>span</code>, <code>a</code>, <code>img</code>, <code>em</code>, <code>b</code>, <code>i</code>, <code>strong</code>.</p><p>Ultimately they reduce boilerplate, e.g. you can generate a menu list with a single block:</p>',5),K=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#ul"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"each"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"items"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'menu'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"class"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'nav'"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(` 
    `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"li"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"li"),n("span",{class:"token punctuation"},">"),a(` 
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"ul"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),X=n("p",null,"A more advanced example showcasing many of its different features is below:",-1),Y=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#ul"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"if"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"hasAccess"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"each"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"items"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"where"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'Age > 27'"),n("span",{class:"token punctuation"},","),a(` 
        `),n("span",{class:"token variable"},"class"),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'nav'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"!"),n("span",{class:"token variable"},"disclaimerAccepted"),a(),n("span",{class:"token variable"},"?"),a(),n("span",{class:"token string"},"'blur'"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"menu-$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"`"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"selected"),n("span",{class:"token punctuation"},":"),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"#"),n("span",{class:"token variable"},"li"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"class"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"alt"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"isOdd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"index"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"active"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token variable"},"highlight"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"li"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"else"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"div"),n("span",{class:"token punctuation"},">"),n("span",{class:"token variable"},"no"),a(),n("span",{class:"token variable"},"items"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"div"),n("span",{class:"token punctuation"},">"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"ul"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),Z=s('<p>This example utilizes many of the features in html blocks, namely:</p><ul><li><code>if</code> - only render the template if truthy</li><li><code>each</code> - render the template for each item in the collection</li><li><code>where</code> - filter the collection</li><li><code>it</code> - change the name of each element <code>it</code> binding</li><li><code>class</code> - special property implementing <a href="https://vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="noopener noreferrer">Vue&#39;s special class bindings</a> where an <strong>object literal</strong> can be used to emit a list of class names for all <strong>truthy</strong> properties, an <strong>array</strong> can be used to display a list of class names or you can instead use a <strong>string</strong> of class names.</li></ul><p>All other properties like <code>id</code> and <code>selected</code> are treated like HTML attributes where if the property is a boolean like <code>selected</code> it&#39;s only displayed if it&#39;s <code>true</code> otherwise all other html attribute names and values are emitted as normal.</p><p>For a better illustration we can implement the same functionality above without using any html blocks:</p>',4),nn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#if"),a(),n("span",{class:"token variable"},"hasAccess"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"items"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"where"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token variable"},"it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Age"),a(),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token number"},"27"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"items"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"#"),n("span",{class:"token variable"},"if"),a(),n("span",{class:"token punctuation"},"!"),n("span",{class:"token variable"},"isEmpty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"items"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"ul"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'nav'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"!"),n("span",{class:"token variable"},"disclaimerAccepted"),a(),n("span",{class:"token variable"},"?"),a(),n("span",{class:"token string"},"'blur'"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlClass"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},"="),n("span",{class:"token string"},'"menu-{{id}}"'),n("span",{class:"token punctuation"},">"),a(`
        `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"#"),n("span",{class:"token variable"},"each"),a(),n("span",{class:"token variable"},"items"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
            `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"li"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"alt"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"isOdd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"index"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"active"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token variable"},"highlight"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlClass"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"Name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"li"),n("span",{class:"token punctuation"},">"),a(`
        `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"each"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"ul"),n("span",{class:"token punctuation"},">"),a(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"else"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"div"),n("span",{class:"token punctuation"},">"),n("span",{class:"token variable"},"no"),a(),n("span",{class:"token variable"},"items"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"div"),n("span",{class:"token punctuation"},">"),a(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"if"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"if"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),an=s(`<p>The same functionality using C# Razor with the latest C# language features enabled can be implemented with:</p><div class="language-csharp"><pre><code>@<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> persons <span class="token operator">=</span> <span class="token punctuation">(</span>items <span class="token keyword">as</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">&gt;</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
@<span class="token keyword">if</span> <span class="token punctuation">(</span>hasAccess<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>persons<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span><span class="token class-name">ul</span> id<span class="token operator">=</span><span class="token string">&quot;menu-@id&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;nav @(!disclaimerAccepted ? &quot;</span>hide<span class="token string">&quot; : &quot;</span>&quot;<span class="token punctuation">)</span>&quot;<span class="token operator">&gt;</span>
            @<span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> person <span class="token keyword">in</span> persons<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;@(index++ % 2 == 1 ? &quot;</span>alt <span class="token string">&quot; : &quot;</span>&quot; <span class="token punctuation">)</span>@<span class="token punctuation">(</span>person<span class="token punctuation">.</span>Name <span class="token operator">==</span> activeName <span class="token punctuation">?</span> <span class="token string">&quot;active&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>&quot;<span class="token operator">&gt;</span>
                    @person<span class="token punctuation">.</span>Name
                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
            <span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>no items<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="removing-blocks" tabindex="-1">Removing Blocks <a class="header-anchor" href="#removing-blocks" aria-hidden="true">#</a></h3><p>Like everything else in Templates, all built-in Blocks can be removed. To make it easy to remove groups of related blocks you can just remove the plugin that registered them using the <code>RemovePlugins()</code> API, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TemplateContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RemovePlugins</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token keyword">is</span> <span class="token class-name">TemplateDefaultBlocks</span><span class="token punctuation">)</span> <span class="token comment">// Remove default blocks</span>
    <span class="token punctuation">.</span><span class="token function">RemovePlugins</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token keyword">is</span> <span class="token class-name">TemplateHtmlBlocks</span><span class="token punctuation">)</span>    <span class="token comment">// Remove all html blocks</span>
    <span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Or use the <code>OnAfterPlugins</code> callback to remove any individual blocks or filters that were added by any plugin.</p><p>E.g. the <code>capture</code> block can be removed with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TemplateContext</span> <span class="token punctuation">{</span>
        OnAfterPlugins <span class="token operator">=</span> ctx <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">RemoveBlocks</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;capture&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="page-based-routing" tabindex="-1">Page Based Routing <a class="header-anchor" href="#page-based-routing" aria-hidden="true">#</a></h2><p>Another convenient feature that makes developing websites with Templates more enjoyable is its new support for conventional page-based routing which enables <strong>pretty urls</strong> inferred from the pages file and directory names.</p><p>To recap each page can be requested with or without its <strong>.html</strong> extension:</p><table class="table"><thead><tr><th>path</th><th>page</th></tr></thead><tbody><tr><td><a href="http://blog.web-app.io/db">/db</a></td><td>\xA0</td></tr><tr><td><a href="http://blog.web-app.io/db.html">/db.html</a></td><td><a href="https://github.com/sharp-apps/blog/blob/master/db.html">/db.html</a></td></tr><tr><td><a href="http://blog.web-app.io/posts/new">/posts/new</a></td><td>\xA0</td></tr><tr><td><a href="http://blog.web-app.io/posts/new.html">/posts/new.html</a></td><td><a href="https://github.com/sharp-apps/blog/blob/master/posts/new.html">/posts/new.html</a></td></tr></tbody></table><p>The default route <code>/</code> maps to the <code>index.html</code> in the directory if it exists, e.g:</p><table class="table"><thead><tr><th>path</th><th>page</th></tr></thead><tbody><tr><td><a href="http://blog.web-app.io/">/</a></td><td><a href="https://github.com/sharp-apps/blog/blob/master/index.html">/index.html</a></td></tr><tr><td><a href="http://blog.web-app.io/index.html">/index.html</a></td><td><a href="https://github.com/sharp-apps/blog/blob/master/index.html">/index.html</a></td></tr></tbody></table><h3 id="dynamic-page-routes" tabindex="-1">Dynamic Page Routes <a class="header-anchor" href="#dynamic-page-routes" aria-hidden="true">#</a></h3><p>In addition to these static conventions, Template Pages now supports Nuxt-like <a href="https://nuxtjs.org/guide/routing#dynamic-routes" target="_blank" rel="noopener noreferrer">Dynamic Routes</a> where any <strong>file</strong> or <strong>directory</strong> names prefixed with an <strong>_underscore</strong> enables a wildcard path which assigns the matching path component to the arguments name:</p><table class="table"><thead><tr><th>path</th><th>page</th><th>arguments</th></tr></thead><tbody><tr><td><a href="http://blog.web-app.io/">/ServiceStack</a></td><td><a href="https://github.com/sharp-apps/blog/blob/master/_user/index.html">/_user/index.html</a></td><td>user=ServiceStack</td></tr><tr><td><a href="http://blog.web-app.io/posts/markdown-example">/posts/markdown-example</a></td><td><a href="https://github.com/sharp-apps/blog/blob/master/posts/_slug/index.html">/posts/_slug/index.html</a></td><td>slug=markdown-example</td></tr><tr><td><a href="http://blog.web-app.io/posts/markdown-example/edit">/posts/markdown-example/edit</a></td><td><a href="https://github.com/sharp-apps/blog/blob/master/posts/_slug/edit.html">/posts/_slug/edit.html</a></td><td>slug=markdown-example</td></tr></tbody></table><h3 id="layout-and-partial-recommended-naming-conventions" tabindex="-1">Layout and partial recommended naming conventions <a class="header-anchor" href="#layout-and-partial-recommended-naming-conventions" aria-hidden="true">#</a></h3><p>As the <strong>_underscore</strong> prefix for declaring wildcard pages is also what is used to declare &quot;hidden&quot; pages, to distinguish them from hidden partials and layouts, the recommendation is for them to include <code>layout</code> and <code>partial</code> their name, e,g:</p><ul><li>_layout.html</li><li>_alt-layout.html</li><li>_menu-partial.html</li></ul><p>Pages with <code>layout</code> or <code>partial</code> in their name remain hidden and are ignored in wildcard path resolution.</p><p>If following the recommended <code>_{name}-partial.html</code> naming convention, you&#39;ll be able to reference them using just their name:</p>`,22),sn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token string"},"'menu'"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"partial"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a("          "),n("span",{class:"token punctuation"},"/"),n("span",{class:"token punctuation"},"/"),a(),n("span",{class:"token variable"},"Equivalent"),a(),n("span",{class:"token variable"},"to"),n("span",{class:"token punctuation"},":"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token string"},"'_menu-partial'"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"partial"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),en=s('<h2 id="init-pages" tabindex="-1">Init Pages <a class="header-anchor" href="#init-pages" aria-hidden="true">#</a></h2><p>As Template Pages continues growing in functionality there&#39;s becoming less places in which you&#39;d need to reach for C# to be able to handle, support for Init pages reduces the need even further.</p><p>Just as how <code>Global.asax.cs</code> can be used to run Startup initialization logic in <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web Applications and <code>Startup.cs</code> in .NET Core Apps, you can now add a <code>/_init.html</code> page for Templates logic that&#39;s only executed once on Startup.</p><p>This is used in the Blog Web App&#39;s <a href="https://github.com/sharp-apps/blog/blob/master/_init.html" target="_blank" rel="noopener noreferrer">_init.html</a> where it will create a new <code>blog.sqlite</code> database if it doesn&#39;t exist seeded with the <code>UserInfo</code> and <code>Posts</code> Tables and initial data, e.g:</p>',4),tn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a("  "),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"CREATE"),a(),n("span",{class:"token variable"},"TABLE"),a(),n("span",{class:"token variable"},"IF"),a(),n("span",{class:"token variable"},"NOT"),a(),n("span",{class:"token variable"},"EXISTS"),a(),n("span",{class:"token string"},'"UserInfo"'),a(` 
    `),n("span",{class:"token punctuation"},"("),a(`
        `),n("span",{class:"token string"},'"UserName"'),a(),n("span",{class:"token variable"},"VARCHAR"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8000"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token variable"},"PRIMARY"),a(),n("span",{class:"token variable"},"KEY"),n("span",{class:"token punctuation"},","),a(` 
        `),n("span",{class:"token string"},'"DisplayName"'),a(),n("span",{class:"token variable"},"VARCHAR"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8000"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token variable"},"NULL"),n("span",{class:"token punctuation"},","),a(` 
        `),n("span",{class:"token string"},'"AvatarUrl"'),a(),n("span",{class:"token variable"},"VARCHAR"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8000"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token variable"},"NULL"),n("span",{class:"token punctuation"},","),a(` 
        `),n("span",{class:"token string"},'"AvatarUrlLarge"'),a(),n("span",{class:"token variable"},"VARCHAR"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8000"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token variable"},"NULL"),n("span",{class:"token punctuation"},","),a(` 
        `),n("span",{class:"token string"},'"Created"'),a(),n("span",{class:"token variable"},"VARCHAR"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8000"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token variable"},"NOT"),a(),n("span",{class:"token variable"},"NULL"),n("span",{class:"token punctuation"},","),a(`
        `),n("span",{class:"token string"},'"Modified"'),a(),n("span",{class:"token variable"},"VARCHAR"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8000"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token variable"},"NOT"),a(),n("span",{class:"token variable"},"NULL"),a(`
    `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),n("span",{class:"token punctuation"},"`"),a(`    
    `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dbExec"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"dbScalar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"SELECT"),a(),n("span",{class:"token variable"},"COUNT"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"*"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token variable"},"FROM"),a(),n("span",{class:"token variable"},"Post"),n("span",{class:"token punctuation"},"`"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"postsCount"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"#"),n("span",{class:"token variable"},"if"),a(),n("span",{class:"token variable"},"postsCount"),a(),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token number"},"0"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),a(`
    `),n("span",{class:"token variable"},"Seed"),a(),n("span",{class:"token variable"},"with"),a(),n("span",{class:"token variable"},"initial"),a(),n("span",{class:"token variable"},"UserInfo"),a(),n("span",{class:"token variable"},"and"),a(),n("span",{class:"token variable"},"Post"),a(),n("span",{class:"token variable"},"data"),a(`
    `),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),n("span",{class:"token punctuation"},"="),a(`

    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"if"),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"htmlError"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),on=n("p",null,[a("The output of the "),n("code",null,"_init"),a(" page is captured in the "),n("code",null,"initout"),a(" argument which can be later inspected as a normal template argument as seen in "),n("a",{href:"https://github.com/sharp-apps/blog/blob/master/log.html",target:"_blank",rel:"noopener noreferrer"},"log.html"),a(":")],-1),pn=n("div",null,[n("div",{class:"language-html"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),n("span",{class:"token punctuation"},">")]),a(`
    Output from init.html:

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("pre")]),n("span",{class:"token punctuation"},">")]),a("{{initout | raw}}"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("pre")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")]),a(`
`)])])]),n("p",null,[a("If there was an Exception with any of the SQL Statements it will be displayed in the "),n("code",null,"{{ htmlError }}"),a(" filter which can be later viewed in the "),n("a",{href:"http://blog.web-app.io/log",target:"_blank",rel:"noopener noreferrer"},"/log"),a(" page above. ::")]),n("h2",{id:"buffered-view-pages",tabindex:"-1"},[a("Buffered View Pages "),n("a",{class:"header-anchor",href:"#buffered-view-pages","aria-hidden":"true"},"#")]),n("p",null,[a("After noticing performance regressions from non-buffering Templates output when hosted behind a reverse proxy, Template Pages served by "),n("code",null,"SharpPageFeature"),a(" are now being buffered. Whilst having Templates writing directly to the OutputStream showed marginal gains when accessed directly from Kestrel, they had a negative impact on page download speed when running behind a reverse proxy which is the current recommendation for hosting .NET Core Web Apps.")]),n("p",null,[a("As they don't yield performance improvements universally, Template Pages served by "),n("a",{href:"https://sharpscript.net/docs/sharp-pages",target:"_blank",rel:"noopener noreferrer"},"ServiceStack's SharpPageFeature"),a(" are now buffered before being written to the HTTP OutputStream (using a pooled MemoryStream), this change also makes Template Pages more flexible which can implement features like Dynamic Sharp APIs that weren't possible before.")]),n("blockquote",null,[n("p",null,[a("Note: only "),n("code",null,"*.html"),a(" Pages evaluated by ServiceStack in response to HTTP Requests are buffered, i.e. Rendering Templates directly using "),n("code",null,"PageResult"),a(" or "),n("code",null,"context.EvaluateTemplate()"),a(" continue to serialize to the specified OutputStream without buffering.")])]),n("h2",{id:"dynamic-sharp-apis",tabindex:"-1"},[a("Dynamic Sharp APIs "),n("a",{class:"header-anchor",href:"#dynamic-sharp-apis","aria-hidden":"true"},"#")]),n("p",null,[a("In addition to being productive dynamic language for generating dynamic HTML pages, Template Pages can also be used to rapidly develop Web APIs which can take advantage of the new support for "),n("a",{href:"#page-based-routing"},"Dynamic Page Based Routes"),a(" to rapidly develop data-driven JSON APIs and make them available under ideal pretty URLs whilst utilizing the same Live Development workflow that doesn't need to define any C# Types or execute any builds - as all development can happen in real-time whilst the App is running.")]),n("p",null,[a("The only difference between a Template Page that "),n("strong",null,"generates HTML"),a(" or a Template Page that "),n("strong",null,"returns an API Response"),a(" is that Sharp APIs return a value using the "),n("code",null,"return"),a(" filter.")]),n("p",null,[a("For comparison, to create a "),n("strong",null,"Hello World"),a(" C# ServiceStack Service you would typically create a Request DTO, Response DTO and a Service implementation:")]),n("div",{class:"language-csharp"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token punctuation"},"["),n("span",{class:"token attribute"},[n("span",{class:"token class-name"},"Route"),n("span",{class:"token attribute-arguments"},[n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/hello/{Name}"'),n("span",{class:"token punctuation"},")")])]),n("span",{class:"token punctuation"},"]"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"Hello"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},[a("IReturn"),n("span",{class:"token punctuation"},"<"),a("HelloResponse"),n("span",{class:"token punctuation"},">")])]),a(`
`),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"string")]),a(" Name "),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token keyword"},"get"),n("span",{class:"token punctuation"},";"),a(),n("span",{class:"token keyword"},"set"),n("span",{class:"token punctuation"},";"),a(),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"HelloResponse"),a(`
`),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"string")]),a(" Result "),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token keyword"},"get"),n("span",{class:"token punctuation"},";"),a(),n("span",{class:"token keyword"},"set"),n("span",{class:"token punctuation"},";"),a(),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"HelloService"),a(),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token type-list"},[n("span",{class:"token class-name"},"Service")]),a(`
`),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token return-type class-name"},[n("span",{class:"token keyword"},"object")]),a(),n("span",{class:"token function"},"Any"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Hello"),a(" request"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token constructor-invocation class-name"},"HelloResponse"),a(),n("span",{class:"token punctuation"},"{"),a(" Result "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token interpolation-string"},[n("span",{class:"token string"},'$"Hello, '),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token expression language-csharp"},[a("request"),n("span",{class:"token punctuation"},"."),a("Name")]),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},'!"')]),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])])]),n("h3",{id:"hello-api-page",tabindex:"-1"},[a("/hello API Page "),n("a",{class:"header-anchor",href:"#hello-api-page","aria-hidden":"true"},"#")]),n("blockquote",{name:""},[n("p",null,"Usage: /hello/")]),n("p",null,[a("An API which returns the same wire response as above can be implemented in Sharp APIs by creating a page at "),n("a",{href:"https://github.com/sharp-apps/blog/blob/master/hello/_name/index.html",target:"_blank",rel:"noopener noreferrer"},"/hello/_name/index.html"),a(" that includes the 1-liner:")]),n("div",{"v-pre":""},[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"result"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"Hello"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"!"),n("span",{class:"token punctuation"},"`"),a(),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])])],-1),cn=s('<p>Which supports the same content negotiation as a ServiceStack Service where calling it in a browser will generate a <a href="https://docs.servicestack.net/html5reportformat" target="_blank" rel="noopener noreferrer">human-friendly HTML Page</a>:</p><ul><li><a href="http://blog.web-app.io/hello/World" target="_blank" rel="noopener noreferrer">/hello/World</a></li></ul><p>Or calling it with a JSON HTTP client containing <code>Accept: application/json</code> HTTP Header or with a <code>?format=json</code> query string will render the API response in the JSON Format:</p><ul><li><a href="http://blog.web-app.io/hello/World?format=json" target="_blank" rel="noopener noreferrer">/hello/World?format=json</a></li></ul><p>Alternatively you can force a JSON Response by specifying the Content Type in the return arguments:</p>',5),ln=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"result"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"Hello"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"!"),n("span",{class:"token punctuation"},"`"),a(),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"format"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},"'json'"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(` 
`),n("span",{class:"token punctuation"},"/"),n("span",{class:"token punctuation"},"/"),a(),n("span",{class:"token variable"},"Equivalent"),a(),n("span",{class:"token variable"},"to"),n("span",{class:"token punctuation"},":"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"result"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"Hello"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"name"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"!"),n("span",{class:"token punctuation"},"`"),a(),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"contentType"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},"'application/json'"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),rn=n("p",null,[a("More API examples showing the versatility of this feature is contained in the new "),n("a",{href:"http://blog.web-app.io",target:"_blank",rel:"noopener noreferrer"},"blog.web-app.io"),a(" which only uses Templates and Dynamic Sharp APIs to implement all of its functionality.")],-1),un=n("h3",{id:"preview-api-page",tabindex:"-1"},[a("/preview API Page "),n("a",{class:"header-anchor",href:"#preview-api-page","aria-hidden":"true"},"#")],-1),kn=n("blockquote",{templates:""},[n("p",null,"Usage: /preview?content=")],-1),dn=n("p",null,[a("The "),n("a",{href:"https://github.com/sharp-apps/blog/blob/master/preview.html",target:"_blank",rel:"noopener noreferrer"},"/preview.html"),a(" API page uses this to force a plain-text response with:")],-1),hn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"content"),a("  "),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"evalTemplate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"use"),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"plugins"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'MarkdownTemplatePlugin'"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"response"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"response"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"contentType"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'text/plain'"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),mn=n("p",null,[a("The preview API above is what provides the new "),n("a",{href:"http://blog.web-app.io/",target:"_blank",rel:"noopener noreferrer"},"Blog Web App's"),a(" Live Preview feature where it will render any "),n("code",null,"#Script"),a(" provided in the "),n("strong",null,"content"),a(" Query String or HTTP Post Form Data, e.g:")],-1),gn=n("div",null,[n("div",{class:"language-html"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("ul")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("li")]),n("span",{class:"token punctuation"},">")]),a(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("a")]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("http://blog.web-app.io/preview?content={{10|times|select:{pow(index,2)},}}"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
            /preview?content={{10|times|select:{pow(index,2)},}}
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("a")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("li")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("ul")]),n("span",{class:"token punctuation"},">")]),a(`
`)])])])],-1),bn=s(`<p>Which renders the plain text response:</p><pre><code>0,1,4,9,16,25,36,49,64,81,
</code></pre><h3 id="user-api-page" tabindex="-1">/_user/api Page <a class="header-anchor" href="#user-api-page" aria-hidden="true">#</a></h3><blockquote><p>Usage: /{user}/api</p></blockquote><p>The <a href="https://github.com/sharp-apps/blog/blob/master/_user/api.html" target="_blank" rel="noopener noreferrer">/_user/api.html</a> API page shows an example of how easy it is to create data-driven APIs where you can literally return the response of a parameterized SQL query using the <code>dbSelect</code> filter and returning the results:</p>`,5),vn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"SELECT"),a(),n("span",{class:"token punctuation"},"*"),a(` 
      `),n("span",{class:"token variable"},"FROM"),a(),n("span",{class:"token variable"},"Post"),a(),n("span",{class:"token variable"},"p"),a(),n("span",{class:"token variable"},"INNER"),a(),n("span",{class:"token variable"},"JOIN"),a(),n("span",{class:"token variable"},"UserInfo"),a(),n("span",{class:"token variable"},"u"),a(),n("span",{class:"token variable"},"on"),a(),n("span",{class:"token variable"},"p"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"CreatedBy"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token variable"},"u"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"UserName"),a(` 
     `),n("span",{class:"token variable"},"WHERE"),a(),n("span",{class:"token variable"},"UserName"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token punctuation"},"@"),n("span",{class:"token variable"},"user"),a(` 
    `),n("span",{class:"token variable"},"ORDER"),a(),n("span",{class:"token variable"},"BY"),a(),n("span",{class:"token variable"},"p"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Created"),a(),n("span",{class:"token variable"},"DESC"),n("span",{class:"token punctuation"},"`"),a(` 
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dbSelect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"user"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),fn=s('<p>The <strong>user</strong> argument is populated as a result of dynamic route from the <code>_user</code> directory name which will let you view all <a href="http://blog.web-app.io/ServiceStack" target="_blank" rel="noopener noreferrer">@ServiceStack</a> posts with:</p><ul><li><a href="http://blog.web-app.io/ServiceStack/api" target="_blank" rel="noopener noreferrer">/ServiceStack/api</a></li></ul><p>Which also benefits from ServiceStack&#39;s multiple built-in formats where the same API can be returned in:</p><ul><li><a href="http://blog.web-app.io/ServiceStack/api?format=json" target="_blank" rel="noopener noreferrer">/ServiceStack/api?format=json</a></li><li><a href="http://blog.web-app.io/ServiceStack/api?format=csv" target="_blank" rel="noopener noreferrer">/ServiceStack/api?format=csv</a></li><li><a href="http://blog.web-app.io/ServiceStack/api?format=xml" target="_blank" rel="noopener noreferrer">/ServiceStack/api?format=xml</a></li><li><a href="http://blog.web-app.io/ServiceStack/api?format=jsv" target="_blank" rel="noopener noreferrer">/ServiceStack/api?format=jsv</a></li></ul><h3 id="posts-slug-api-page" tabindex="-1">/posts/_slug/api Page <a class="header-anchor" href="#posts-slug-api-page" aria-hidden="true">#</a></h3><blockquote><p>Usage: /posts/{slug}/api</p></blockquote><p>The <a href="https://github.com/sharp-apps/blog/blob/master/posts/_slug/api.html" target="_blank" rel="noopener noreferrer">/posts/_slug/api.html</a> page shows an example of using the <code>httpResult</code> filter to return a custom HTTP Response where if the post with the specified slug does not exist it will return a <code>404 Post was not found</code> HTTP Response:</p>',7),wn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"SELECT"),a(),n("span",{class:"token punctuation"},"*"),a(` 
      `),n("span",{class:"token variable"},"FROM"),a(),n("span",{class:"token variable"},"Post"),a(),n("span",{class:"token variable"},"p"),a(),n("span",{class:"token variable"},"INNER"),a(),n("span",{class:"token variable"},"JOIN"),a(),n("span",{class:"token variable"},"UserInfo"),a(),n("span",{class:"token variable"},"u"),a(),n("span",{class:"token variable"},"on"),a(),n("span",{class:"token variable"},"p"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"CreatedBy"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token variable"},"u"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"UserName"),a(` 
     `),n("span",{class:"token variable"},"WHERE"),a(),n("span",{class:"token variable"},"Slug"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token punctuation"},"@"),n("span",{class:"token variable"},"slug"),a(` 
     `),n("span",{class:"token variable"},"ORDER"),a(),n("span",{class:"token variable"},"BY"),a(),n("span",{class:"token variable"},"p"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Created"),a(),n("span",{class:"token variable"},"DESC"),n("span",{class:"token punctuation"},"`"),a(` 
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dbSingle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"slug"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"post"),a(` 
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"post"),a(),n("span",{class:"token variable"},"??"),a(),n("span",{class:"token variable"},"httpResult"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"status"),n("span",{class:"token punctuation"},":"),n("span",{class:"token number"},"404"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"statusDescription"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'Post was not found'"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(` 
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),yn=s(`<p>The <code>httpResult</code> filter returns a ServiceStack <code>HttpResult</code> which allows for the following customizations:</p><div class="language-csharp"><pre><code><span class="token function">httpResult</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
  status<span class="token punctuation">:</span>            <span class="token number">404</span><span class="token punctuation">,</span>
  <span class="token named-parameter punctuation">status</span><span class="token punctuation">:</span>            &#39;NotFound&#39; <span class="token comment">// can also use .NET HttpStatusCode enum name</span>
  statusDescription<span class="token punctuation">:</span> &#39;Post was <span class="token keyword">not</span> found&#39;<span class="token punctuation">,</span>
  <span class="token named-parameter punctuation">response</span><span class="token punctuation">:</span>          post<span class="token punctuation">,</span>
  <span class="token named-parameter punctuation">format</span><span class="token punctuation">:</span>            &#39;json&#39;<span class="token punctuation">,</span>
  <span class="token named-parameter punctuation">contentType</span><span class="token punctuation">:</span>       &#39;application<span class="token operator">/</span>json&#39;<span class="token punctuation">,</span>
  &#39;X<span class="token operator">-</span>Powered<span class="token operator">-</span>By&#39;<span class="token punctuation">:</span>    &#39;#Script&#39;<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre></div><p>Any other unknown arguments like <strong>&#39;X-Powered-By&#39;</strong> are returned as HTTP Response Headers.</p><p>Returning the <code>httpResult</code> above behaves similarly to customizing a HTTP response using return arguments:</p>`,4),Sn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"post"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"format"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'json'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},"'X-Powered-By'"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'#Script'"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),Tn=n("p",null,[a("Using the explicit "),n("code",null,"httpResult"),a(" filter is useful for returning a custom HTTP Response without a Response Body, e.g. the "),n("strong",null,"New Post"),a(" page uses "),n("code",null,"httpFilter"),a(" to "),n("a",{href:"https://github.com/sharp-apps/blog/blob/e8bb7249192c5797348ced091ad5fd434db9a619/app/posts/new.html#L33",target:"_blank",rel:"noopener noreferrer"},"redirect back to the Users posts page"),a(" after they've successfully created a new Post:")],-1),xn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#if"),a(),n("span",{class:"token variable"},"success"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"httpResult"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"status"),n("span",{class:"token punctuation"},":"),n("span",{class:"token number"},"301"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"Location"),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},"`"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"userName"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"`"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"if"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),_n=s('<p>For more examples and info on Sharp APIs checkout to the <a href="https://sharpscript.net/docs/sharp-apis" target="_blank" rel="noopener noreferrer">Sharp APIs docs</a>.</p><h3 id="order-report-example" tabindex="-1">Order Report Example <a class="header-anchor" href="#order-report-example" aria-hidden="true">#</a></h3><p>The combination of features in the new Templates makes easy work of typically tedious tasks, e.g. if you were tasked to create a report that contained all information about a <a href="http://rockwind-sqlite.web-app.io/northwind/order?id=10643" target="_blank" rel="noopener noreferrer">Northwind Order</a> displayed on a single page, you can create a new page at:</p><ul><li><a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/northwind/order-report/_id.html" target="_blank" rel="noopener noreferrer">/northwind/order-report/_id.html</a></li></ul><p>packed with all Queries you need to run and execute them with a <a href="https://sharpscript.net/docs/db-scripts" target="_blank" rel="noopener noreferrer">DB Scripts</a> and display them with a <a href="https://sharpscript.net/docs/html-scripts" target="_blank" rel="noopener noreferrer">HTML Scripts</a>:</p>',5),An=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"!"),n("span",{class:"token variable"},"--"),a(`
`),n("span",{class:"token variable"},"title"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"Order"),a(),n("span",{class:"token variable"},"Report"),a(`
`),n("span",{class:"token variable"},"--"),n("span",{class:"token punctuation"},">"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"SELECT"),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Id"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"OrderDate"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"CustomerId"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"Freight"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"e"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Id"),a(),n("span",{class:"token variable"},"as"),a(),n("span",{class:"token variable"},"EmployeeId"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"CompanyName"),a(),n("span",{class:"token variable"},"as"),a(),n("span",{class:"token variable"},"ShipVia"),n("span",{class:"token punctuation"},","),a(` 
           `),n("span",{class:"token variable"},"ShipAddress"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"ShipCity"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"ShipPostalCode"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"ShipCountry"),a(`
      `),n("span",{class:"token variable"},"FROM"),a(),n("span",{class:"token variable"},"$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"sqlQuote"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Order"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token variable"},"o"),a(`
           `),n("span",{class:"token variable"},"INNER"),a(),n("span",{class:"token variable"},"JOIN"),a(`
           `),n("span",{class:"token variable"},"Employee"),a(),n("span",{class:"token variable"},"e"),a(),n("span",{class:"token variable"},"ON"),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"EmployeeId"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token variable"},"e"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Id"),a(`
           `),n("span",{class:"token variable"},"INNER"),a(),n("span",{class:"token variable"},"JOIN"),a(`
           `),n("span",{class:"token variable"},"Shipper"),a(),n("span",{class:"token variable"},"s"),a(),n("span",{class:"token variable"},"ON"),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"ShipVia"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token variable"},"s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Id"),a(`
     `),n("span",{class:"token variable"},"WHERE"),a(),n("span",{class:"token variable"},"o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Id"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token punctuation"},"@"),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},"`"),a(` 
  `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dbSingle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"id"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"order"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"#"),n("span",{class:"token variable"},"with"),a(),n("span",{class:"token variable"},"order"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token string"},'"table table-striped"'),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"className"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"style"),n("span",{class:"token punctuation"},">"),n("span",{class:"token variable"},"table"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"border"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token number"},"5"),n("span",{class:"token variable"},"px"),a(),n("span",{class:"token variable"},"solid"),a(),n("span",{class:"token variable"},"transparent"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token variable"},"th"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"white-space"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"nowrap"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"style"),n("span",{class:"token punctuation"},">"),a(`
  
  `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"div"),a(),n("span",{class:"token variable"},"style"),n("span",{class:"token punctuation"},"="),n("span",{class:"token string"},'"display:flex"'),n("span",{class:"token punctuation"},">"),a(`
      `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"order"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlDump"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"caption"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},"'Order Details'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"className"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
      `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"SELECT"),a(),n("span",{class:"token punctuation"},"*"),a(),n("span",{class:"token variable"},"FROM"),a(),n("span",{class:"token variable"},"Customer"),a(),n("span",{class:"token variable"},"WHERE"),a(),n("span",{class:"token variable"},"Id"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token punctuation"},"@"),n("span",{class:"token variable"},"CustomerId"),n("span",{class:"token punctuation"},"`"),a(` 
         `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dbSingle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"CustomerId"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlDump"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"caption"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"Customer"),a(),n("span",{class:"token variable"},"Details"),n("span",{class:"token punctuation"},"`"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"className"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
      `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"SELECT"),a(),n("span",{class:"token variable"},"Id"),n("span",{class:"token punctuation"},","),n("span",{class:"token variable"},"LastName"),n("span",{class:"token punctuation"},","),n("span",{class:"token variable"},"FirstName"),n("span",{class:"token punctuation"},","),n("span",{class:"token variable"},"Title"),n("span",{class:"token punctuation"},","),n("span",{class:"token variable"},"City"),n("span",{class:"token punctuation"},","),n("span",{class:"token variable"},"Country"),n("span",{class:"token punctuation"},","),n("span",{class:"token variable"},"Extension"),a(),n("span",{class:"token variable"},"FROM"),a(),n("span",{class:"token variable"},"Employee"),a(),n("span",{class:"token variable"},"WHERE"),a(),n("span",{class:"token variable"},"Id"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token punctuation"},"@"),n("span",{class:"token variable"},"EmployeeId"),n("span",{class:"token punctuation"},"`"),a(` 
         `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dbSingle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"EmployeeId"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlDump"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"caption"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"Employee"),a(),n("span",{class:"token variable"},"Details"),n("span",{class:"token punctuation"},"`"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"className"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"div"),n("span",{class:"token punctuation"},">"),a(`

  `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"SELECT"),a(),n("span",{class:"token variable"},"p"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"ProductName"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"sqlCurrency"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"od.UnitPrice"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token variable"},"UnitPrice"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"Quantity"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"Discount"),a(`
        `),n("span",{class:"token variable"},"FROM"),a(),n("span",{class:"token variable"},"OrderDetail"),a(),n("span",{class:"token variable"},"od"),a(`
             `),n("span",{class:"token variable"},"INNER"),a(),n("span",{class:"token variable"},"JOIN"),a(`
             `),n("span",{class:"token variable"},"Product"),a(),n("span",{class:"token variable"},"p"),a(),n("span",{class:"token variable"},"ON"),a(),n("span",{class:"token variable"},"od"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"ProductId"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token variable"},"p"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"Id"),a(`
       `),n("span",{class:"token variable"},"WHERE"),a(),n("span",{class:"token variable"},"OrderId"),a(),n("span",{class:"token punctuation"},"="),a(),n("span",{class:"token punctuation"},"@"),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},"`"),a(`
      `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dbSelect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"id"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(` 
      `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlDump"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"caption"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token string"},'"Line Items"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token variable"},"className"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"else"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"There"),a(),n("span",{class:"token variable"},"is"),a(),n("span",{class:"token variable"},"no"),a(),n("span",{class:"token variable"},"Order"),a(),n("span",{class:"token variable"},"with"),a(),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"id"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"`"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"with"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),Cn=s(`<p>This will let you view the complete details of any order at the following URL:</p><ul><li><a href="http://rockwind-sqlite.web-app.io/northwind/order-report/10643" target="_blank" rel="noopener noreferrer">/northwind/order-report/10643</a></li></ul><p><a href="http://rockwind-sqlite.web-app.io/northwind/order-report/10643" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/rockwind/order-report.png" alt=""></a></p><h3 id="sql-studio-example" tabindex="-1">SQL Studio Example <a class="header-anchor" href="#sql-studio-example" aria-hidden="true">#</a></h3><p>To take the ad hoc SQL Query example even further, it also becomes trivial to implement a SQL Viewer to run ad hoc queries on your App&#39;s configured database.</p><p><a href="http://rockwind-sqlite.web-app.io/northwind/sql/" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/rockwind/sql-viewer.png" alt=""></a></p><p>The <a href="http://rockwind-sqlite.web-app.io/northwind/sql/" target="_blank" rel="noopener noreferrer">Northwind SQL Viewer</a> above was developed using the 2 Template Pages below:</p><h4 id="northwind-sql-index-html" tabindex="-1"><a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/northwind/sql/index.html" target="_blank" rel="noopener noreferrer">/northwind/sql/index.html</a> <a class="header-anchor" href="#northwind-sql-index-html" aria-hidden="true">#</a></h4><p>A Template Page to render the UI, shortcut links to quickly see the last 10 rows of each table, a <code>&lt;textarea/&gt;</code> to capture the SQL Query which is sent to an API on every keystroke where the results are displayed instantly:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Northwind SQL Viewer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sql<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>select * from &quot;Customer&quot; order by Id desc limit 10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tables<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Category<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Customer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Supplier<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preview<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token comment">/*...*/</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;textarea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> listItems <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.tables li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>listItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  listItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> table <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>
    textarea<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;select * from &quot;&#39;</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">&#39;&quot; order by Id desc limit 10&#39;</span><span class="token punctuation">;</span>
    textarea<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bubbles<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> cancelable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Enable Live Preview of SQL</span>
textarea<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> livepreview<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">livepreview</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token operator">:</span> textarea <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">livepreview</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> el <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
  <span class="token keyword">let</span> sel <span class="token operator">=</span> <span class="token string">&#39;.preview&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;sql&quot;</span><span class="token punctuation">,</span> el<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;api&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> formData
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h4 id="northwind-sql-api-html" tabindex="-1"><a href="https://github.com/ServiceStack/dotnet-app/blob/master/src/apps/rockwind/northwind/sql/api.html" target="_blank" rel="noopener noreferrer">/northwind/sql/api.html</a> <a class="header-anchor" href="#northwind-sql-api-html" aria-hidden="true">#</a></h4><p>All that&#39;s left is to implement the API which just needs to check to ensure the SQL does not contain any destructive operations using the <code>isUnsafeSql</code> DB Scripts, if it doesn&#39;t execute the SQL with the <code>dbSelect</code> DB Scripts, generate a HTML Table with <code>htmlDump</code> and return the partial HTML fragment with <code>return</code>:</p>`,12),qn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#if"),a(),n("span",{class:"token variable"},"isUnsafeSql"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"sql"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(` 
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"div"),a(),n("span",{class:"token variable"},"class"),n("span",{class:"token punctuation"},"="),n("span",{class:"token string"},'"alert alert-danger"'),n("span",{class:"token punctuation"},">"),n("span",{class:"token variable"},"Potentially"),a(),n("span",{class:"token variable"},"unsafe"),a(),n("span",{class:"token variable"},"SQL"),a(),n("span",{class:"token variable"},"detected"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"div"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},"`"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"if"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"sql"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"dbSelect"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"htmlDump"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),Pn=s(`<h3 id="live-development-workflow" tabindex="-1">Live Development Workflow <a class="header-anchor" href="#live-development-workflow" aria-hidden="true">#</a></h3><p>Thanks to the live development workflow of Template Pages, this is the quickest way we&#39;ve previously been able to implement any of this functionality. Where all development can happen at runtime with no compilation or builds, yielding a highly productive iterative workflow to implement common functionality like viewing ad hoc SQL Queries in Excel or even just to rapidly prototype APIs so they can be consumed immediately by Client Applications before formalizing them into Typed ServiceStack Services where they can take advantage of its rich typed metadata and ecosystem.</p><h2 id="new-in-sharp-apps" tabindex="-1">New in Sharp Apps <a class="header-anchor" href="#new-in-sharp-apps" aria-hidden="true">#</a></h2><p>Any functionality added in <code>#Script</code> is inherited in <a href="https://sharpscript.net/docs/sharp-apps" target="_blank" rel="noopener noreferrer">Sharp Apps</a> - ServiceStack&#39;s solution for developing entire .NET Core Web Apps without compilation, using just <code>#Script</code>.</p><p>This release also includes a number of new features which makes Web Apps even more capable:</p><h3 id="customizable-auth-providers" tabindex="-1">Customizable Auth Providers <a class="header-anchor" href="#customizable-auth-providers" aria-hidden="true">#</a></h3><p>Authentication can now be configured using plain text config in your <code>app.settings</code> where initially you need register the <code>AuthFeature</code><a href="https://sharpscript.net/docs/sharp-apps#registering-servicestack-plugins" target="_blank" rel="noopener noreferrer">plugin as normal</a> by specifying it in the <code>features</code> list:</p><pre><code>features AuthFeature
</code></pre><p>Then using <code>AuthFeature.AuthProviders</code> you can specify which Auth Providers you want to have registered, e.g:</p><pre><code>AuthFeature.AuthProviders TwitterAuthProvider, GithubAuthProvider
</code></pre><p>Each Auth Provider checks the Web Apps <code>app.settings</code> for its Auth Provider specific configuration it needs, e.g. to configure both Twitter and GitHub Auth Providers you would populate it with your <a href="https://docs.servicestack.net/authentication-and-authorization#oauth-configuration" target="_blank" rel="noopener noreferrer">OAuth Apps details</a>:</p><pre><code>oauth.RedirectUrl http://127.0.0.1:5000/
oauth.CallbackUrl http://127.0.0.1:5000/auth/{0}

oauth.twitter.ConsumerKey {Twitter App Consumer Key}
oauth.twitter.ConsumerSecret {Twitter App Consumer Secret Key}

oauth.github.ClientId {GitHub Client Id}
oauth.github.ClientSecret {GitHub Client Secret}
oauth.github.Scopes {GitHub Auth Scopes}
</code></pre><h3 id="customizable-markdown-providers" tabindex="-1">Customizable Markdown Providers <a class="header-anchor" href="#customizable-markdown-providers" aria-hidden="true">#</a></h3><p>By default Web Apps now utilize <a href="https://github.com/lunet-io/markdig" target="_blank" rel="noopener noreferrer">Markdig</a> implementation to render its Markdown. You can also switch it back to the built-in Markdown provider that ServiceStack uses with:</p><div class="language-"><pre><code>markdownProvider MarkdownDeep
</code></pre></div><h3 id="rich-template-config-arguments" tabindex="-1">Rich Template Config Arguments <a class="header-anchor" href="#rich-template-config-arguments" aria-hidden="true">#</a></h3><p>Any <code>app.settings</code> configs that are prefixed with <code>args.</code> are made available to Template Pages and any arguments starting with a <code>{</code> or <code>[</code> are automatically converted into a JS object:</p><div class="language-"><pre><code>args.blog { name:&#39;blog.web-app.io&#39;, href:&#39;/&#39; }
args.tags [&#39;technology&#39;,&#39;marketing&#39;]
</code></pre></div><p>Where they can be referenced as an <code>object</code> or an <code>array</code> directly:</p>`,19),En=n("div",null,[n("div",{class:"language-html"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("a")]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("{{blog.href}}"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a("{{blog.name}}"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("a")]),n("span",{class:"token punctuation"},">")]),a(`

{{#each tags}} `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("em")]),n("span",{class:"token punctuation"},">")]),a("{{it}}"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("em")]),n("span",{class:"token punctuation"},">")]),a(` {{/each}}
`)])])])],-1),Nn=s(`<p>The alternative approach is to give each argument value a different name:</p><div class="language-"><pre><code>args.blogName blog.web-app.io
args.blogHref /
</code></pre></div><h3 id="new-parcel-web-app-template" tabindex="-1">New Parcel Web App Template <a class="header-anchor" href="#new-parcel-web-app-template" aria-hidden="true">#</a></h3><p>We&#39;re especially excited about this new template which combines the simplicity of developing modern JavaScript Apps with the <a href="https://github.com/NetCoreTemplates/parcel" target="_blank" rel="noopener noreferrer">parcel template</a> with the simplicity of developing .NET Core Apps with <a href="https://sharpscript.net/docs/sharp-apps" target="_blank" rel="noopener noreferrer">#Script Sharp Apps</a> to provide a unified solution for creating rich Apps in a live rapid development workflow without compilation allowing the creation of <a href="https://sharpscript.net/docs/sharp-apps#pure-cloud-apps" target="_blank" rel="noopener noreferrer">pure Cloud Apps</a> and <a href="https://sharpscript.net/docs/deploying-sharp-apps" target="_blank" rel="noopener noreferrer">simplified rsync deployments</a>.</p><p><a href="http://parcel-app.web-templates.io/" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/csharp-templates/parcel-app.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://parcel-app.web-templates.io" target="_blank" rel="noopener noreferrer">parcel-app.web-templates.io</a></p></blockquote><h4 id="layout" tabindex="-1">Layout <a class="header-anchor" href="#layout" aria-hidden="true">#</a></h4><p>This template is maintained in the following directory structure:</p><ul><li><code>/app</code> - Your Web App&#39;s published source code and any plugins</li><li><code>/client</code> - The Parcel managed Client App where client source code is maintained</li><li><code>/server</code> - Extend your Web App with an optional <code>server.dll</code> plugin containing additional Server functionality</li><li><code>/web</code> - The Web App binaries</li></ul><p>Most development will happen within <code>/client</code> which is automatically published to <code>/app</code> using parcel&#39;s CLI that&#39;s invoked from the included npm scripts.</p><h4 id="client" tabindex="-1">client <a class="header-anchor" href="#client" aria-hidden="true">#</a></h4><p>The difference with <a href="https://github.com/NetCoreTemplates/bare-app" target="_blank" rel="noopener noreferrer">bare-app</a> is that the client source code is maintained in the <code>/client</code> folder and uses <a href="https://parceljs.org" target="_blank" rel="noopener noreferrer">Parcel JS</a> to automatically bundle and publish your App to <code>/app/wwwroot</code> which is updated with live changes during development.</p><p>The client folder also contains the npm <a href="https://github.com/NetCoreTemplates/parcel-app/blob/master/client/package.json" target="_blank" rel="noopener noreferrer">package.json</a> which contains all npm scripts required during development.</p><p>If this is the first time using Parcel, you will need to install its global CLI:</p><pre><code>$ npm install -g parcel-bundler
</code></pre><p>Then you can run a watched parcel build of your Web App with:</p><pre><code>$ npm run dev
</code></pre><p>Parcel is a zero configuration bundler which inspects your <code>.html</code> files to automatically transpile and bundle all your <strong>.js</strong> and <strong>.css</strong> assets and other web resources like TypeScript <strong>.ts</strong> source files into a static <code>.html</code> website synced at <code>/app/wwwroot</code>.</p><p>Then to start the ServiceStack Server to host your Web App run:</p><pre><code>$ npm run server
</code></pre><p>Which will host your App at <code>http://localhost:5000</code> which in <code>debug</code> mode will enable <a href="https://sharpscript.net/docs/hot-reloading" target="_blank" rel="noopener noreferrer">hot reloading</a> which will automatically reload web pages as it detects any file changes.</p><h4 id="server" tabindex="-1">server <a class="header-anchor" href="#server" aria-hidden="true">#</a></h4><p>To enable even greater functionality, this Web Apps template is also pre-configured with a custom Server project where you can extend your Web App with <a href="https://sharpscript.net/docs/sharp-apps#plugins" target="_blank" rel="noopener noreferrer">Plugins</a> where all <code>Plugins</code>, <code>Services</code>, <code>Filters</code>, etc are automatically wired and made available to your Web App.</p><p>This template includes a simple <a href="https://github.com/NetCoreTemplates/parcel-app/blob/master/server/ServerPlugin.cs" target="_blank" rel="noopener noreferrer">ServerPlugin.cs</a> which contains an Empty <code>ServerPlugin</code> and <code>Hello</code> Service:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPlugin</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token class-name">IAppHost</span> appHost<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//[Route(&quot;/hello/{Name}&quot;)] // Handled by /hello/_name.html API page, uncomment to take over</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>HelloResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloResponse</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Result <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServices</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Service</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Any</span><span class="token punctuation">(</span><span class="token class-name">Hello</span> request<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HelloResponse</span> <span class="token punctuation">{</span> Result <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;Hi </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> from server.dll&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Build the <code>server.csproj</code> project and copy the resulting <code>server.dll</code> to <code>/app/plugins/server.dll</code> and start the server with the latest plugin:</p><pre><code>$ npm run server
</code></pre><p>This will automatically load any <code>Plugins</code>, <code>Services</code>, <code>Filters</code>, etc and make them available to your Web App.</p><p>One benefit of creating your APIs with C# ServiceStack Services instead of <a href="https://sharpscript.net/docs/sharp-apis" target="_blank" rel="noopener noreferrer">Sharp APIs</a> is that you can generate TypeScript DTOs with:</p><pre><code>$ npm run dtos
</code></pre><p>Which saves generate DTOs for all your ServiceStack Services in <a href="https://github.com/NetCoreTemplates/parcel-app/blob/master/client/dtos.ts" target="_blank" rel="noopener noreferrer">dtos.ts</a> which can then be accessed in your TypeScript source code.</p><p>If preferred you can instead develop Server APIs with Sharp APIs, an example is included in <a href="https://github.com/NetCoreTemplates/parcel-app/blob/master/client/hello/_name.html" target="_blank" rel="noopener noreferrer">/client/hello/_name.html</a></p>`,32),In=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"result"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token punctuation"},"`"),n("span",{class:"token variable"},"Hi"),a(),n("span",{class:"token variable"},"$"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"name"),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token variable"},"from"),a(),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"hello"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"_name"),n("span",{class:"token punctuation"},"."),n("span",{class:"token variable"},"html"),n("span",{class:"token punctuation"},"`"),a(),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),Rn=s(`<p>Which as it uses the same data structure as the <code>Hello</code> Service above, can be called with ServiceStack&#39;s <code>JsonServiceClient</code> and generated TypeScript DTOs.</p><p>The <a href="https://github.com/NetCoreTemplates/parcel-app/blob/master/client/index.ts" target="_blank" rel="noopener noreferrer">/client/index.ts</a> shows an example of this where initially the App calls the C# <code>Hello</code> ServiceStack Service:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./shared&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Hello<span class="token punctuation">,</span> HelloResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./dtos&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#result&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#Name&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span>name <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// const response = await client.get&lt;HelloResponse&gt;(\`/hello/\${request.name}\`); //call /hello/_name.html</span>
    result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> response<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>While your App is running you can toggle the uncommented the line and hit <code>Ctrl+S</code> to save <code>index.ts</code> which Parcel will automatically transpile and publish to <code>/app/wwwroot</code> where it will be detected and automatically reloaded with the latest changes. Now typing in the text field will display the response from calling the <code>/hello/_name.html</code> API Page instead.</p><h4 id="deployments" tabindex="-1">Deployments <a class="header-anchor" href="#deployments" aria-hidden="true">#</a></h4><p>During development Parcel maintains a debug and source-code friendly version of your App. Before deploying you can build an optimized production version of your App with:</p><pre><code>$ npm run build
</code></pre><p>Which will bundle and minify all <code>.css</code>, <code>.js</code> and <code>.html</code> assets and publish to <code>/app/wwwroot</code>.</p><p>Then to deploy Web Apps you just need to copy the <code>/app</code> and <code>/web</code> folders to any server with .NET Core 2.1 runtime installed. See the <a href="https://sharpscript.net/docs/deploying-sharp-apps" target="_blank" rel="noopener noreferrer">Deploying Web Apps</a> docs for more info.</p><h2 id="new-blog-web-app" tabindex="-1">New Blog Web App <a class="header-anchor" href="#new-blog-web-app" aria-hidden="true">#</a></h2><p>As we like to do when introducing new major features, we&#39;ve created a new Live Demo to showcase many of the new features added to Templates. <a href="https://github.com/sharp-apps/blog/tree/master" target="_blank" rel="noopener noreferrer">Exploring the source code of Live Demos</a> helps learning how to make use of new features as viewed in the context of a working example.</p><p><a href="http://blog.web-app.io" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/NetCoreApps/TemplatePages/master/src/wwwroot/assets/img/screenshots/blog.png" alt=""></a></p><blockquote><p>Live Demo: <a href="http://blog.web-app.io" target="_blank" rel="noopener noreferrer">blog.web-app.io</a></p></blockquote><h3 id="ultimate-simplicity" tabindex="-1">Ultimate Simplicity <a class="header-anchor" href="#ultimate-simplicity" aria-hidden="true">#</a></h3><p>The new <a href="https://github.com/sharp-apps/blog" target="_blank" rel="noopener noreferrer">Blog App</a> is a ServiceStack <a href="https://sharpscript.net/docs/sharp-apps" target="_blank" rel="noopener noreferrer">Web App</a> developed entirely using <code>#Script</code> which eliminates much of the complexity inherent in developing .NET Web Applications which by their nature results in highly customizable Web Apps where their entire functionality can be modified in real-time whilst the App is running, that uses syntax simple enough to be enhanced by non-developers like Designers and Content Creators courtesy of its approachable <a href="https://sharpscript.net/docs/blocks" target="_blank" rel="noopener noreferrer">Handlebars-like</a> and familiar <a href="https://sharpscript.net/docs/expression-viewer#expression=map(range(1%2Ccount)%2C%20x%20%3D%3E%20x%20*%20x)&amp;count=5" target="_blank" rel="noopener noreferrer">JavaScript syntax</a>.</p><p>Compiled Apps can have a prohibitively large barrier to entry where any modification often requires downloading source code separately, setting up a matching development environment with appropriate extensions and correct versions and non cursory level of experience with their chosen language, frameworks, build tools and other platform idiosyncrasies.</p><p>By contrast Web Apps require no development environment, no IDE&#39;s or build tools with all source code already included as part of the App download which can be modified in real-time by any text editor to instantly view changes as they&#39;re made. So Apps like <a href="http://redis.web-app.io" target="_blank" rel="noopener noreferrer">redis.web-app.io</a> which provide a rich Admin UI for searching, browsing and modifying Redis&#39;s core data structures, can be easily enhanced by modifying a single <a href="https://github.com/sharp-apps/Redis/blob/master/index.html" target="_blank" rel="noopener noreferrer">index.html</a> at the same time as using the App.</p><h3 id="minimal" tabindex="-1">Minimal <a class="header-anchor" href="#minimal" aria-hidden="true">#</a></h3><p>To maximize approachability, the <a href="https://github.com/sharp-apps/blog/tree/master" target="_blank" rel="noopener noreferrer">/Blog</a> Web App has no C# source code, plugins and uses no JavaScript or CSS frameworks. The development of which ended up being one of the most enjoyable experiences we&#39;ve had in recent memory where all the usual complexities of developing a C# Server and modern JS App has been dispensed and you can just focus on the App you want to create, using a plain-text editor on the left, a live updating browser on the right and nothing else to interrupt your flow.</p><p>Any infrastructure dependencies have also been avoided by using SQLite by default which is <a href="#init-pages">automatically created an populated on first run</a> if no database exists, or if preferred can be <a href="https://sharpscript.net/docs/sharp-apps#multi-platform-configurations" target="_blank" rel="noopener noreferrer">changed to use any other popular RDBMS</a> using just config.</p><h3 id="multi-user-blogging-platform" tabindex="-1">Multi User Blogging Platform <a class="header-anchor" href="#multi-user-blogging-platform" aria-hidden="true">#</a></h3><p>Any number of users can Sign In via Twitter and publish content under their Twitter Username where only they&#39;ll be able to modify their own Content. Setting up Twitter is as easy as it can be which just requires modifying the <a href="#customizable-auth-providers">Twitter Auth Config in app.settings</a> with the URL where the blog is hosted and the OAuth Keys for the Twitter OAuth App created at <a href="https://apps.twitter.com" target="_blank" rel="noopener noreferrer">apps.twitter.com</a>.</p><h3 id="rich-content" tabindex="-1">Rich Content <a class="header-anchor" href="#rich-content" aria-hidden="true">#</a></h3><p>Whilst most blogging platforms just edit static text, each Post content has access to the powerful and <a href="https://sharpscript.net/docs/sandbox" target="_blank" rel="noopener noreferrer">Sandboxed</a> features in <a href="https://sharpscript.net" target="_blank" rel="noopener noreferrer">sharpscript.net</a> which can be used to create <a href="http://blog.web-app.io/posts/live-document-example" target="_blank" rel="noopener noreferrer">Live Documents</a> or <a href="http://blog.web-app.io/posts/markdown-example" target="_blank" rel="noopener noreferrer">Render Markdown</a> which is itself just <a href="https://sharpscript.net/docs/blocks#markdown" target="_blank" rel="noopener noreferrer">one of the available blocks</a> where it will render to HTML any content between the <code>markdown</code> blocks:</p>`,24),Dn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token variable"},"\u200B"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"#"),n("span",{class:"token variable"},"markdown"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"#"),n("span",{class:"token punctuation"},"#"),a(),n("span",{class:"token variable"},"Markdown"),a(),n("span",{class:"token variable"},"Content"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"\u200B"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"markdown"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),Bn=s('<p>By default the <a href="https://github.com/lunet-io/markdig" target="_blank" rel="noopener noreferrer">Markdig</a> implementation is used to render Markdown but can also be configured to use an <a href="http://blog.web-app.io/posts/web-app-customizations#customizable-markdown-providers" target="_blank" rel="noopener noreferrer">alternate Markdown provider</a>.</p><h3 id="rich-markdown-editor" tabindex="-1">Rich Markdown Editor <a class="header-anchor" href="#rich-markdown-editor" aria-hidden="true">#</a></h3><p>To make it easy to recall Markdown features, each Content is equipped with a Rich Text editor containing the most popular formatting controls along with common short-cuts for each feature, discoverable by hovering over each button:</p><p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/blog/editor.png" alt=""></p><p>The Editor also adopts popular behavior in IDEs where <code>Tab</code> and <code>SHIFT+Tab</code> can be used to indent blocks of text and lines can be commented with <code>Ctrl+/</code> or blocks with <code>CTRL+SHIFT+/</code>.</p><p>Another nice productivity win is being able to <code>CTRL+CLICK</code> on any Content you created to navigate to its Edit page.</p><h3 id="auto-saved-drafts" tabindex="-1">Auto saved drafts <a class="header-anchor" href="#auto-saved-drafts" aria-hidden="true">#</a></h3><p>The content in each Text <code>input</code> and <code>textarea</code> is saved to <code>localStorage</code> on each key-press so you can freely reload pages and navigate around the site where all unpublished content will be preserved upon return.</p><p>When you want to revert back to the original published content you can clear the text boxes and reload the page which will load content from the database instead of <code>localStorage</code>.</p><h3 id="server-validation" tabindex="-1">Server Validation <a class="header-anchor" href="#server-validation" aria-hidden="true">#</a></h3><p>The <a href="https://github.com/sharp-apps/blog/blob/master/posts/new.html" target="_blank" rel="noopener noreferrer">new.html</a> and <a href="https://github.com/sharp-apps/blog/blob/master/posts/_slug/edit.html" target="_blank" rel="noopener noreferrer">edit.html</a> pages shows examples of performing server validation with <code>#Script</code>:</p>',11),Mn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"assignErrorAndContinueExecuting"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"ex"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token string"},"'Title must be between 5 and 200 characters'"),a(`      
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"onlyIf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"postTitle"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"<"),a(),n("span",{class:"token number"},"5"),a(),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"postTitle"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token number"},"200"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"titleError"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token string"},"'Content must be between 25 and 64000 characters'"),a(` 
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"onlyIf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"content"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"<"),a(),n("span",{class:"token number"},"25"),a("  "),n("span",{class:"token punctuation"},"|"),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"content"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},">"),a(),n("span",{class:"token number"},"64000"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"contentError"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token string"},"'Potentially malicious characters detected'"),a(`       
   `),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"ifNotExists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"contentError"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"onlyIf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"containsXss"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"content"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"contentError"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),jn=s(`<p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/blog/server-validation.png" alt=""></p><p>For more info see the docs on <a href="https://sharpscript.net/docs/error-handling" target="_blank" rel="noopener noreferrer">Error Handling</a>.</p><h3 id="live-previews" tabindex="-1">Live Previews <a class="header-anchor" href="#live-previews" aria-hidden="true">#</a></h3><p>Creating and Posting content benefit from Live Previews where its rendered output can be visualized in real-time before it&#39;s published.</p><p>Any textarea can easily be enhanced to enable Live Preview by including the <code>data-livepreview</code> attribute with the element where the output should be rendered in, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">data-livepreview</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.preview<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preview<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>The implementation of which is surprisingly simple where the JavaScript snippet in <a href="https://github.com/sharp-apps/blog/blob/master/default.js" target="_blank" rel="noopener noreferrer">default.js</a> below is used to send its content on each change:</p><div class="language-js"><pre><code><span class="token comment">// Enable Live Preview of new Content</span>
textAreas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;textarea[data-livepreview]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> textAreas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  textAreas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> livepreview<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">livepreview</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token operator">:</span> textAreas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">livepreview</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> el <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
  <span class="token keyword">let</span> sel <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-livepreview&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&lt;div&gt;Live Preview&lt;/div&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">,</span> el<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/preview&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> formData
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>To the <a href="https://github.com/sharp-apps/blog/blob/master/preview.html" target="_blank" rel="noopener noreferrer">/preview.html</a> API Page which just renders and captures any Template Content its sent and returns the output:</p>`,9),Ln=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"content"),a("  "),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"evalTemplate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"use"),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token variable"},"plugins"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'MarkdownTemplatePlugin'"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),n("span",{class:"token variable"},"response"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"response"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"contentType"),n("span",{class:"token punctuation"},":"),n("span",{class:"token string"},"'text/plain'"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),On=s(`<p>By default the <code>evalTemplate</code> filter renders Templates in a new <code>TemplateContext</code> which can be customized to utilize any additional <code>plugins</code>, <code>filters</code> and <code>blocks</code> available in the configured <a href="https://sharpscript.net/docs/sharp-pages" target="_blank" rel="noopener noreferrer">SharpPagesFeature</a>, or for full access you can use <code>{use:{context:true}}</code> to evaluate any Template content under the same context that <code>evalTemplate</code> is run on.</p><h2 id="templates-admin-service" tabindex="-1">Templates Admin Service <a class="header-anchor" href="#templates-admin-service" aria-hidden="true">#</a></h2><p>The new Templates Admin Service lets you run admin actions against a running instance which by default is only accessible to <strong>Admin</strong> users and can be called with:</p><pre><code>/templates/admin
</code></pre><p>Which will display the available actions which are currently only:</p><ul><li><code>invalidateAllCaches</code> - Invalidate all caches and force pages to check if they&#39;ve been modified on next request</li><li><code>RunInitPage</code> - Runs the Init page again</li></ul><h3 id="zero-downtime-deployments" tabindex="-1">Zero downtime deployments <a class="header-anchor" href="#zero-downtime-deployments" aria-hidden="true">#</a></h3><p>These actions are useful after an xcopy/rsync deployment to enable zero downtime deployments by getting a running instance to invalidate all internal caches and force existing pages to check if it has been modified, the next time their called.</p><p>Actions can be invoked in the format with:</p><pre><code>/templates/admin/{Actions}
</code></pre><p>Which can be used to call 1 or more actions:</p><pre><code>/templates/admin/invalidateAllCaches
/templates/admin/invalidateAllCaches,RunInitPage
</code></pre><p>By default it&#39;s only available to be called by <strong>Admin</strong> Users (or <a href="/debugging.html#authsecret">AuthSecret</a>) but can be changed with:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SharpPagesFeature</span> <span class="token punctuation">{</span>
    TemplatesAdminRole <span class="token operator">=</span> RoleNames<span class="token punctuation">.</span>AllowAnyUser<span class="token punctuation">,</span> <span class="token comment">// Allow any Authenticated User to call /templates/admin</span>
    <span class="token comment">//TemplatesAdminRole = RoleNames.AllowAnon,  // Allow anyone</span>
    <span class="token comment">//TemplatesAdminRole = null,                 // Do not register /templates/admin service</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This also now the preferred way to enable the <a href="/debugging.html#debug-inspector">Debug Inspector</a> in production, which is only available in <code>DebugMode</code> by default:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SharpPagesFeature</span> <span class="token punctuation">{</span>
    MetadataDebugAdminRole <span class="token operator">=</span> RoleNames<span class="token punctuation">.</span>Admin<span class="token punctuation">,</span>          <span class="token comment">// Only allow Admin users to call /metadata/debug</span>
    <span class="token comment">//MetadataDebugAdminRole = RoleNames.AllowAnyUser, // Allow Authenticated Users</span>
    <span class="token comment">//MetadataDebugAdminRole = RoleNames.AllowAnon,    // Allow anyone</span>
    <span class="token comment">//MetadataDebugAdminRole = null,                   // Default. Do not register /metadata/debug service</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="new-template-filters" tabindex="-1">New Template Filters <a class="header-anchor" href="#new-template-filters" aria-hidden="true">#</a></h2><h3 id="global-filters" tabindex="-1">Global Filters <a class="header-anchor" href="#global-filters" aria-hidden="true">#</a></h3><p>Filters with <code>*Global</code> suffix can be used to assign Global variables which are accessible and assignable from anywhere, useful when you want to assign arguments in partials that&#39;s accessible outside of its scope:</p><ul><li><code>assignGlobal</code></li><li><code>assignToGlobal</code></li><li><code>appendToGlobal</code></li><li><code>prependToGlobal</code></li><li><code>addToGlobal</code></li><li><code>addToStartGlobal</code></li></ul><h3 id="html-scriptss" tabindex="-1">HTML Scriptss <a class="header-anchor" href="#html-scriptss" aria-hidden="true">#</a></h3><ul><li><code>htmlClass</code></li><li><code>htmlClassList</code></li></ul><p>Inspired by <a href="https://vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="noopener noreferrer">Vue&#39;s class bindings</a> <code>htmlClass</code> lets you conditionally display a list of class names based on an Object Dictionary, Array or string values, e.g:</p><p><a href="https://sharpscript.net/docs/html-scripts#htmlclass" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/htmlClass.png" alt=""></a></p><ul><li><code>htmlAttrs</code></li></ul><p>Similar to above to <code>htmlAttrs</code> simplifies rendering HTML attributes on HTML elements, it accepts a Dictionary of Key/Value Pairs which will be rendered as HTML attributes. Keys with a boolean value will only render the attribute name if it&#39;s true and htmlAttrs also supports common JS keyword overrides for <code>htmlFor</code> and <code>className</code>, e.g:</p><p><a href="https://sharpscript.net/docs/html-scripts#htmlattrs" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/sharpscript/syntax/htmlAttrs.png" alt=""></a></p><ul><li><code>containsXss</code></li></ul><p>A greedy validation when needing to accept raw HTML but want to validate against embedded JavaScript, used in <a href="https://github.com/sharp-apps/blog/blob/c656186cbae7c5f3c18ff4d4abfcd201858b0761/app/posts/_slug/edit.html#L26" target="_blank" rel="noopener noreferrer">Blog content validation</a>:</p>`,29),Wn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token string"},"'Potentially malicious characters detected'"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"onlyIf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"containsXss"),n("span",{class:"token punctuation"},"("),n("span",{class:"token variable"},"content"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"assignTo"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"contentError"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),Jn=s('<p>Explicit filters for HTML Encoding/Decoding manually:</p><ul><li><code>htmlEncode</code></li><li><code>htmlDecode</code></li></ul><h3 id="hot-reloading" tabindex="-1">Hot reloading <a class="header-anchor" href="#hot-reloading" aria-hidden="true">#</a></h3><ul><li><code>ifDebugIncludeScript</code></li></ul><p>An alternative way for including the <a href="https://sharpscript.net/docs/hot-reloading" target="_blank" rel="noopener noreferrer">Hot Reload script</a> in <strong>debug</strong> mode:</p>',5),Hn=n("div",null,[n("div",{class:"language-html"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("i")]),a(),n("span",{class:"token attr-name"},"hidden"),n("span",{class:"token punctuation"},">")]),a("{{ '/js/hot-fileloader.js' | ifDebugIncludeScript }}"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("i")]),n("span",{class:"token punctuation"},">")]),a(`
`)])])])],-1),Fn=n("p",null,[a("Useful when needing to view Template HTML pages from a HTTP Server like Webpack's Hot Module Reload Server as it will hide any unevaluated Templates syntax. If you're only viewing your HTML Website through ServiceStack you can use the alternative syntax which won't render the empty "),n("code",null,"<i hidden></i>"),a(" in release builds:")],-1),zn=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),n("span",{class:"token block keyword"},"#if"),a(),n("span",{class:"token variable"},"debug"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token variable"},"script"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token string"},"'/js/hot-fileloader.js'"),a(),n("span",{class:"token punctuation"},"|"),a(),n("span",{class:"token variable"},"includeFile"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"script"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"/"),n("span",{class:"token variable"},"if"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),Vn=s('<h3 id="info-filters" tabindex="-1">Info filters <a class="header-anchor" href="#info-filters" aria-hidden="true">#</a></h3><ul><li><code>hostServiceName</code> - Your AppHost&#39;s ServiceName</li><li><code>hostConfig</code> - AppHost.Config</li></ul><h3 id="db-scriptss" tabindex="-1">DB Scriptss <a class="header-anchor" href="#db-scriptss" aria-hidden="true">#</a></h3><ul><li><code>ormliteVar</code> - Access RDBMS dialect-provider specific <a href="https://github.com/ServiceStack/ServiceStack.OrmLite#system-variables-and-default-values" target="_blank" rel="noopener noreferrer">OrmLite Variables</a></li><li><code>isUnsafeSql</code> - Test for destructive/mutable SQL Statements</li></ul><h3 id="date-time-filters" tabindex="-1">Date/Time Filters <a class="header-anchor" href="#date-time-filters" aria-hidden="true">#</a></h3><p>Creating specific <code>DateTime</code> and <code>TimeSpan</code> values:</p><ul><li><code>date</code> - <code>date(year,month,day)</code> or <code>date(year,month,day,hour,min,secs)</code></li><li><code>time</code> - <code>time(hours,mins,secs)</code> or <code>time(days,hours,mins,secs)</code></li></ul><h3 id="misc" tabindex="-1">Misc <a class="header-anchor" href="#misc" aria-hidden="true">#</a></h3><ul><li><code>httpResult</code> - return a customized <code>HttpResult</code></li><li><code>evalTemplate</code> - Evaluate Template syntax in a custom context</li><li><code>generateSlug</code> - generate a sanitized &quot;slug&quot; in <strong>kebab-case</strong> from a free-text value like a Page title</li><li><code>invalidateAllCaches</code> - Invalidate all caches and force pages to check if they&#39;ve been modified on next request</li><li><code>assignErrorAndContinueExecuting</code> - Assigns any Exceptions to the specified variable and calls <code>continueExecutingFiltersOnError</code> to instruct Templates to continue rendering the page when an Exception is thrown, e.g:</li></ul>',9),Un=n("div",null,[n("div",{class:"language-hbs"},[n("pre",{"v-pre":""},[n("code",null,[n("span",{class:"token delimiter punctuation"},"{{"),a(),n("span",{class:"token variable"},"assignErrorAndContinueExecuting"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"ex"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(` 

`),n("span",{class:"token punctuation"},"/"),n("span",{class:"token punctuation"},"/"),a(),n("span",{class:"token variable"},"Equivalent"),a(),n("span",{class:"token variable"},"to"),n("span",{class:"token punctuation"},":"),a(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"assignError"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token variable"},"ex"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token variable"},"continueExecutingFiltersOnError"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),a(`
`)])])])],-1),$n=s(`<h2 id="ormlite" tabindex="-1">OrmLite <a class="header-anchor" href="#ormlite" aria-hidden="true">#</a></h2><p>OrmLite continues to add a lot of enhancements in response to Customer feedback and feature requests:</p><h3 id="support-for-npgsql-4-0" tabindex="-1">Support for Npgsql 4.0 <a class="header-anchor" href="#support-for-npgsql-4-0" aria-hidden="true">#</a></h3><p>The release of <a href="https://www.npgsql.org/doc/release-notes/4.0.html" target="_blank" rel="noopener noreferrer">Npgsql 4.0</a> brought some significant performance advantages but also included a number of changes that required stricter usage of its <a href="http://ADO.NET" target="_blank" rel="noopener noreferrer">ADO.NET</a> provider, which have all been resolved in this release.</p><h3 id="support-for-mysql-data-8-0-12" tabindex="-1">Support for MySql.Data 8.0.12 <a class="header-anchor" href="#support-for-mysql-data-8-0-12" aria-hidden="true">#</a></h3><p>OrmLite&#39;s MySql provider has been upgraded to the latest <a href="https://insidemysql.com/introducing-connector-net-with-full-support-for-mysql-8-0/" target="_blank" rel="noopener noreferrer">MySql.Data v8.0.12</a> which now has a <strong>.NET v4.5.2</strong> minimum requirement and has been changed to enforce SSL by default.</p><p>To continue using MySQL without an SSL connection you&#39;ll need to specify <code>SslMode=none</code> in your connection string:</p><pre><code>Server=host;Database=db;UID=user;Password=pwd;SslMode=none
</code></pre><h3 id="bitwise-operators-1" tabindex="-1">Bitwise operators <a class="header-anchor" href="#bitwise-operators-1" aria-hidden="true">#</a></h3><p>The Typed SqlExpression added support for bitwise operations support of which depends on the RDBMS used.</p><p>E.g. all RDBMS&#39;s support Bitwise <code>And</code> and <code>Or</code> operators:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Id <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Id <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>All RDBMS Except for SQL Server support bit shift operators:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Id <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Id <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Whilst only SQL Server and MySQL Support Exclusive Or:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Id <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="extended-select-sqlexpression-apis" tabindex="-1">Extended Select SqlExpression APIs <a class="header-anchor" href="#extended-select-sqlexpression-apis" aria-hidden="true">#</a></h3><p>You can now select up to <strong>12 Tables</strong> in OrmLite&#39;s Typed SqlExpression <code>Select()</code> and <code>SelectDistinct()</code> APIs, e.g:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table1<span class="token punctuation">,</span>Table2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>Table12<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span>t12<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>
        t1<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
        Table2Name <span class="token operator">=</span> t2<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
        Table12Name <span class="token operator">=</span> t12<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="ormlite-variables-in-customfield" tabindex="-1">OrmLite variables in CustomField <a class="header-anchor" href="#ormlite-variables-in-customfield" aria-hidden="true">#</a></h3><p>For added flexibility in creating database-agnostic solutions you can reference <a href="https://github.com/ServiceStack/ServiceStack.OrmLite#system-variables-and-default-values" target="_blank" rel="noopener noreferrer">OrmLite Variables</a> which can be configured differently for each RDBMS provider in <code>[CustomField]</code> table definitions.</p><p>E.g. you can create a table that defines columns using the Max Text and Unicode Text data type for each RDBMS with:</p><div class="language-csharp"><pre><code><span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomField</span><span class="token attribute-arguments"><span class="token punctuation">(</span>OrmLiteVariables<span class="token punctuation">.</span>MaxText<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token comment">//= {MAX_TEXT}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> MaxText <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomField</span><span class="token attribute-arguments"><span class="token punctuation">(</span>OrmLiteVariables<span class="token punctuation">.</span>MaxTextUnicode<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">//= {NMAX_TEXT}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> MaxUnicodeText <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>When generating the Table definition OrmLite will replace these substitute placeholders with the value in each RDBMS DialectProvider&#39;s <code>Variables</code> Dictionary.</p><h3 id="update-from-object-dictionary" tabindex="-1">Update from Object Dictionary <a class="header-anchor" href="#update-from-object-dictionary" aria-hidden="true">#</a></h3><p>The <code>UpdateOnly</code> APIs now lets you Update fields from an Object Dictionary:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> updateFields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span>        
<span class="token punctuation">}</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UpdateOnly</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>updateFields<span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="custom-index-name" tabindex="-1">Custom Index Name <a class="header-anchor" href="#custom-index-name" aria-hidden="true">#</a></h3><p>You can override the generated name used for indexes by specifying an Index <code>Name</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Index</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;idx_custom_name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="array-parameters-in-executesql" tabindex="-1">Array parameters in ExecuteSql <a class="header-anchor" href="#array-parameters-in-executesql" aria-hidden="true">#</a></h3><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;UPDATE </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Table</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyTable<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> SET Name = &#39;updated&#39; WHERE Id IN (@ids)&quot;</span></span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token punctuation">{</span>ids <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;UPDATE </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Table</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyTable<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> SET Name = &#39;updated&#39; WHERE Name IN (@names)&quot;</span></span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token punctuation">{</span>names <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-hidden="true">#</a></h2><p>This release features improved support for recovering from Sentinel failovers and diagnostic support for identifying improper usage of clients:</p><h3 id="debugging-data-corruption-issues" tabindex="-1">Debugging Data Corruption Issues <a class="header-anchor" href="#debugging-data-corruption-issues" aria-hidden="true">#</a></h3><p>An issue that can be hard to debug is if the same <code>RedisClient</code> instance is shared across multiple threads which can result in returning corrupted data. Typically this is a result of using <code>IRedisClient</code> field in a singleton instance or sharing it as a static instance. To prevent this, each Thread that uses Redis should retrieve the redis client within a using statement, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> redis <span class="token operator">=</span> redisManager<span class="token punctuation">.</span><span class="token function">GetClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//..         </span>
<span class="token punctuation">}</span>
</code></pre></div><p>Unfortunately the call-site which returns the corrupted response or runtime Exception doesn&#39;t identify where else the Redis client instance was being used. To help identify where client instances are being used you can assert that the client is only used in the Thread that resolved it from the pool with:</p><div class="language-csharp"><pre><code>RedisConfig<span class="token punctuation">.</span>AssertAccessOnlyOnSameThread <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><p>This captures the Thread&#39;s StackTrace each time the client is resolved from the pool which as it adds a lot of overhead, should only be enabled when debugging connection issues.</p><p>If it does detect the client is being accessed from a different thread it will throw a <code>InvalidAccessException</code> with the message containing the different <strong>Thread Ids</strong> and the <strong>original StackTrace</strong> where the client was resolved from the pool. You can compare this with the StackTrace of the Exception to hopefully identify where the client is being improperly used.</p><h2 id="add-servicestack-reference" tabindex="-1">Add ServiceStack Reference <a class="header-anchor" href="#add-servicestack-reference" aria-hidden="true">#</a></h2><p>Our end-to-end Typed integrations with the most popular Mobile, Web and Desktop platforms also received enhancements across the board:</p><h3 id="swift" tabindex="-1">Swift <a class="header-anchor" href="#swift" aria-hidden="true">#</a></h3><p><a href="/swift-add-servicestack-reference.html"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/release-notes/swift-logo-banner.jpg" alt=""></a></p><p>With the <a href="https://promisekit.org/news/2018/02/PromiseKit-6.0-Released/" target="_blank" rel="noopener noreferrer">release of PromiseKit v6</a> our approach of bundling PromiseKit and the Swift <code>JsonServiceClient</code> in a single <a href="https://github.com/ServiceStack/ServiceStack.Swift/blob/master/dist/JsonServiceClient.swift" target="_blank" rel="noopener noreferrer">JsonServiceClient.swift</a> source file no longer became possible, it&#39;s now available as a package which can be referenced using your preferred package manager:</p><h4 id="cocoapods" tabindex="-1">CocoaPods <a class="header-anchor" href="#cocoapods" aria-hidden="true">#</a></h4><p>In your <a href="https://guides.cocoapods.org/syntax/podfile.html" target="_blank" rel="noopener noreferrer">Podfile</a>:</p><div class="language-ruby"><pre><code>use_frameworks<span class="token operator">!</span>

<span class="token comment"># Pods for Project</span>
pod <span class="token string">&quot;ServiceStack&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;~&gt; 1.0&#39;</span>
</code></pre></div><h4 id="carthage" tabindex="-1">Carthage <a class="header-anchor" href="#carthage" aria-hidden="true">#</a></h4><div class="language-ruby"><pre><code>github <span class="token string">&quot;ServiceStack/ServiceStack.Swift&quot;</span> <span class="token operator">~</span><span class="token operator">&gt;</span> <span class="token number">1.0</span>
</code></pre></div><h4 id="swiftpm" tabindex="-1">SwiftPM <a class="header-anchor" href="#swiftpm" aria-hidden="true">#</a></h4><div class="language-swift"><pre><code>package<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>
    <span class="token punctuation">.</span><span class="token class-name">Package</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;ServiceStack/ServiceStack.Swift&quot;</span></span><span class="token punctuation">,</span> majorVersion<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><p>The only change the to generated DTOs was importing the <code>ServiceStack</code> module by default. If you want to continue using the single <code>JsonServiceClient.swift</code> source file you will need to <a href="https://docs.servicestack.net/swift-add-servicestack-reference#defaultimports" target="_blank" rel="noopener noreferrer">override the DefaultImports</a>:</p><div class="language-swift"><pre><code><span class="token comment">/*Options:
...

DefaultImports: Foundation
*/</span>
</code></pre></div><h4 id="swift-style-enums" tabindex="-1">Swift style enums <a class="header-anchor" href="#swift-style-enums" aria-hidden="true">#</a></h4><p>You can override code-generation to emit Swift Style camelCase enums in your AppHost with:</p><div class="language-csharp"><pre><code>SwiftGenerator<span class="token punctuation">.</span>EnumNameStrategy <span class="token operator">=</span> SwiftGenerator<span class="token punctuation">.</span>SwiftStyleEnums<span class="token punctuation">;</span>
</code></pre></div><h3 id="dart" tabindex="-1">Dart <a class="header-anchor" href="#dart" aria-hidden="true">#</a></h3><p><a href="/dart-add-servicestack-reference.html"><img src="https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/dart/dart.png" alt=""></a></p><p>The generated DTOs and <a href="https://pub.dartlang.org/packages/servicestack" target="_blank" rel="noopener noreferrer">Dart ServiceStack package</a> have been upgraded to support the new <a href="https://medium.com/dartlang/dart-2-stable-and-the-dart-web-platform-3775d5f8eac7" target="_blank" rel="noopener noreferrer">Dart 2.0 Release</a> which enforces Strong mode by default.</p><p>The ServiceStack Dart package has 3 different imports depending on where it&#39;s used.</p><p>For Flutter and Dart VM Apps import <code>client.dart</code> and use <code>JsonServiceClient</code>:</p><h4 id="flutter-and-dart-vm-usage" tabindex="-1">Flutter and Dart VM Usage <a class="header-anchor" href="#flutter-and-dart-vm-usage" aria-hidden="true">#</a></h4><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;package:servicestack/client.dart&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&#39;techstacks.dtos.dart&#39;</span><span class="token punctuation">;</span>              <span class="token comment">// Add ServiceStack Reference DTOs</span>

<span class="token comment">//...</span>
<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonServiceClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://techstacks.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GetTechnology</span><span class="token punctuation">(</span>slug<span class="token punctuation">:</span> <span class="token string">&quot;flutter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>See the <a href="https://github.com/ServiceStackApps/HelloFlutter" target="_blank" rel="noopener noreferrer">HelloFlutter</a> project for a working example.</p><h4 id="angulardart-and-dart-web-usage" tabindex="-1">AngularDart and Dart Web Usage <a class="header-anchor" href="#angulardart-and-dart-web-usage" aria-hidden="true">#</a></h4><p>For AngularDart or Dart Web Apps import <code>web_client.dart</code> and use the <code>JsonWebClient</code>:</p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;package:servicestack/web_client.dart&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&#39;techstacks.dtos.dart&#39;</span><span class="token punctuation">;</span>              <span class="token comment">// Add ServiceStack Reference DTOs</span>

<span class="token comment">//...</span>
<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonWebClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://techstacks.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GetTechnology</span><span class="token punctuation">(</span>slug<span class="token punctuation">:</span> <span class="token string">&quot;flutter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>See the <a href="https://github.com/ServiceStackApps/HelloAngularDart" target="_blank" rel="noopener noreferrer">HelloAngularDart</a> project for a working example.</p><h4 id="platform-agnostic-usage" tabindex="-1">Platform agnostic Usage <a class="header-anchor" href="#platform-agnostic-usage" aria-hidden="true">#</a></h4><p>For creating libraries that can be consumed in any Dart platform reference <code>servicestack.dart</code> and use the <code>IServiceClient</code> interface which is implemented by both <code>JsonServiceClient</code> and <code>JsonWebClient</code>:</p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;package:servicestack/servicestack.dart&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&#39;techstacks.dtos.dart&#39;</span><span class="token punctuation">;</span>              <span class="token comment">// Add ServiceStack Reference DTOs</span>

<span class="token comment">//...</span>
<span class="token function">fetchTechnologies</span><span class="token punctuation">(</span><span class="token class-name">IServiceClient</span> client<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GetTechnology</span><span class="token punctuation">(</span>slug<span class="token punctuation">:</span> <span class="token string">&quot;flutter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h3><p><a href="/typescript-add-servicestack-reference.html"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/release-notes/servicestack-heart-typescript.png" alt=""></a></p><p>TypeScript DTOs new use TypeScript&#39;s newer string <code>enum</code> syntax for string Enums, e.g:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">enum</span> DayOfWeek
<span class="token punctuation">{</span>
    Sunday <span class="token operator">=</span> <span class="token string">&#39;Sunday&#39;</span><span class="token punctuation">,</span>
    Monday <span class="token operator">=</span> <span class="token string">&#39;Monday&#39;</span><span class="token punctuation">,</span>
    Tuesday <span class="token operator">=</span> <span class="token string">&#39;Tuesday&#39;</span><span class="token punctuation">,</span>
    Wednesday <span class="token operator">=</span> <span class="token string">&#39;Wednesday&#39;</span><span class="token punctuation">,</span>
    Thursday <span class="token operator">=</span> <span class="token string">&#39;Thursday&#39;</span><span class="token punctuation">,</span>
    Friday <span class="token operator">=</span> <span class="token string">&#39;Friday&#39;</span><span class="token punctuation">,</span>
    Saturday <span class="token operator">=</span> <span class="token string">&#39;Saturday&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If needed the previous union Type enums can be restored with:</p><div class="language-csharp"><pre><code>TypeScriptGenerator<span class="token punctuation">.</span>UseUnionTypeEnums <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will revert to generating the previous restricted Type Union strings:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">DayOfWeek</span> <span class="token operator">=</span> <span class="token string">&quot;Sunday&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Monday&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Tuesday&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Wednesday&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Thursday&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Friday&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="customize-dto-type-generation" tabindex="-1">Customize DTO Type generation <a class="header-anchor" href="#customize-dto-type-generation" aria-hidden="true">#</a></h3><p>The new <code>PreTypeFilter</code> available in all languages can be used to inject custom code in the generated DTOs output.</p><p>E.g. you can use this feature to add the <code>[Serializable]</code> attribute on all C# DTO Types with:</p><div class="language-csharp"><pre><code>CSharpGenerator<span class="token punctuation">.</span>PreTypeFilter <span class="token operator">=</span> <span class="token punctuation">(</span>sb<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span>IsEnum<span class="token punctuation">.</span><span class="token function">GetValueOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">.</span>IsInterface<span class="token punctuation">.</span><span class="token function">GetValueOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">&quot;[Serializable]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="interfaces-exported-on-dtos" tabindex="-1">Interfaces Exported on DTOs <a class="header-anchor" href="#interfaces-exported-on-dtos" aria-hidden="true">#</a></h3><p>C# Interfaces on DTOs are now exported for all DTOs, instead of just Request DTOs.</p><p>Being able to export language level constructs like Interfaces is an example of the superior approach <a href="/add-servicestack-reference.html">Add ServiceStack Reference</a> has over <a href="/openapi.html#autorest-generated-clients-vs-add-servicestack-reference">Open API and AutoRest generated models</a> which results in cleaner, richer Typed DTOs.</p><h2 id="servicestack-azure" tabindex="-1">ServiceStack.Azure <a class="header-anchor" href="#servicestack-azure" aria-hidden="true">#</a></h2><p>The <a href="https://github.com/ServiceStack/ServiceStack.Azure" target="_blank" rel="noopener noreferrer">ServiceStack.Azure</a> project has been upgraded to use the latest <a href="https://www.nuget.org/packages/Microsoft.Azure.ServiceBus" target="_blank" rel="noopener noreferrer">Microsoft.Azure.ServiceBus v3.1.0</a> for .NET Standard and <a href="https://www.nuget.org/packages/WindowsAzure.ServiceBus" target="_blank" rel="noopener noreferrer">WindowsAzure.ServiceBus v5.0.0</a> for .NET Framework dependencies which have also increased their minimum requirements to .NET Framework <strong>v4.5.2</strong>.</p><h2 id="servicestack" tabindex="-1">ServiceStack <a class="header-anchor" href="#servicestack" aria-hidden="true">#</a></h2><h3 id="async-overloads-in-service-clients" tabindex="-1">Async overloads in Service Clients <a class="header-anchor" href="#async-overloads-in-service-clients" aria-hidden="true">#</a></h3><p>Additional overloads containing <code>CancellationToken</code> we&#39;re added for every async API in .NET&#39;s <code>JsonServiceClient</code> and all other <a href="https://docs.servicestack.net/csharp-client#httpwebrequest-service-clients" target="_blank" rel="noopener noreferrer">.NET HttpWebRequest Service Clients</a>.</p><p>Use these new overloads if you need to cancel Async requests instead of the previous <code>CancelAsync()</code> API.</p><h3 id="bearertoken-in-request-dtos" tabindex="-1">BearerToken in Request DTOs <a class="header-anchor" href="#bearertoken-in-request-dtos" aria-hidden="true">#</a></h3><p>Similar to the <code>IHasSessionId</code> interface for being able to send <a href="/sessions.html#cookie-session-ids">Cookie Session Ids</a>, Request DTOs can now also implement <code>IHasBearerToken</code> to send Bearer Tokens as an alternative for sending them in HTTP Headers or Cookies.</p><p>This lets you authenticate with Auth Providers like <a href="/api-key-authprovider.html">API Key</a> and <a href="/jwt-authprovider.html">JWT</a> in <a href="/encrypted-messaging.html">Encrypted Messaging</a> requests, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Secure</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHasBearerToken</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> BearerToken <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">IEncryptedClient</span> encryptedClient <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetEncryptedClient</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> encryptedClient<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secure</span> <span class="token punctuation">{</span> BearerToken <span class="token operator">=</span> apiKey<span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where it will be embedded and encrypted along with all content in the Request DTO so it can be sent securely over an unsecured HTTP Request.</p><p>Alternatively you can set the <code>BearerToken</code> property on the <code>IEncryptedClient</code> once where it will automatically populate all Request DTOs that implement <code>IHasBearerToken</code>, e.g:</p><div class="language-csharp"><pre><code>encryptedClient<span class="token punctuation">.</span>BearerToken <span class="token operator">=</span> apiKey<span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> encryptedClient<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secure</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="new-fallbackhandlers-filters" tabindex="-1">New FallbackHandlers filters <a class="header-anchor" href="#new-fallbackhandlers-filters" aria-hidden="true">#</a></h3><p>The new <code>IAppHost.FallbackHandlers</code> are the last filters executed for handling any unhandled requests, i.e. they can be used for handling an otherwise <strong>Not Found</strong> response. It has the same signature as <code>CatchAllHandlers</code> where you can return an <code>IHttpHandler</code> to handle the request or <code>null</code> to allow not found requests to fall-through, e.g:</p><div class="language-csharp"><pre><code>appHost<span class="token punctuation">.</span>FallbackHandlers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>httpMethod<span class="token punctuation">,</span> pathInfo<span class="token punctuation">,</span> requestFilePath<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">ShouldHandleRequest</span><span class="token punctuation">(</span>pathInfo<span class="token punctuation">)</span>
    <span class="token punctuation">?</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="multitenancy" tabindex="-1">Multitenancy <a class="header-anchor" href="#multitenancy" aria-hidden="true">#</a></h3><p>You can add the <code>[NamedConnection]</code> attribute on Request DTOs to <a href="https://docs.servicestack.net/multitenancy#changedb-apphost-registration" target="_blank" rel="noopener noreferrer">change which database connection</a> your Services <code>Db</code> connection is configured with:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">NamedConnection</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Reporting&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewSales</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>ViewSalesResponse<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>Which is in addition to being able to annotate them on AutoQuery Table Sources:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">NamedConnection</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Reporting&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sales</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuerySales</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">QueryDb<span class="token punctuation">&lt;</span>Sales<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><h3 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-hidden="true">#</a></h3><p>Plugins can register AuthProviders by calling <code>RegisterAuthProvider()</code> before the <code>AuthFeature</code> plugin is registered, which can be achieved in Plugins by having them implement <code>IPreInitPlugin</code>:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPreInitPlugin</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IAppHost</span> appHost<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RegisterAuthProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyAuthProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Use <code>AccountLockedValidator</code> to override logic to determine when an account is locked, e.g. by default an Account is Locked when it has a <code>LockedDate</code> but can be changed to allow locking accounts at a future date with:</p><div class="language-csharp"><pre><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CredentialsAuthProvider</span> <span class="token punctuation">{</span>
    AccountLockedValidator <span class="token operator">=</span> <span class="token punctuation">(</span>authRepo<span class="token punctuation">,</span> userAuth<span class="token punctuation">,</span> tokens<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        userAuth<span class="token punctuation">.</span>LockedDate <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> userAuth<span class="token punctuation">.</span>LockedDate <span class="token operator">&lt;=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Alternatively if you&#39;re using a Custom Auth Provider you can just override <code>IsAccountLocked()</code> to override this behavior.</p><h3 id="serilog" tabindex="-1">Serilog <a class="header-anchor" href="#serilog" aria-hidden="true">#</a></h3><p>You can now specify a custom Serilog <code>LoggerConfiguration</code> in <code>SerilogFactory</code> constructor, e.g:</p><div class="language-csharp"><pre><code>LogManager<span class="token punctuation">.</span>LogFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SerilogFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">MongoDBCapped</span><span class="token punctuation">(</span><span class="token string">&quot;mongodb://mymongourl:27017/mylogs&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">collectionName</span><span class="token punctuation">:</span> <span class="token string">&quot;mycollectionoflogs&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">cappedMaxSizeMb</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">cappedMaxDocuments</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="servicestack-text" tabindex="-1">ServiceStack.Text <a class="header-anchor" href="#servicestack-text" aria-hidden="true">#</a></h2><ul><li><code>JsConfig.ThrowOnDeserializationError</code> was renamed to <code>JsConfig.ThrowOnError</code></li></ul><h1 id="v5-1-0-release-notes" tabindex="-1"><a href="/releases/v5.1.0.html">v5.1.0 Release Notes</a> <a class="header-anchor" href="#v5-1-0-release-notes" aria-hidden="true">#</a></h1>`,121),Qn=[c,l,i,r,u,k,d,h,m,g,b,v,f,w,y,S,T,x,_,A,C,q,P,E,N,I,R,D,B,M,j,L,O,W,J,H,F,z,V,U,$,Q,G,K,X,Y,Z,nn,an,sn,en,tn,on,pn,cn,ln,rn,un,kn,dn,hn,mn,gn,bn,vn,fn,wn,yn,Sn,Tn,xn,_n,An,Cn,qn,Pn,En,Nn,In,Rn,Dn,Bn,Mn,jn,Ln,On,Wn,Jn,Hn,Fn,zn,Vn,Un,$n];function Gn(Kn,Xn,Yn,Zn,na,aa){return o(),t("div",null,Qn)}var ta=e(p,[["render",Gn]]);export{ea as __pageData,ta as default};
