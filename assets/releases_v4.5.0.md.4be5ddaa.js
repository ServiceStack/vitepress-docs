import{_ as a,c as n,o as e,a as s}from"./app.14440598.js";const h='{"title":"v4.5.0 Release Notes","description":"","frontmatter":{"slug":"v4-5-0","title":"v4.5.0 Release Notes"},"headers":[{"level":3,"title":"Upgraded 3rd Party NuGet packages","slug":"upgraded-3rd-party-nuget-packages"},{"level":2,"title":".NET Core support for ServiceStack.Redis!","slug":"net-core-support-for-servicestack-redis"},{"level":2,"title":"New Xamarin.Forms TechStacks App","slug":"new-xamarin-forms-techstacks-app"},{"level":2,"title":"AutoQuery Viewer Saved Queries","slug":"autoquery-viewer-saved-queries"},{"level":2,"title":"Create Live Executable Docs with Gistlyn","slug":"create-live-executable-docs-with-gistlyn"},{"level":3,"title":"Creating New Gists or Collections","slug":"creating-new-gists-or-collections"},{"level":3,"title":"Uploading Images","slug":"uploading-images"},{"level":3,"title":"Navigating, Browsing and Editing Collections","slug":"navigating-browsing-and-editing-collections"},{"level":2,"title":"The Truly Empty ASP.NET Template","slug":"the-truly-empty-asp-net-template"},{"level":3,"title":"The Minimal ASP.NET Template we wanted","slug":"the-minimal-asp-net-template-we-wanted"},{"level":3,"title":"Minimal but still Useful","slug":"minimal-but-still-useful"},{"level":2,"title":"Generating API Keys for Existing Users","slug":"generating-api-keys-for-existing-users"},{"level":2,"title":"Other Features","slug":"other-features"},{"level":3,"title":"Auto rewriting of HTTPS Links","slug":"auto-rewriting-of-https-links"}],"relativePath":"releases/v4.5.0.md","lastUpdated":1634495308438}',t={},o=s(`<p>The major change in this release and the reason for the major version number increase is that <strong>all</strong> packages have been <strong>upgraded to .NET 4.5</strong> as <a href="/releases/v4.0.54.html#warning-net-40-builds-will-cease-after-august-1-2016">announced earlier this year</a>. If your ServiceStack projects are already on .NET 4.5 this will be a seamless update just like any other release except it will install <strong>.NET 4.5</strong> ServiceStack .dlls instead of the previous <strong>.NET 4.0</strong> dlls.</p><p>If your ServiceStack projects are instead still on .NET 4.0 this will be a breaking change which will require converting <strong>all</strong> your projects to <strong>.NET 4.5 Framework</strong> before upgrading, e.g:</p><p><img src="http://i.imgur.com/GV8TmAS.png" alt=""></p><p>You will also need to have .NET 4.5 Framework installed on any deployment Servers that doesn&#39;t have it already.</p><h3 id="upgraded-3rd-party-nuget-packages" tabindex="-1">Upgraded 3rd Party NuGet packages <a class="header-anchor" href="#upgraded-3rd-party-nuget-packages" aria-hidden="true">#</a></h3><p>All external NuGet package dependencies have also been upgraded to use the <strong>latest .NET 4.5 dlls</strong>, including using <strong>v3.1.7</strong> of <code>Npgsql</code>, <strong>v3.6.5</strong> of <code>RabbitMQ.Client</code> and <code>ServiceStack.Razor</code> is now referencing <strong>v3.2.3</strong> of the official <code>Microsoft.AspNet.Razor</code> NuGet package.</p><p>We&#39;ve also upgraded our build servers and all core ServiceStack projects to start using C# 6 which we&#39;re able to immediately benefit from by replacing lots of C# 5 boilerplate with C# 6 syntax sugar, we&#39;ve also updated OrmLite&#39;s embedded version of Dapper to the latest version which is a heavy user of C# 6 features.</p><p>We&#39;ve intentionally kept features to the core packages in this release minimal so that any issues that arise in this release can be attributable to the upgrade to .NET 4.5.</p><h2 id="net-core-support-for-servicestack-redis" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack.Redis/blob/netcore/docs/pages/netcore.md" target="_blank" rel="noopener noreferrer">.NET Core support for ServiceStack.Redis!</a> <a class="header-anchor" href="#net-core-support-for-servicestack-redis" aria-hidden="true">#</a></h2><p>In following the <a href="/releases/v4.0.62.html#net-core-support-for-servicestackclient">.NET Core support of our Text and Client libraries</a> in our last release we&#39;ve extended our support for .NET Core in this release to now also include <a href="https://github.com/ServiceStack/ServiceStack.Redis" target="_blank" rel="noopener noreferrer">ServiceStack.Redis</a> where we now have .NET Core builds for our <a href="https://www.nuget.org/profiles/servicestack" target="_blank" rel="noopener noreferrer">Top 3 popular NuGet packages</a> which now includes:</p><ul><li><a href="https://www.nuget.org/packages/ServiceStack.Redis.Core" target="_blank" rel="noopener noreferrer">ServiceStack.Redis.Core</a></li><li><a href="https://www.nuget.org/packages/ServiceStack.Client.Core" target="_blank" rel="noopener noreferrer">ServiceStack.Client.Core</a></li><li><a href="https://www.nuget.org/packages/ServiceStack.Common.Core" target="_blank" rel="noopener noreferrer">ServiceStack.Common.Core</a></li><li><a href="https://www.nuget.org/packages/ServiceStack.Text.Core" target="_blank" rel="noopener noreferrer">ServiceStack.Text.Core</a></li><li><a href="https://www.nuget.org/packages/ServiceStack.Interfaces.Core" target="_blank" rel="noopener noreferrer">ServiceStack.Interfaces.Core</a></li></ul><p>Just like the other .NET Core libraries .NET Core builds of ServiceStack.Redis is released with a <code>*.Core</code> suffix until development of .NET Core has stabilized.</p><p>To make it easy to start using Redis in a .NET Core App we&#39;ve created a step-by-step guide for <a href="https://github.com/ServiceStack/ServiceStack.Redis/blob/netcore/docs/pages/netcore.md" target="_blank" rel="noopener noreferrer">getting started with ServiceStack.Redis on .NET Core</a> in both Windows and Linux.</p><h2 id="new-xamarin-forms-techstacks-app" tabindex="-1"><a href="https://github.com/ServiceStackApps/TechStacksXamarin" target="_blank" rel="noopener noreferrer">New Xamarin.Forms TechStacks App</a> <a class="header-anchor" href="#new-xamarin-forms-techstacks-app" aria-hidden="true">#</a></h2><p>We&#39;ve added a new TechStacks Mobile App to our expanding showcase of different ways where ServiceStack provides a seamless end-to-end Typed API development experience for developing Native Mobile Apps which now includes:</p><ul><li><a href="https://github.com/ServiceStackApps/TechStacksXamarin" target="_blank" rel="noopener noreferrer">C# iOS/Android Xamarin.Forms TechStacks App</a> - <strong>new!</strong></li><li><a href="https://github.com/ServiceStackApps/TechStacksApp" target="_blank" rel="noopener noreferrer">Swift iOS TechStacks App</a></li><li><a href="https://github.com/ServiceStackApps/TechStacksAndroidApp" target="_blank" rel="noopener noreferrer">Java Android Techstacks App</a></li><li><a href="https://github.com/ServiceStackApps/TechStacksKotlinApp" target="_blank" rel="noopener noreferrer">Kotlin Android TechStacks App</a></li><li><a href="https://github.com/ServiceStackApps/TechStacksAuth" target="_blank" rel="noopener noreferrer">C# Xamarin.Android TechStacks Auth Example</a></li></ul><p>Whilst not as flexibile or performant as native code, <a href="https://www.xamarin.com/forms" target="_blank" rel="noopener noreferrer">Xamarin.Forms</a> enables the most code reuse of all the available options when needing to develop both iOS and Android Apps whilst still allowing for customization through styling or custom platform specific renderers. It also benefits from being able to use C# and much of the rich cross-platform libraries in .NET.</p><p>Despite sharing the majority of UI code between Android and iOS, Xamarin.Forms Apps also adopts the navigation idioms of each platform to provide a native &quot;look and feel&quot; which we can see by running the TechStacks Xamarin.Forms App on iOS and Android:</p><p><a href="https://www.youtube.com/watch?v=4ghchU3xKs4" target="_blank" rel="noopener noreferrer"><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/apps/TechStacksXamForms/video_preview.png" alt=""></a></p><p>See the <a href="https://github.com/ServiceStackApps/TechStacksXamarin" target="_blank" rel="noopener noreferrer">TechStacksXamarin Github project</a> for more info on creating Xamarin.Forms Apps and how it leverages <a href="/add-servicestack-reference.html">Add ServiceStack Reference</a> and ServiceStack&#39;s <a href="/csharp-client.html">.NET Service Clients</a> to enable a responsive and productive development experience.</p><h2 id="autoquery-viewer-saved-queries" tabindex="-1"><a href="https://github.com/ServiceStack/Admin" target="_blank" rel="noopener noreferrer">AutoQuery Viewer</a> Saved Queries <a class="header-anchor" href="#autoquery-viewer-saved-queries" aria-hidden="true">#</a></h2><p>We&#39;ve further refined <a href="https://github.com/ServiceStack/Admin" target="_blank" rel="noopener noreferrer">AutoQuery Viewer</a> and added support for Saved Queries where you can save queries under each AutoQuery Service by clicking the <strong>save icon</strong>.</p><p>The saved query will be listed with the name provided and displayed to the right of the save icon, e.g:</p><p><a href="https://github.com/ServiceStack/Admin" target="_blank" rel="noopener noreferrer"><img src="http://i.imgur.com/hySw1T9.png" alt=""></a></p><p>This makes it easy for everyone to maintain and easily switch between multiple personalized views of any <a href="/autoquery.html">AutoQuery Service</a>.</p><h2 id="create-live-executable-docs-with-gistlyn" tabindex="-1">Create Live Executable Docs with Gistlyn <a class="header-anchor" href="#create-live-executable-docs-with-gistlyn" aria-hidden="true">#</a></h2><p>In our mission to make <a href="http://gistlyn.com" target="_blank" rel="noopener noreferrer">Gistlyn</a> an immensely useful and collaborative learning tool for exploring any .NET library, we&#39;ve greatly improved the UX for editing Collections making it easier than ever to create &quot;Live documentation&quot; which we believe is the best way to learn about a library, mixing documentation and providing a live development experience letting developers try out and explore what they&#39;ve just learned without losing context by switching to their development environment and setting up new projects to match each code sample.</p><p>Gistlyn also makes it easy to share C# snippets with colleagues or reporting an issue to library mainteners with just a URL or a saved Gist ID which anyone can view in a browser at <a href="http://gistlyn.com" target="_blank" rel="noopener noreferrer">gistlyn.com</a> or on their <a href="http://gistlyn.com/downloads" target="_blank" rel="noopener noreferrer">Desktop version of Gistlyn</a>.</p><p>Here&#39;s an example of the new Collection authoring features in action:</p><p><a href="https://youtu.be/FkdzYsx2lYw" target="_blank" rel="noopener noreferrer"><img src="http://i.imgur.com/156wYPJ.png" alt=""></a></p><p>These new UX improvements have closed the loop in Gistlyn which lets you create, edit, browse and run C# Gists or Markdown docs, all without leaving Gistlyn. The editing experience is seamless and retains the same benefits as editing C# gists, including auto-saving as-you-type to <code>localStorage</code>, integrated persistence to Github gists, <a href="http://gistlyn.com/?collection=1576fda8eea87abbe94fa8051b4fed34" target="_blank" rel="noopener noreferrer">snapshots</a>, deep linking as well as a built-in <strong>Markdown Editor</strong> with <strong>Live Preview</strong>, <strong>easy linking</strong> and <strong>seamless image uploads</strong> making it a great for authoring any kind of Markdown documentation and what we used to create these Release Notes \u{1F603}</p><p>Creating a Collection can be done at anytime from Gistlyn&#39;s main menu:</p><p><img src="http://i.imgur.com/UVbKOWn.png" alt=""></p><p>This will open a new Markdown Document into Gistlyn&#39;s built-in <strong>Markdown Editor</strong>. Hit <code>Ctrl+S</code> to save your modified copy to <a href="https://gist.github.com" target="_blank" rel="noopener noreferrer">your Github Gists</a>. After saving, the top bar will turn <strong>Green</strong> to indicate you&#39;re viewing or modifying one of your own Gists or Collections:</p><p><img src="http://i.imgur.com/PiMHll3.png" alt=""></p><h3 id="creating-new-gists-or-collections" tabindex="-1">Creating New Gists or Collections <a class="header-anchor" href="#creating-new-gists-or-collections" aria-hidden="true">#</a></h3><p>Once editing the document you can use the <strong>Markdown Toolbar</strong> to quickly access Markdown specific formatting features like the <strong>Insert Link</strong> icon:</p><p><img src="http://i.imgur.com/XWCmjXl.png" alt=""></p><p>Which opens the Insert Link dialog and quickly create and link to new Gist or Collection by selecting the existing Gist or Collection you wish to use as a template:</p><p><img src="http://i.imgur.com/IRBGD4V.png" alt=""></p><p>This lets you quickly create multiple C# Gists using a copy of an existing Gists <code>packages.config</code> and supporting <code>.cs</code> source files, significantly reducing the effort for creating multiple C# samples.</p><h3 id="uploading-images" tabindex="-1">Uploading Images <a class="header-anchor" href="#uploading-images" aria-hidden="true">#</a></h3><p>You can add images to your document by click on the Insert Image icon below:</p><p><img src="http://i.imgur.com/oRe5UVV.png" alt=""></p><p>This will open the <strong>Insert Image</strong> dialog where you can drag multiple images to upload them to imgur and embed them in your document:</p><p><img src="http://i.imgur.com/n8zYoqJ.png" alt=""></p><p>After each image has finished uploading to Imgur, it will be embedded in your document from your Cursors position using the Markdown Image Format below:</p><div class="language-"><pre><code>![](http://i.imgur.com/n8zYoqJ.png)
</code></pre></div><h3 id="navigating-browsing-and-editing-collections" tabindex="-1">Navigating, Browsing and Editing Collections <a class="header-anchor" href="#navigating-browsing-and-editing-collections" aria-hidden="true">#</a></h3><p>As you&#39;re authoring your Markdown Document you can freely jump between different Gists or Collections as Gistlyn automatically saves as-you-type so you can use the <strong>Back</strong> button to jump back to your new collection as you left it without missing a beat.</p><p>After navigating away from your page, the arrow icons shown below will appear in the middle to indicate what you&#39;re editing on the left no longer matches the same page on the right:</p><p><img src="http://i.imgur.com/JATmJJ8.png" alt=""></p><p>Use the top <strong>right arrow</strong> icon to load the page you&#39;re editing in the preview window on the right to load the real-time preview of your Markdown document.</p><p>Use the bottom <strong>left arrow</strong> icon to load the Collection you&#39;re viewing on the right in the Editor.</p><h2 id="the-truly-empty-asp-net-template" tabindex="-1">The Truly Empty <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Template <a class="header-anchor" href="#the-truly-empty-asp-net-template" aria-hidden="true">#</a></h2><p><img src="http://i.imgur.com/ZCHoJFA.png" alt=""></p><p>Over the years it&#39;s becoming harder and harder to create an Empty <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> Template as it continues to accumulate more cruft, unused dlls, hidden behavior, hooks into external services and other unnecessary bloat. Most of the bloat added since <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> 2.0 for the most part has been unnecessary yet most .NET developers end up living with it because it&#39;s in the default template and they&#39;re unsure what each unknown dlls and default configuration does or what unintended behavior it will cause down the line if they remove it.</p><p>For ServiceStack and other lightweight Web Frameworks this added weight is completely unnecessary and can be safely removed. E.g. <a href="https://github.com/ServiceStackApps/Chat#super-lean-front-and-back" target="_blank" rel="noopener noreferrer">most ServiceStack Apps just needs a few ServiceStack .dlls</a> and a <a href="/create-your-first-webservice.html#register-servicestack-handler">single Web.config mapping</a> to tell <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> to route all calls to ServiceStack. Any other <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> config you would add in ServiceStack projects is just to get <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> to disable any conflicting default behavior, e.g:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>webPages:Enabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Tells <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> to stop hijacking Razor Views, required even when no <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web Pages or MVC dlls are referenced. If using <a href="/server-events.html">Server Events</a> you&#39;ll also need to disable dynamic compression:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>urlCompression</span> <span class="token attr-name">doStaticCompression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">doDynamicCompression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>To prevent <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> from buffering responses, required even when <code>HttpResponseBase.BufferOutput=false</code>.</p><p>Or to reduce unnecessary requests and speed up iteration times, you can disable Browser Link with:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vs:EnableBrowserLink<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="the-minimal-asp-net-template-we-wanted" tabindex="-1">The Minimal <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Template we wanted <a class="header-anchor" href="#the-minimal-asp-net-template-we-wanted" aria-hidden="true">#</a></h3><p>We&#39;ve decided to reverse this trend and instead of focusing on what can be added, we&#39;re focusing on what can be removed whilst still remaining useful for most modern <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web Apps.</p><p>With this goal we&#39;ve reduced the <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Empty Template down to a single project with the only external dependency being Roslyn:</p><p><img src="http://i.imgur.com/jKFga3J.png" alt=""></p><p>Most dlls have been removed and the <code>Web.config</code> just contains registration for Roslyn and config for disabling <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a>&#39;s unwanted default behavior:</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vs:EnableBrowserLink<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>webPages:Enabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.web</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpRuntime</span> <span class="token attr-name">targetFramework</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.5<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilation</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.web</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.codedom</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilers</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compiler</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c#;cs;csharp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">extension</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.cs<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35<span class="token punctuation">&quot;</span></span> <span class="token attr-name">warningLevel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">compilerOptions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/langversion:6 /nowarn:1659;1699;1701<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compiler</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vb;vbs;visualbasic;vbscript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">extension</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.vb<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35<span class="token punctuation">&quot;</span></span> <span class="token attr-name">warningLevel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">compilerOptions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/langversion:14 /nowarn:41008 /define:_MYTYPE=\\<span class="token entity named-entity" title="&quot;">&amp;quot;</span>Web\\<span class="token entity named-entity" title="&quot;">&amp;quot;</span> /optionInfer+<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilers</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.codedom</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>The only <code>.cs</code> file is an Empty <code>Global.asax.cs</code> with an empty placeholder for running custom code on Startup:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">WebApplication</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Global</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpApplication</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>And that&#39;s it! <code>ASP.NET Empty</code> is a single project empty <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web Application with no additional references which we wont be adding to in future other than any configuration necessary to disable default <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> behavior or enable C#&#39;s latest language features so you can safely use this template for creating small stand-alone <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Web Apps using lightweight Web Frameworks like ServiceStack or <a href="http://nancyfx.org/" target="_blank" rel="noopener noreferrer">Nancy</a>.</p><h3 id="minimal-but-still-useful" tabindex="-1">Minimal but still Useful <a class="header-anchor" href="#minimal-but-still-useful" aria-hidden="true">#</a></h3><p>You can then easily <a href="/create-your-first-webservice.html">Convert this empty template into a functional ServiceStack Web App</a> by:</p><ol><li><p>Installing <a href="https://github.com/ServiceStackApps/Todos/blob/master/src/Todos/packages.config" target="_blank" rel="noopener noreferrer">ServiceStack and any other dependency</a> you want to use, e.g:</p><p>PM&gt; Install-Package ServiceStack PM&gt; Install-Package ServiceStack.Redis</p></li><li><p>Adding the <a href="https://github.com/ServiceStackApps/Todos/blob/fdcffd37d4ad49daa82b01b5876a9f308442db8c/src/Todos/Web.config#L34-L39" target="_blank" rel="noopener noreferrer">ASP.NET HTTP Handler mapping</a> to route all requests to ServiceStack:</p></li></ol><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>validation</span> <span class="token attr-name">validateIntegratedModeConfiguration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>handlers</span><span class="token punctuation">&gt;</span></span>
	    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ServiceStack.Factory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ServiceStack.HttpHandlerFactory, ServiceStack<span class="token punctuation">&quot;</span></span> <span class="token attr-name">verb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">preCondition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>integratedMode<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resourceType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Unspecified<span class="token punctuation">&quot;</span></span> <span class="token attr-name">allowPathInfo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>handlers</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ol start="3"><li>Adding your <a href="https://github.com/ServiceStackApps/Todos/blob/master/src/Todos/Global.asax.cs" target="_blank" rel="noopener noreferrer">ServiceStack AppHost and Services in Global.asax.cs</a>.</li></ol><p>That&#39;s all that&#39;s needed to create a functional Web App, which in this case creates a <a href="https://github.com/ServiceStackApps/Todos/" target="_blank" rel="noopener noreferrer">Backbone TODO compatible REST API with a Redis back-end</a> which can power all <a href="http://todomvc.com" target="_blank" rel="noopener noreferrer">todomvc.com</a> Single Page Apps.</p><h2 id="generating-api-keys-for-existing-users" tabindex="-1">Generating API Keys for Existing Users <a class="header-anchor" href="#generating-api-keys-for-existing-users" aria-hidden="true">#</a></h2><p>Whilst not a feature in ServiceStack, this script is useful if you want to enable ServiceStack&#39;s <a href="/api-key-authprovider.html">API Key AuthProvider</a> but you have existing users you also want to generate API Keys for.</p><p>You can add the script below (which only needs to be run once) to your <code>AppHost.Configure()</code> which will use the configuration in your registered <code>ApiKeyAuthProvider</code> to generate new keys for all existing users that don&#39;t have keys.</p><p>This example assumes the typical scenario of using an <code>OrmLiteAuthRepository</code> to store your Users in an RDBMS:</p><div class="language-csharp"><pre><code>AfterInitCallbacks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>host <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> authProvider <span class="token operator">=</span> <span class="token punctuation">(</span>ApiKeyAuthProvider<span class="token punctuation">)</span>
        AuthenticateService<span class="token punctuation">.</span><span class="token function">GetAuthProvider</span><span class="token punctuation">(</span>ApiKeyAuthProvider<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryResolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> userWithKeysIds <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Column</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApiKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">SelectDistinct</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>UserAuthId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span>Parse<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> userIdsMissingKeys <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Column</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserAuth<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> userWithKeysIds<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>userWithKeysIds<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> authRepo <span class="token operator">=</span> <span class="token punctuation">(</span>IManageApiKeys<span class="token punctuation">)</span>host<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryResolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> userId <span class="token keyword">in</span> userIdsMissingKeys<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> apiKeys <span class="token operator">=</span> authProvider<span class="token punctuation">.</span><span class="token function">GenerateNewApiKeys</span><span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            authRepo<span class="token punctuation">.</span><span class="token function">StoreAll</span><span class="token punctuation">(</span>apiKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If using another Auth Repository backend you will need to modify this script to fetch the userIds for all users missing API Keys for the data persistence back-end you&#39;re using.</p><h2 id="other-features" tabindex="-1">Other Features <a class="header-anchor" href="#other-features" aria-hidden="true">#</a></h2><h3 id="auto-rewriting-of-https-links" tabindex="-1">Auto rewriting of HTTPS Links <a class="header-anchor" href="#auto-rewriting-of-https-links" aria-hidden="true">#</a></h3><p>ServiceStack now automatically rewrites outgoing links to use <code>https://</code> for Requests that were forwarded by an SSL-terminating Proxy and containing the <code>X-Forwarded-Proto = https</code> HTTP Header. You can override <code>AppHost.UseHttps()</code> to change this behavior.</p><h1 id="v4-0-62-release-notes" tabindex="-1"><a href="/releases/v4.0.62.html">v4.0.62 Release Notes</a> <a class="header-anchor" href="#v4-0-62-release-notes" aria-hidden="true">#</a></h1>`,89),p=[o];function r(c,i,l,u,k,d){return e(),n("div",null,p)}var m=a(t,[["render",r]]);export{h as __pageData,m as default};
