import{_ as t,c as o,o as s,b as e,e as a,a as r}from"./app.14440598.js";const S='{"title":"Compiled Razor Views","description":"","frontmatter":{"slug":"compiled-razor-views","title":"Compiled Razor Views"},"headers":[{"level":3,"title":"Install ServiceStack.Razor.BuildTask","slug":"install-servicestack-razor-buildtask"},{"level":3,"title":"Register Compiled Assembly to RazorFormat Plugin","slug":"register-compiled-assembly-to-razorformat-plugin"},{"level":3,"title":"Retains optimal development workflow","slug":"retains-optimal-development-workflow"},{"level":2,"title":"Example Projects","slug":"example-projects"},{"level":3,"title":"Razor Rockstars","slug":"razor-rockstars"},{"level":3,"title":"ServiceStack.Gap","slug":"servicestack-gap"}],"relativePath":"compiled-razor-views.md","lastUpdated":1634495307614}',n={},i=e("p",null,[a("The primary benefits of compiled views is improved performance by eliminating compile times of Razor views. They can also provide static compilation benefits by highlighting compile errors during development and can simplify deployment by avoiding the need to deploy any "),e("code",null,"*.cshtml"),a(" files as they end up pre-compiled in the containing Assembly.")],-1),l=e("h3",{id:"install-servicestack-razor-buildtask",tabindex:"-1"},[a("Install ServiceStack.Razor.BuildTask "),e("a",{class:"header-anchor",href:"#install-servicestack-razor-buildtask","aria-hidden":"true"},"#")],-1),c=e("p",null,[a("To enable compiled razor views you need to add the "),e("a",{href:"https://www.nuget.org/packages/ServiceStack.Razor.BuildTask",target:"_blank",rel:"noopener noreferrer"},"ServiceStack.Razor.BuildTask"),a(" NuGet Package to the project containing your Razor "),e("code",null,"*.cshtml"),a(" pages, i.e:")],-1),p=e("div",{class:"package-reference-box"},[e("div",{class:"flex"},[e("div",{class:"flex-grow pre-container",style:{background:"#002440"}},[e("pre",{class:"sh copy m-0 p-0 pl-2 py-1 align-middle",style:{background:"#002440"}},[e("p",null,[e("code",null,'<PackageReference Include="ServiceStack.Razor.BuildTask" Version="5.*" />')]),a(`
`)])]),e("div",{class:"flex-shrink"},[e("i",{class:"svg-copy inline-block w-8 h-full",title:"copy",onclick:"copy(this)"}),e("b")])]),e("div",{class:"copy-text w-full text-right h-6"})],-1),d=r(`__VP_STATIC_START__<p>This doesn&#39;t add any additional dlls to your project, instead it just sets the <strong>BuildAction</strong> to all <code>*.cshtml</code> pages to <strong>Content</strong> and registers an MSBuild task to your <code>.csproj</code> project file set to pre-compile razor views on every build.</p><h3 id="register-compiled-assembly-to-razorformat-plugin" tabindex="-1">Register Compiled Assembly to RazorFormat Plugin <a class="header-anchor" href="#register-compiled-assembly-to-razorformat-plugin" aria-hidden="true">#</a></h3><p>To register assemblies containing compiled razor views with Razor Format you just need to add it to RazorFormat.LoadFromAssemblies, e.g:</p><div class="language-csharp"><pre><code>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RazorFormat</span> <span class="token punctuation">{</span>
    LoadFromAssemblies <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">RockstarsService</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="retains-optimal-development-workflow" tabindex="-1">Retains optimal development workflow <a class="header-anchor" href="#retains-optimal-development-workflow" aria-hidden="true">#</a></h3><p>The Compiled Views support continues to retain a great development experience in <a href="/debugging.html#debugmode">DebugMode</a> as all Razor Views are initially loaded from the Assembly but also continues to monitor the file system for modified views, automatically compiling and loading them on the fly so AppDomain reloads aren&#39;t required to see changes.</p><h2 id="example-projects" tabindex="-1">Example Projects <a class="header-anchor" href="#example-projects" aria-hidden="true">#</a></h2><h3 id="razor-rockstars" tabindex="-1"><a href="https://github.com/ServiceStackApps/RazorRockstars" target="_blank" rel="noopener noreferrer">Razor Rockstars</a> <a class="header-anchor" href="#razor-rockstars" aria-hidden="true">#</a></h3><p>The <a href="https://github.com/ServiceStackApps/RazorRockstars/tree/master/src/RazorRockstars.CompiledViews" target="_blank" rel="noopener noreferrer">RazorRockstars.CompiledViews</a> <a href="http://VS.NET" target="_blank" rel="noopener noreferrer">VS.NET</a> project shows an example of <a href="http://razor.servicestack.net/" target="_blank" rel="noopener noreferrer">Razor Rockstars</a> which uses shared compiled Razor Views in a <code>.dll</code> in a number of different projects:</p><ul><li><a href="https://github.com/ServiceStackApps/RazorRockstars/tree/master/src/RazorRockstars.CompiledViews.WpfHost" target="_blank" rel="noopener noreferrer">WPF Host</a></li><li><a href="https://github.com/ServiceStackApps/RazorRockstars/tree/master/src/RazorRockstars.CompiledViews.SelfHost" target="_blank" rel="noopener noreferrer">HttpListener SelfHost</a></li><li><a href="https://github.com/ServiceStackApps/RazorRockstars/tree/master/src/RazorRockstars.CompiledViews.WebHost" target="_blank" rel="noopener noreferrer">ASP.NET WebHost</a></li></ul><h3 id="servicestack-gap" tabindex="-1"><a href="https://github.com/ServiceStack/ServiceStack.Gap" target="_blank" rel="noopener noreferrer">ServiceStack.Gap</a> <a class="header-anchor" href="#servicestack-gap" aria-hidden="true">#</a></h3><p>The <a href="https://github.com/ServiceStack/ServiceStack.Gap" target="_blank" rel="noopener noreferrer">ServiceStack.Gap</a> project shows how to extend Compiled Razor Views and use them to create embedded ServiceStack solutions that can be ILMerged down to a single <code>.exe</code>.</p>__VP_STATIC_END__`,12),h=[i,l,c,p,d];function m(u,k,g,f,v,b){return s(),o("div",null,h)}var z=t(n,[["render",m]]);export{S as __pageData,z as default};
